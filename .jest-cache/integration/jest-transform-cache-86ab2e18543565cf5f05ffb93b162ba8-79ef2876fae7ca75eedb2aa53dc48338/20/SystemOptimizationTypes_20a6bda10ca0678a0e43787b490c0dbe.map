{"version":3,"names":["cov_7m72j7cf8","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","OptimizationObjective","exports","OptimizationAlgorithm","ConstraintType","VariableType","OptimizationStatus"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/types/SystemOptimizationTypes.ts"],"sourcesContent":["/**\n * System Optimization Type Definitions for Phase 3 Priority 2\n * \n * Comprehensive TypeScript interfaces for dynamic system optimization including:\n * - Multi-objective optimization problems\n * - Constraint handling and validation\n * - Optimization algorithms and parameters\n * - System configuration and variables\n * - Performance metrics and results\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\n// ============================================================================\n// Core Optimization Enums\n// ============================================================================\n\nexport enum OptimizationObjective {\n  MINIMIZE_PRESSURE_LOSS = 'minimize_pressure_loss',\n  MINIMIZE_ENERGY_CONSUMPTION = 'minimize_energy_consumption',\n  MINIMIZE_TOTAL_COST = 'minimize_total_cost',\n  MINIMIZE_NOISE_LEVEL = 'minimize_noise_level',\n  MAXIMIZE_EFFICIENCY = 'maximize_efficiency',\n  MINIMIZE_SPACE_USAGE = 'minimize_space_usage',\n  MINIMIZE_MATERIAL_COST = 'minimize_material_cost',\n  MINIMIZE_INSTALLATION_TIME = 'minimize_installation_time'\n}\n\nexport enum OptimizationAlgorithm {\n  GENETIC_ALGORITHM = 'genetic_algorithm',\n  SIMULATED_ANNEALING = 'simulated_annealing',\n  PARTICLE_SWARM = 'particle_swarm',\n  GRADIENT_DESCENT = 'gradient_descent',\n  DIFFERENTIAL_EVOLUTION = 'differential_evolution',\n  MULTI_OBJECTIVE_GA = 'multi_objective_ga',\n  NSGA_II = 'nsga_ii',\n  HYBRID_OPTIMIZATION = 'hybrid_optimization'\n}\n\nexport enum ConstraintType {\n  VELOCITY_LIMIT = 'velocity_limit',\n  PRESSURE_LIMIT = 'pressure_limit',\n  NOISE_LIMIT = 'noise_limit',\n  SPACE_CONSTRAINT = 'space_constraint',\n  COST_CONSTRAINT = 'cost_constraint',\n  CODE_COMPLIANCE = 'code_compliance',\n  MATERIAL_AVAILABILITY = 'material_availability',\n  INSTALLATION_CONSTRAINT = 'installation_constraint'\n}\n\nexport enum VariableType {\n  DUCT_SIZE = 'duct_size',\n  FITTING_TYPE = 'fitting_type',\n  MATERIAL_TYPE = 'material_type',\n  DAMPER_POSITION = 'damper_position',\n  FAN_SPEED = 'fan_speed',\n  SYSTEM_CONFIGURATION = 'system_configuration',\n  ROUTING_PATH = 'routing_path',\n  INSULATION_THICKNESS = 'insulation_thickness'\n}\n\nexport enum OptimizationStatus {\n  NOT_STARTED = 'not_started',\n  INITIALIZING = 'initializing',\n  RUNNING = 'running',\n  CONVERGED = 'converged',\n  MAX_ITERATIONS = 'max_iterations',\n  CONSTRAINT_VIOLATION = 'constraint_violation',\n  ERROR = 'error',\n  CANCELLED = 'cancelled'\n}\n\n// ============================================================================\n// Optimization Variables and Bounds\n// ============================================================================\n\nexport interface OptimizationVariable {\n  id: string;\n  name: string;\n  type: VariableType;\n  description: string;\n  currentValue: number | string;\n  bounds: VariableBounds;\n  discreteValues?: (number | string)[];\n  units?: string;\n  precision?: number;\n  dependencies?: VariableDependency[];\n}\n\nexport interface VariableBounds {\n  minimum: number | string;\n  maximum: number | string;\n  step?: number;\n  allowedValues?: (number | string)[];\n  constraints?: BoundConstraint[];\n}\n\nexport interface BoundConstraint {\n  condition: string;\n  minValue?: number | string;\n  maxValue?: number | string;\n  description: string;\n}\n\nexport interface VariableDependency {\n  dependentVariableId: string;\n  relationship: 'linear' | 'inverse' | 'custom';\n  coefficient?: number;\n  customFunction?: string;\n  description: string;\n}\n\n// ============================================================================\n// Optimization Constraints\n// ============================================================================\n\nexport interface OptimizationConstraint {\n  id: string;\n  name: string;\n  type: ConstraintType;\n  description: string;\n  constraintFunction: ConstraintFunction;\n  tolerance: number;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  penalty?: number;\n  active: boolean;\n}\n\nexport interface ConstraintFunction {\n  expression: string;\n  variables: string[];\n  parameters?: { [key: string]: number };\n  evaluationMethod: 'analytical' | 'numerical' | 'simulation';\n}\n\nexport interface ConstraintViolation {\n  constraintId: string;\n  violationType: 'boundary' | 'equality' | 'inequality';\n  currentValue: number;\n  requiredValue: number;\n  severity: 'minor' | 'major' | 'critical';\n  penalty: number;\n}\n\n// ============================================================================\n// Objective Functions\n// ============================================================================\n\nexport interface ObjectiveFunction {\n  id: string;\n  objective: OptimizationObjective;\n  weight: number;\n  description: string;\n  evaluationFunction: (variables: OptimizationVariable[]) => number;\n  units: string;\n  targetValue?: number;\n  tolerance?: number;\n}\n\nexport interface MultiObjectiveFunction {\n  objectives: ObjectiveFunction[];\n  aggregationMethod: 'weighted_sum' | 'pareto_optimal' | 'lexicographic' | 'goal_programming';\n  weights?: number[];\n  paretoSettings?: ParetoSettings;\n}\n\nexport interface ParetoSettings {\n  populationSize: number;\n  maxGenerations: number;\n  crossoverRate: number;\n  mutationRate: number;\n  eliteSize: number;\n  diversityMaintenance: boolean;\n}\n\n// ============================================================================\n// System Configuration\n// ============================================================================\n\nexport interface SystemConfiguration {\n  id: string;\n  name: string;\n  description: string;\n  systemType: 'supply' | 'return' | 'exhaust' | 'mixed';\n  segments: SystemSegment[];\n  designConditions: DesignConditions;\n  performanceRequirements: PerformanceRequirements;\n  constraints: SystemConstraints;\n}\n\nexport interface SystemSegment {\n  id: string;\n  segmentType: 'duct' | 'fitting' | 'equipment' | 'terminal';\n  geometry: SegmentGeometry;\n  material: MaterialProperties;\n  flowConditions: FlowConditions;\n  optimizationVariables: string[];\n  fixedParameters: { [key: string]: any };\n}\n\nexport interface SegmentGeometry {\n  shape: 'rectangular' | 'round' | 'oval' | 'custom';\n  dimensions: DimensionSet;\n  length?: number;\n  orientation?: number;\n  position?: Position3D;\n}\n\nexport interface DimensionSet {\n  width?: number;\n  height?: number;\n  diameter?: number;\n  majorAxis?: number;\n  minorAxis?: number;\n  customDimensions?: { [key: string]: number };\n}\n\nexport interface Position3D {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface MaterialProperties {\n  type: string;\n  roughness: number;\n  density: number;\n  thermalConductivity?: number;\n  cost?: number;\n  availability?: 'standard' | 'special_order' | 'custom';\n}\n\nexport interface FlowConditions {\n  volumeFlow: number;\n  velocity: number;\n  pressure: number;\n  temperature: number;\n  density: number;\n  viscosity: number;\n}\n\nexport interface DesignConditions {\n  temperature: number;\n  pressure: number;\n  humidity: number;\n  elevation: number;\n  seasonalVariation?: boolean;\n  operatingSchedule?: OperatingSchedule;\n}\n\nexport interface OperatingSchedule {\n  dailyProfile: HourlyProfile[];\n  weeklyPattern: DailyPattern[];\n  seasonalAdjustments: SeasonalAdjustment[];\n}\n\nexport interface HourlyProfile {\n  hour: number;\n  loadFactor: number;\n  temperatureAdjustment: number;\n}\n\nexport interface DailyPattern {\n  dayOfWeek: number;\n  profileId: string;\n  specialConditions?: string[];\n}\n\nexport interface SeasonalAdjustment {\n  season: 'spring' | 'summer' | 'fall' | 'winter';\n  temperatureRange: [number, number];\n  humidityRange: [number, number];\n  loadAdjustment: number;\n}\n\nexport interface PerformanceRequirements {\n  maxPressureLoss: number;\n  maxVelocity: number;\n  maxNoiseLevel: number;\n  minEfficiency: number;\n  targetFlowRates: { [zoneId: string]: number };\n  balancingTolerance: number;\n}\n\nexport interface SystemConstraints {\n  spaceConstraints: SpaceConstraint[];\n  codeRequirements: CodeRequirement[];\n  budgetConstraints: BudgetConstraint[];\n  installationConstraints: InstallationConstraint[];\n}\n\nexport interface SpaceConstraint {\n  area: BoundingBox;\n  maxDuctSize: DimensionSet;\n  clearanceRequirements: number;\n  accessRequirements: AccessRequirement[];\n}\n\nexport interface BoundingBox {\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n  minZ: number;\n  maxZ: number;\n}\n\nexport interface AccessRequirement {\n  purpose: 'maintenance' | 'inspection' | 'installation';\n  minimumClearance: number;\n  frequency: 'daily' | 'weekly' | 'monthly' | 'annual';\n}\n\nexport interface CodeRequirement {\n  code: 'SMACNA' | 'ASHRAE' | 'IMC' | 'UMC' | 'local';\n  section: string;\n  requirement: string;\n  complianceCheck: (system: SystemConfiguration) => boolean;\n}\n\nexport interface BudgetConstraint {\n  category: 'material' | 'labor' | 'equipment' | 'total';\n  maxCost: number;\n  currency: string;\n  contingency: number;\n}\n\nexport interface InstallationConstraint {\n  sequenceRequirements: string[];\n  equipmentRequirements: string[];\n  timeConstraints: TimeConstraint[];\n  skillRequirements: SkillRequirement[];\n}\n\nexport interface TimeConstraint {\n  phase: string;\n  maxDuration: number;\n  dependencies: string[];\n  criticalPath: boolean;\n}\n\nexport interface SkillRequirement {\n  skill: string;\n  level: 'apprentice' | 'journeyman' | 'master';\n  certification?: string;\n  availability: number;\n}\n\n// ============================================================================\n// Optimization Problem Definition\n// ============================================================================\n\nexport interface OptimizationProblem {\n  id: string;\n  name: string;\n  description: string;\n  systemConfiguration: SystemConfiguration;\n  variables: OptimizationVariable[];\n  objectives: MultiObjectiveFunction;\n  constraints: OptimizationConstraint[];\n  algorithmSettings: AlgorithmSettings;\n  convergenceCriteria: ConvergenceCriteria;\n  outputRequirements: OutputRequirements;\n}\n\nexport interface AlgorithmSettings {\n  algorithm: OptimizationAlgorithm;\n  parameters: AlgorithmParameters;\n  parallelization: ParallelizationSettings;\n  seedValue?: number;\n  restartStrategy?: RestartStrategy;\n}\n\nexport interface AlgorithmParameters {\n  populationSize?: number;\n  maxIterations?: number;\n  maxEvaluations?: number;\n  crossoverRate?: number;\n  mutationRate?: number;\n  selectionMethod?: string;\n  coolingSchedule?: CoolingSchedule;\n  inertiaWeight?: number;\n  accelerationCoefficients?: number[];\n  stepSize?: number;\n  gradientTolerance?: number;\n  customParameters?: { [key: string]: any };\n}\n\nexport interface CoolingSchedule {\n  initialTemperature: number;\n  finalTemperature: number;\n  coolingRate: number;\n  method: 'linear' | 'exponential' | 'logarithmic' | 'adaptive';\n}\n\nexport interface ParallelizationSettings {\n  enabled: boolean;\n  maxWorkers?: number;\n  chunkSize?: number;\n  loadBalancing?: 'static' | 'dynamic';\n}\n\nexport interface RestartStrategy {\n  enabled: boolean;\n  maxRestarts: number;\n  restartCondition: 'stagnation' | 'diversity_loss' | 'time_limit';\n  restartParameters: { [key: string]: any };\n}\n\nexport interface ConvergenceCriteria {\n  maxIterations: number;\n  toleranceValue: number;\n  stagnationLimit: number;\n  improvementThreshold: number;\n  timeLimit?: number;\n  customCriteria?: ConvergenceFunction[];\n}\n\nexport interface ConvergenceFunction {\n  name: string;\n  function: (history: OptimizationHistory) => boolean;\n  description: string;\n}\n\nexport interface OutputRequirements {\n  includeHistory: boolean;\n  detailedAnalysis: boolean;\n  sensitivityAnalysis: boolean;\n  uncertaintyAnalysis: boolean;\n  visualizations: VisualizationRequest[];\n  reportFormat: 'json' | 'pdf' | 'excel' | 'html';\n}\n\nexport interface VisualizationRequest {\n  type: 'convergence' | 'pareto_front' | 'variable_history' | 'constraint_violations' | 'sensitivity';\n  parameters: { [key: string]: any };\n}\n\n// ============================================================================\n// Optimization Results\n// ============================================================================\n\nexport interface OptimizationResult {\n  problemId: string;\n  status: OptimizationStatus;\n  bestSolution: OptimizationSolution;\n  paretoFront?: OptimizationSolution[];\n  statistics: OptimizationStatistics;\n  history: OptimizationHistory;\n  analysis: ResultAnalysis;\n  recommendations: OptimizationRecommendation[];\n  warnings: string[];\n  errors: string[];\n}\n\nexport interface OptimizationSolution {\n  id: string;\n  variables: { [variableId: string]: number | string };\n  objectiveValues: { [objectiveId: string]: number };\n  constraintViolations: ConstraintViolation[];\n  feasible: boolean;\n  dominationRank?: number;\n  crowdingDistance?: number;\n  fitness: number;\n  systemConfiguration: SystemConfiguration;\n  performanceMetrics: SolutionPerformanceMetrics;\n}\n\nexport interface SolutionPerformanceMetrics {\n  totalPressureLoss: number;\n  energyConsumption: number;\n  totalCost: number;\n  noiseLevel: number;\n  efficiency: number;\n  spaceUtilization: number;\n  installationComplexity: number;\n  maintenanceRequirements: number;\n}\n\nexport interface OptimizationStatistics {\n  totalIterations: number;\n  totalEvaluations: number;\n  convergenceIteration: number;\n  executionTime: number;\n  bestFitnessHistory: number[];\n  averageFitnessHistory: number[];\n  diversityHistory: number[];\n  constraintViolationHistory: number[];\n  algorithmSpecificStats: { [key: string]: any };\n}\n\nexport interface OptimizationHistory {\n  iterations: IterationHistory[];\n  populationHistory?: PopulationSnapshot[];\n  parameterHistory: ParameterHistory[];\n  convergenceMetrics: ConvergenceMetrics[];\n}\n\nexport interface IterationHistory {\n  iteration: number;\n  bestFitness: number;\n  averageFitness: number;\n  worstFitness: number;\n  diversity: number;\n  constraintViolations: number;\n  timestamp: Date;\n}\n\nexport interface PopulationSnapshot {\n  iteration: number;\n  population: OptimizationSolution[];\n  statistics: PopulationStatistics;\n}\n\nexport interface PopulationStatistics {\n  size: number;\n  feasibleSolutions: number;\n  averageFitness: number;\n  fitnessStandardDeviation: number;\n  diversityIndex: number;\n}\n\nexport interface ParameterHistory {\n  iteration: number;\n  parameters: { [parameterName: string]: any };\n  adaptiveChanges: string[];\n}\n\nexport interface ConvergenceMetrics {\n  iteration: number;\n  improvement: number;\n  stagnationCount: number;\n  convergenceIndicator: number;\n  estimatedRemainingIterations?: number;\n}\n\nexport interface ResultAnalysis {\n  sensitivityAnalysis?: SensitivityAnalysis;\n  uncertaintyAnalysis?: UncertaintyAnalysis;\n  tradeoffAnalysis?: TradeoffAnalysis;\n  robustnessAnalysis?: RobustnessAnalysis;\n}\n\nexport interface SensitivityAnalysis {\n  variableSensitivities: VariableSensitivity[];\n  parameterSensitivities: ParameterSensitivity[];\n  globalSensitivityIndices: { [variableId: string]: number };\n}\n\nexport interface VariableSensitivity {\n  variableId: string;\n  sensitivityIndex: number;\n  localSensitivity: number;\n  interactionEffects: InteractionEffect[];\n}\n\nexport interface InteractionEffect {\n  variableIds: string[];\n  interactionStrength: number;\n  description: string;\n}\n\nexport interface ParameterSensitivity {\n  parameterId: string;\n  sensitivityIndex: number;\n  recommendedRange: [number, number];\n}\n\nexport interface UncertaintyAnalysis {\n  inputUncertainties: InputUncertainty[];\n  outputUncertainties: OutputUncertainty[];\n  confidenceIntervals: ConfidenceInterval[];\n  robustnessMeasures: RobustnessMeasure[];\n}\n\nexport interface InputUncertainty {\n  variableId: string;\n  uncertaintyType: 'normal' | 'uniform' | 'triangular' | 'custom';\n  parameters: { [key: string]: number };\n  correlations?: { [variableId: string]: number };\n}\n\nexport interface OutputUncertainty {\n  objectiveId: string;\n  mean: number;\n  standardDeviation: number;\n  distribution: 'normal' | 'lognormal' | 'custom';\n  percentiles: { [percentile: string]: number };\n}\n\nexport interface ConfidenceInterval {\n  objectiveId: string;\n  confidenceLevel: number;\n  lowerBound: number;\n  upperBound: number;\n}\n\nexport interface RobustnessMeasure {\n  name: string;\n  value: number;\n  interpretation: string;\n}\n\nexport interface TradeoffAnalysis {\n  objectivePairs: ObjectivePair[];\n  paretoEfficiency: number;\n  kneePoints: OptimizationSolution[];\n  tradeoffRecommendations: TradeoffRecommendation[];\n}\n\nexport interface ObjectivePair {\n  objective1Id: string;\n  objective2Id: string;\n  correlationCoefficient: number;\n  tradeoffStrength: 'weak' | 'moderate' | 'strong';\n  conflictLevel: number;\n}\n\nexport interface TradeoffRecommendation {\n  description: string;\n  recommendedSolution: OptimizationSolution;\n  tradeoffJustification: string;\n  alternativeSolutions: OptimizationSolution[];\n}\n\nexport interface RobustnessAnalysis {\n  robustSolutions: OptimizationSolution[];\n  robustnessMetrics: RobustnessMetric[];\n  scenarioAnalysis: ScenarioAnalysis[];\n}\n\nexport interface RobustnessMetric {\n  name: string;\n  value: number;\n  threshold: number;\n  passed: boolean;\n}\n\nexport interface ScenarioAnalysis {\n  scenarioName: string;\n  scenarioParameters: { [key: string]: any };\n  solutionPerformance: SolutionPerformanceMetrics;\n  performanceDegradation: number;\n}\n\nexport interface OptimizationRecommendation {\n  type: 'improvement' | 'alternative' | 'caution' | 'validation';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  expectedBenefit: string;\n  implementationEffort: 'low' | 'medium' | 'high';\n  riskLevel: 'low' | 'medium' | 'high';\n  actionItems: string[];\n  relatedSolutions?: OptimizationSolution[];\n}\n\n// ============================================================================\n// Utility Types\n// ============================================================================\n\nexport type ObjectiveFunctionType = (variables: OptimizationVariable[]) => number;\nexport type ConstraintFunctionType = (variables: OptimizationVariable[]) => number;\nexport type FitnessFunction = (solution: OptimizationSolution) => number;\nexport type SelectionFunction = (population: OptimizationSolution[], count: number) => OptimizationSolution[];\nexport type CrossoverFunction = (parent1: OptimizationSolution, parent2: OptimizationSolution) => OptimizationSolution[];\nexport type MutationFunction = (solution: OptimizationSolution, rate: number) => OptimizationSolution;\n"],"mappings":";;AAAA;;;;;;;;;;;;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QA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","ignoreList":[]}