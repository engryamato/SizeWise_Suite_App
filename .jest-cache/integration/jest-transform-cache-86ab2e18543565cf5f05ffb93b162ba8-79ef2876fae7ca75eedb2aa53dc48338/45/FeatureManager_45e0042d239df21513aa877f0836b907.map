{"file":"/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/features/FeatureManager.ts","mappings":";AAAA;;;;;GAKG;;;AAUH,MAAa,cAAc;IACzB,YAA6B,SAA0B;QAA1B,cAAS,GAAT,SAAS,CAAiB;QAEvD,oDAAoD;QAC5C,YAAO,GAAkD;YAC/D,cAAc,EAAE,MAAM;YACtB,kBAAkB,EAAE,KAAK;YACzB,mBAAmB,EAAE,KAAK;YAC1B,mBAAmB,EAAE,KAAK;YAC1B,UAAU,EAAE,YAAY;YACxB,UAAU,EAAE,YAAY;SACzB,CAAC;IAVwD,CAAC;IAY3D,KAAK,CAAC,SAAS,CAAC,WAAmB,EAAE,MAAe;QAClD,iEAAiE;QACjE,sEAAsE;QACtE,MAAM,QAAQ,GAAkC,KAAK,CAAC;QACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC;QAErD,MAAM,IAAI,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAW,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEjD,OAAO;YACL,OAAO;YACP,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,OAAO;gBACb,CAAC,CAAC,YAAY,WAAW,iBAAiB,QAAQ,EAAE;gBACpD,CAAC,CAAC,YAAY,QAAQ,OAAO;SAChC,CAAC;IACJ,CAAC;IAED,8CAA8C;IAC9C,KAAK,CAAC,WAAW,CAAC,MAAe;QAC/B,iEAAiE;QACjE,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AApCD,wCAoCC;AAED,kBAAe,cAAc,CAAC","names":[],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/features/FeatureManager.ts"],"sourcesContent":["/**\n * Backend FeatureManager Adapter (Node/Electron)\n *\n * Minimal adapter compatible with Electron main process expectations and\n * TierEnforcer. This avoids importing browser-specific implementations.\n */\n\nimport type { DatabaseManager } from '../database/DatabaseManager';\n\nexport interface FeatureCheckResult {\n  enabled: boolean;\n  tier: 'free' | 'pro' | 'enterprise' | 'super_admin';\n  reason?: string;\n}\n\nexport class FeatureManager {\n  constructor(private readonly dbManager: DatabaseManager) {}\n\n  // Simple tier map for core features used by desktop\n  private tierMap: Record<string, 'free' | 'pro' | 'enterprise'> = {\n    air_duct_sizer: 'free',\n    unlimited_projects: 'pro',\n    high_res_pdf_export: 'pro',\n    enhanced_csv_export: 'pro',\n    cad_export: 'enterprise',\n    api_access: 'enterprise',\n  };\n\n  async isEnabled(featureName: string, userId?: string): Promise<FeatureCheckResult> {\n    // For now, infer user tier as 'pro' to allow desktop development\n    // In a full implementation, query user from DB via repository pattern\n    const userTier: 'free' | 'pro' | 'enterprise' = 'pro';\n    const required = this.tierMap[featureName] ?? 'free';\n\n    const rank = { free: 0, pro: 1, enterprise: 2 } as const;\n    const enabled = rank[userTier] >= rank[required];\n\n    return {\n      enabled,\n      tier: userTier,\n      reason: enabled\n        ? `Feature '${featureName}' enabled for ${userTier}`\n        : `Requires ${required} tier`,\n    };\n  }\n\n  // Added to align with usages from FileManager\n  async getUserTier(userId?: string): Promise<'free' | 'pro' | 'enterprise'> {\n    // TODO: Integrate with user repository; default to 'pro' for dev\n    return 'pro';\n  }\n}\n\nexport default FeatureManager;\n\n"],"version":3}