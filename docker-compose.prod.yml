version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sizewise-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sizewise-network
    restart: always

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: sizewise-redis-prod
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sizewise-network
    restart: always

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: prod
    container_name: sizewise-backend-prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=production
      - SENTRY_RELEASE=${SENTRY_RELEASE}
    volumes:
      - ./data:/app/data
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sizewise-network
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Authentication Server
  auth-server:
    build:
      context: .
      dockerfile: docker/auth-server/Dockerfile
      target: prod
    container_name: sizewise-auth-prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_AUTH_DB}
      - SECRET_KEY=${AUTH_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=production
      - SENTRY_RELEASE=${SENTRY_RELEASE}
    volumes:
      - auth_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sizewise-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: runner
    container_name: sizewise-frontend-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_AUTH_URL=${NEXT_PUBLIC_AUTH_URL}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=production
      - SENTRY_RELEASE=${SENTRY_RELEASE}
    depends_on:
      - backend
      - auth-server
    networks:
      - sizewise-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: sizewise-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - auth-server
    networks:
      - sizewise-network
    restart: always

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  auth_logs:
  nginx_logs:

networks:
  sizewise-network:
    driver: bridge
