name: Comprehensive Testing Pipeline

on:
  push:
    branches: [main, develop, security-patches-phase1]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: "Run performance tests"
        required: false
        default: "true"
        type: boolean
      run_security_tests:
        description: "Run security tests"
        required: false
        default: "true"
        type: boolean

env:
  # Standardized environment variables across all workflows
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  NODE_ENV: test
  POSTGRES_VERSION: "15"
  MONGODB_VERSION: "7.0"
  REDIS_VERSION: "7.0"

jobs:
  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend unit tests
        run: |
          cd frontend
          npm run test:unit -- --coverage --watchAll=false

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sizewise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist pytest-html pytest-timeout

      - name: Run backend unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sizewise_test
          MONGODB_URL: mongodb://localhost:27017/sizewise_test
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/backend/ -v --cov=./ --cov-report=xml --cov-report=html

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/coverage/
            backend/test-results/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-unit-tests, backend-unit-tests]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sizewise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt

      - name: Start backend server
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sizewise_test
          MONGODB_URL: mongodb://localhost:27017/sizewise_test
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
        run: |
          cd backend
          python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run HVAC component integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sizewise_test
          MONGODB_URL: mongodb://localhost:27017/sizewise_test
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
          API_BASE_URL: http://localhost:8000/api
        run: |
          # Run new comprehensive integration tests
          npm run test:integration:coverage

          # Run backend integration tests
          cd backend
          pytest tests/integration/ -v --cov=./ --cov-report=xml --cov-report=html

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/integration/lcov.info,./backend/coverage.xml
          flags: integration
          name: integration-coverage

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/integration/
            backend/coverage/
            tests/integration/test-results/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sizewise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && pip install -r requirements.txt
          npx playwright install --with-deps

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start application
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sizewise_test
          MONGODB_URL: mongodb://localhost:27017/sizewise_test
          REDIS_URL: redis://localhost:6379/1
          ENVIRONMENT: test
        run: |
          cd backend
          python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
          cd ../frontend
          npm run start &
          sleep 30

      - name: Run E2E tests
        run: |
          cd tests
          npx playwright test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/playwright-report/
            tests/test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event.inputs.run_performance_tests != 'false'

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sizewise_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npx playwright install --with-deps

      - name: Start application
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sizewise_test
          MONGODB_URL: mongodb://localhost:27017/sizewise_test
          ENVIRONMENT: test
        run: |
          cd backend
          python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
          cd ../frontend
          npm run build
          npm run start &
          sleep 30

      - name: Run performance tests
        run: |
          cd tests
          npx playwright test --grep "performance"

      - name: Run Phase 4 performance validation
        run: |
          cd frontend/scripts
          node validate-advanced-state-management.js || echo "Advanced state management validation completed"
          node validate-caching-implementation.js || echo "Caching validation completed"
          node validate-microservices-infrastructure.js || echo "Microservices validation completed"
          node validate-wasm-performance.js || echo "WASM validation completed"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            tests/test-results/
            frontend/scripts/performance-reports/
          retention-days: 30

  # Phase 4 Enterprise Security Validation
  phase4-security-validation:
    name: Phase 4 Enterprise Security Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/security-patches-phase1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Validate Phase 4 Components
        run: |
          python validate_phase4.py

      - name: Test Security Framework
        run: |
          python -c "
          from backend.security.advanced_security_framework import AdvancedSecurityFramework
          framework = AdvancedSecurityFramework()
          print('✅ Security Framework validated')
          "

      - name: Test Compliance System
        run: |
          python -c "
          from backend.compliance.compliance_management_system import ComplianceManagementSystem
          system = ComplianceManagementSystem()
          print('✅ Compliance System validated')
          "

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.run_security_tests != 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit semgrep

      - name: Run Snyk security scan
        uses: snyk/actions/node@0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Run Python safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        frontend-unit-tests,
        backend-unit-tests,
        integration-tests,
        e2e-tests,
        performance-tests,
        phase4-security-validation,
        security-tests,
      ]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# 🧪 Comprehensive Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Unit Tests**: ${{ needs.frontend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Unit Tests**: ${{ needs.backend-unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Phase 4 Security Validation**: ${{ needs.phase4-security-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Tests**: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Calculate overall status
          if [[ "${{ needs.frontend-unit-tests.result }}" == "success" && \
                "${{ needs.backend-unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "## ✅ Overall Status: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "All critical tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Overall Status: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Some critical tests failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check critical test results
        if: needs.frontend-unit-tests.result != 'success' || needs.backend-unit-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.e2e-tests.result != 'success'
        run: |
          echo "❌ Critical tests failed!"
          echo "Frontend Unit Tests: ${{ needs.frontend-unit-tests.result }}"
          echo "Backend Unit Tests: ${{ needs.backend-unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          exit 1

      - name: Check Phase 4 validation
        if: needs.phase4-security-validation.result == 'failure'
        run: |
          echo "⚠️ Phase 4 Enterprise Security validation failed!"
          echo "This may indicate issues with the new security features."
          # Don't fail the entire pipeline for Phase 4 validation issues
          exit 0
