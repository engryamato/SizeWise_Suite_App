{"file":"/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/enforcement/TierEnforcer.ts","mappings":"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","names":[],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/enforcement/TierEnforcer.ts"],"sourcesContent":["/**\n * TierEnforcer - Business Logic Tier Enforcement Engine\n *\n * MISSION-CRITICAL: Service layer for tier-based business logic enforcement\n * Complements UI tier enforcement with server-side validation and limits\n *\n * @see docs/implementation/tier-system/tier-boundaries-specification.md\n * @see docs/developer-guide/tier-implementation-checklist.md section 2.5\n */\n\nimport { FeatureManager } from '../../features/FeatureManager';\nimport { DatabaseManager } from '../../database/DatabaseManager';\nimport AirDuctCalculator, { DuctSizingInputs, DuctSizingResults } from '../calculations/AirDuctCalculator';\nimport SMACNAValidator, { CalculationData, ValidationResult } from '../calculations/SMACNAValidator';\n\n/**\n * User tier type\n */\nexport type UserTier = 'free' | 'pro' | 'enterprise';\n\n/**\n * Project data structure\n */\nexport interface ProjectData {\n  id: string;\n  name: string;\n  userId: string;\n  segments: any[];\n  rooms: any[];\n  equipment: any[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n/**\n * Export format configuration\n */\nexport interface ExportFormat {\n  id: string;\n  name: string;\n  description: string;\n  requiredTier: UserTier;\n  featureName: string;\n  maxResolution?: number;\n  maxFileSize?: number; // MB\n  watermarked?: boolean;\n}\n\n/**\n * Calculation complexity assessment\n */\nexport interface CalculationComplexity {\n  level: 'basic' | 'intermediate' | 'advanced' | 'expert';\n  score: number; // 0-100\n  factors: {\n    segmentCount: number;\n    roomCount: number;\n    equipmentCount: number;\n    customMaterials: number;\n    advancedFeatures: number;\n  };\n  requiredTier: UserTier;\n}\n\n/**\n * Enforcement result\n */\nexport interface EnforcementResult {\n  allowed: boolean;\n  reason?: string;\n  currentTier: UserTier;\n  requiredTier?: UserTier;\n  upgradeMessage?: string;\n  limitations?: string[];\n  recommendations?: string[];\n}\n\n/**\n * Project limits by tier\n */\ninterface TierLimits {\n  maxProjects: number;\n  maxSegmentsPerProject: number;\n  maxRoomsPerProject: number;\n  maxEquipmentPerProject: number;\n  maxCalculationComplexity: 'basic' | 'intermediate' | 'advanced' | 'expert';\n  allowedExportFormats: string[];\n  maxExportResolution: number;\n  watermarkedExports: boolean;\n  advancedFeatures: string[];\n}\n\n/**\n * TierEnforcer - Business logic enforcement for tier boundaries\n * CRITICAL: Provides server-side validation to prevent tier circumvention\n */\nexport class TierEnforcer {\n  private featureManager: FeatureManager;\n  private dbManager: DatabaseManager;\n\n  // Tier limits configuration\n  private static readonly TIER_LIMITS: Record<UserTier, TierLimits> = {\n    free: {\n      maxProjects: 3,\n      maxSegmentsPerProject: 10,\n      maxRoomsPerProject: 5,\n      maxEquipmentPerProject: 3,\n      maxCalculationComplexity: 'basic',\n      allowedExportFormats: ['pdf', 'json'],\n      maxExportResolution: 1080,\n      watermarkedExports: true,\n      advancedFeatures: []\n    },\n    pro: {\n      maxProjects: -1, // Unlimited\n      maxSegmentsPerProject: 100,\n      maxRoomsPerProject: 50,\n      maxEquipmentPerProject: 25,\n      maxCalculationComplexity: 'advanced',\n      allowedExportFormats: ['pdf', 'json', 'png', 'excel'],\n      maxExportResolution: 4320, // 4K\n      watermarkedExports: false,\n      advancedFeatures: ['unlimited_segments', 'equipment_selection', 'high_res_pdf_export', 'enhanced_csv_export']\n    },\n    enterprise: {\n      maxProjects: -1, // Unlimited\n      maxSegmentsPerProject: -1, // Unlimited\n      maxRoomsPerProject: -1, // Unlimited\n      maxEquipmentPerProject: -1, // Unlimited\n      maxCalculationComplexity: 'expert',\n      allowedExportFormats: ['pdf', 'json', 'png', 'excel', 'dwg', 'ifc'],\n      maxExportResolution: 8640, // 8K\n      watermarkedExports: false,\n      advancedFeatures: ['unlimited_segments', 'equipment_selection', 'high_res_pdf_export', 'enhanced_csv_export', 'cad_export', 'api_access', 'bulk_operations']\n    }\n  };\n\n  // Export format definitions\n  private static readonly EXPORT_FORMATS: Record<string, ExportFormat> = {\n    pdf: {\n      id: 'pdf',\n      name: 'PDF Report',\n      description: 'Complete project report with BOM and schedules',\n      requiredTier: 'free',\n      featureName: 'air_duct_sizer'\n    },\n    json: {\n      id: 'json',\n      name: 'JSON Data',\n      description: 'Project data for backup or sharing',\n      requiredTier: 'free',\n      featureName: 'air_duct_sizer'\n    },\n    png: {\n      id: 'png',\n      name: 'PNG Image',\n      description: 'High-resolution drawing export',\n      requiredTier: 'pro',\n      featureName: 'high_res_pdf_export',\n      maxResolution: 4320\n    },\n    excel: {\n      id: 'excel',\n      name: 'Excel Spreadsheet',\n      description: 'BOM and schedules in spreadsheet format',\n      requiredTier: 'pro',\n      featureName: 'enhanced_csv_export'\n    },\n    dwg: {\n      id: 'dwg',\n      name: 'AutoCAD Drawing',\n      description: 'CAD-compatible drawing file',\n      requiredTier: 'enterprise',\n      featureName: 'cad_export'\n    },\n    ifc: {\n      id: 'ifc',\n      name: 'IFC Model',\n      description: 'Building Information Model format',\n      requiredTier: 'enterprise',\n      featureName: 'cad_export'\n    }\n  };\n\n  constructor(featureManager: FeatureManager, dbManager: DatabaseManager) {\n    this.featureManager = featureManager;\n    this.dbManager = dbManager;\n  }\n\n  /**\n   * Validate project creation limits\n   */\n  public async validateProjectCreation(userId: string): Promise<EnforcementResult> {\n    try {\n      // Get user tier\n      const userTier = await this.getUserTier(userId);\n      const limits = TierEnforcer.TIER_LIMITS[userTier];\n\n      // Check if unlimited projects allowed\n      if (limits.maxProjects === -1) {\n        return {\n          allowed: true,\n          currentTier: userTier\n        };\n      }\n\n      // Count existing projects\n      const projectCount = await this.getUserProjectCount(userId);\n\n      if (projectCount >= limits.maxProjects) {\n        return {\n          allowed: false,\n          reason: `Project limit reached (${projectCount}/${limits.maxProjects})`,\n          currentTier: userTier,\n          requiredTier: 'pro',\n          upgradeMessage: `Upgrade to Pro for unlimited projects`,\n          limitations: [`Free tier limited to ${limits.maxProjects} projects`]\n        };\n      }\n\n      return {\n        allowed: true,\n        currentTier: userTier,\n        limitations: [`${projectCount + 1}/${limits.maxProjects} projects used`]\n      };\n\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: `Validation error: ${error.message}`,\n        currentTier: 'free'\n      };\n    }\n  }\n\n  /**\n   * Validate project content limits (segments, rooms, equipment)\n   */\n  public async validateProjectContent(userId: string, projectData: Partial<ProjectData>): Promise<EnforcementResult> {\n    try {\n      const userTier = await this.getUserTier(userId);\n      const limits = TierEnforcer.TIER_LIMITS[userTier];\n\n      const violations: string[] = [];\n      const limitations: string[] = [];\n\n      // Check segment count\n      const segmentCount = projectData.segments?.length || 0;\n      if (limits.maxSegmentsPerProject !== -1 && segmentCount > limits.maxSegmentsPerProject) {\n        violations.push(`Too many segments (${segmentCount}/${limits.maxSegmentsPerProject})`);\n      } else if (limits.maxSegmentsPerProject !== -1) {\n        limitations.push(`${segmentCount}/${limits.maxSegmentsPerProject} segments used`);\n      }\n\n      // Check room count\n      const roomCount = projectData.rooms?.length || 0;\n      if (limits.maxRoomsPerProject !== -1 && roomCount > limits.maxRoomsPerProject) {\n        violations.push(`Too many rooms (${roomCount}/${limits.maxRoomsPerProject})`);\n      } else if (limits.maxRoomsPerProject !== -1) {\n        limitations.push(`${roomCount}/${limits.maxRoomsPerProject} rooms used`);\n      }\n\n      // Check equipment count\n      const equipmentCount = projectData.equipment?.length || 0;\n      if (limits.maxEquipmentPerProject !== -1 && equipmentCount > limits.maxEquipmentPerProject) {\n        violations.push(`Too many equipment items (${equipmentCount}/${limits.maxEquipmentPerProject})`);\n      } else if (limits.maxEquipmentPerProject !== -1) {\n        limitations.push(`${equipmentCount}/${limits.maxEquipmentPerProject} equipment items used`);\n      }\n\n      if (violations.length > 0) {\n        return {\n          allowed: false,\n          reason: violations.join(', '),\n          currentTier: userTier,\n          requiredTier: userTier === 'free' ? 'pro' : 'enterprise',\n          upgradeMessage: `Upgrade to ${userTier === 'free' ? 'Pro' : 'Enterprise'} for higher limits`,\n          limitations: violations\n        };\n      }\n\n      return {\n        allowed: true,\n        currentTier: userTier,\n        limitations\n      };\n\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: `Validation error: ${error.message}`,\n        currentTier: 'free'\n      };\n    }\n  }\n\n  /**\n   * Validate export access and format\n   */\n  public async validateExportAccess(userId: string, formatId: string, resolution?: number): Promise<EnforcementResult> {\n    try {\n      const userTier = await this.getUserTier(userId);\n      const limits = TierEnforcer.TIER_LIMITS[userTier];\n      const format = TierEnforcer.EXPORT_FORMATS[formatId];\n\n      if (!format) {\n        return {\n          allowed: false,\n          reason: `Unknown export format: ${formatId}`,\n          currentTier: userTier\n        };\n      }\n\n      // Check if format is allowed for user tier\n      if (!limits.allowedExportFormats.includes(formatId)) {\n        return {\n          allowed: false,\n          reason: `Export format '${format.name}' requires ${format.requiredTier} tier`,\n          currentTier: userTier,\n          requiredTier: format.requiredTier,\n          upgradeMessage: `Upgrade to ${format.requiredTier} for ${format.name} export`,\n          limitations: [`Available formats: ${limits.allowedExportFormats.join(', ')}`]\n        };\n      }\n\n      // Check resolution limits\n      if (resolution && resolution > limits.maxExportResolution) {\n        // Determine required tier based on resolution\n        let requiredTier: UserTier = 'free';\n        if (resolution > 4320) {\n          requiredTier = 'enterprise';\n        } else if (resolution > 1080) {\n          requiredTier = 'pro';\n        }\n\n        return {\n          allowed: false,\n          reason: `Resolution ${resolution}p exceeds tier limit of ${limits.maxExportResolution}p`,\n          currentTier: userTier,\n          requiredTier,\n          upgradeMessage: `Upgrade for higher resolution exports`,\n          limitations: [`Maximum resolution: ${limits.maxExportResolution}p`]\n        };\n      }\n\n      // Check feature flag\n      const featureEnabled = await this.featureManager.isEnabled(format.featureName, userId);\n      if (!featureEnabled.enabled) {\n        return {\n          allowed: false,\n          reason: `Feature '${format.featureName}' not enabled for user`,\n          currentTier: userTier,\n          requiredTier: format.requiredTier\n        };\n      }\n\n      return {\n        allowed: true,\n        currentTier: userTier,\n        limitations: limits.watermarkedExports ? ['Exports will include watermark'] : []\n      };\n\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: `Validation error: ${error.message}`,\n        currentTier: 'free'\n      };\n    }\n  }\n\n  /**\n   * Assess calculation complexity and validate tier access\n   */\n  public async validateCalculationAccess(userId: string, inputs: DuctSizingInputs, projectData?: Partial<ProjectData>): Promise<EnforcementResult> {\n    try {\n      const userTier = await this.getUserTier(userId);\n      const limits = TierEnforcer.TIER_LIMITS[userTier];\n\n      // Assess calculation complexity\n      const complexity = this.assessCalculationComplexity(inputs, projectData);\n\n      // Check if user tier supports this complexity level\n      const complexityLevels = ['basic', 'intermediate', 'advanced', 'expert'];\n      const userMaxLevel = complexityLevels.indexOf(limits.maxCalculationComplexity);\n      const requiredLevel = complexityLevels.indexOf(complexity.level);\n\n      if (requiredLevel > userMaxLevel) {\n        return {\n          allowed: false,\n          reason: `Calculation complexity '${complexity.level}' requires ${complexity.requiredTier} tier`,\n          currentTier: userTier,\n          requiredTier: complexity.requiredTier,\n          upgradeMessage: `Upgrade to ${complexity.requiredTier} for advanced calculations`,\n          limitations: [`Current tier supports: ${limits.maxCalculationComplexity} calculations`]\n        };\n      }\n\n      return {\n        allowed: true,\n        currentTier: userTier,\n        limitations: [`Calculation complexity: ${complexity.level} (score: ${complexity.score})`]\n      };\n\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: `Validation error: ${error.message}`,\n        currentTier: 'free'\n      };\n    }\n  }\n\n  /**\n   * Validate feature access\n   */\n  public async validateFeatureAccess(userId: string, featureName: string): Promise<EnforcementResult> {\n    try {\n      const userTier = await this.getUserTier(userId);\n      const limits = TierEnforcer.TIER_LIMITS[userTier];\n\n      // Check feature flag\n      const featureResult = await this.featureManager.isEnabled(featureName, userId);\n\n      if (!featureResult.enabled) {\n        // Determine required tier for this feature\n        let requiredTier: UserTier = 'pro';\n        for (const [tier, tierLimits] of Object.entries(TierEnforcer.TIER_LIMITS)) {\n          if (tierLimits.advancedFeatures.includes(featureName)) {\n            requiredTier = tier as UserTier;\n            break;\n          }\n        }\n\n        return {\n          allowed: false,\n          reason: featureResult.reason || `Feature '${featureName}' not available`,\n          currentTier: userTier,\n          requiredTier,\n          upgradeMessage: `Upgrade to ${requiredTier} for ${featureName}`,\n          limitations: [`Available features: ${limits.advancedFeatures.join(', ') || 'Basic features only'}`]\n        };\n      }\n\n      return {\n        allowed: true,\n        currentTier: userTier\n      };\n\n    } catch (error) {\n      return {\n        allowed: false,\n        reason: `Validation error: ${error.message}`,\n        currentTier: 'free'\n      };\n    }\n  }\n\n\n  /**\n   * Validate generic file access based on tier (read/write)\n   * Non-destructive additive method to align with Electron FileManager usage\n   */\n  public async validateFileAccess(userId: string, mode: 'read' | 'write'): Promise<EnforcementResult> {\n    try {\n      const userTier = await this.getUserTier(userId);\n      // For now, allow both read and write for free tier, align with feature flags later\n      return { allowed: true, currentTier: userTier };\n    } catch (error) {\n      return { allowed: false, currentTier: 'free', reason: `Validation error: ${error.message}` };\n    }\n  }\n\n  /**\n   * Validate import access based on file extension and size\n   * Aligns with FileManager.importProject usage; uses export limits heuristically\n   */\n  public async validateImportAccess(userId: string, extension: string, sizeBytes?: number): Promise<EnforcementResult> {\n    try {\n      const userTier = await this.getUserTier(userId);\n      const limits = TierEnforcer.TIER_LIMITS[userTier];\n      // Basic size gating similar to FileManager\n      const sizeLimit = userTier === 'free' ? 10 * 1024 * 1024 : userTier === 'pro' ? 100 * 1024 * 1024 : 1024 * 1024 * 1024;\n      if (sizeBytes && sizeBytes > sizeLimit) {\n        return {\n          allowed: false,\n          currentTier: userTier,\n          reason: `Import size exceeds tier limit`,\n          requiredTier: sizeBytes > 100 * 1024 * 1024 ? 'enterprise' : 'pro'\n        };\n      }\n      return { allowed: true, currentTier: userTier };\n    } catch (error) {\n      return { allowed: false, currentTier: 'free', reason: `Validation error: ${error.message}` };\n    }\n  }\n\n  /**\n   * Perform calculation with tier enforcement\n   */\n  public async performCalculation(userId: string, inputs: DuctSizingInputs, projectData?: Partial<ProjectData>): Promise<{\n    result?: DuctSizingResults;\n    validation?: ValidationResult;\n    enforcement: EnforcementResult;\n  }> {\n    // Validate calculation access\n    const enforcement = await this.validateCalculationAccess(userId, inputs, projectData);\n\n    if (!enforcement.allowed) {\n      return { enforcement };\n    }\n\n    try {\n      // Perform calculation using extracted core logic\n      const result = AirDuctCalculator.calculateDuctSizing(inputs);\n\n      // Validate against standards\n      const calculationData: CalculationData = {\n        velocity: result.velocity,\n        frictionRate: inputs.frictionRate,\n        ductType: inputs.ductType,\n        airflow: inputs.airflow,\n        diameter: result.diameter,\n        width: result.width,\n        height: result.height,\n        aspectRatio: result.aspectRatio,\n        area: result.area,\n        material: inputs.material\n      };\n\n      const validation = SMACNAValidator.validateSMACNACompliance(calculationData);\n\n      return {\n        result,\n        validation,\n        enforcement\n      };\n\n    } catch (error) {\n      return {\n        enforcement: {\n          allowed: false,\n          reason: `Calculation error: ${error.message}`,\n          currentTier: enforcement.currentTier\n        }\n      };\n    }\n  }\n\n  /**\n   * Assess calculation complexity based on inputs and project data\n   */\n  private assessCalculationComplexity(inputs: DuctSizingInputs, projectData?: Partial<ProjectData>): CalculationComplexity {\n    let score = 0;\n    const factors = {\n      segmentCount: projectData?.segments?.length || 1,\n      roomCount: projectData?.rooms?.length || 1,\n      equipmentCount: projectData?.equipment?.length || 1,\n      customMaterials: inputs.material && inputs.material !== 'galvanized_steel' ? 1 : 0,\n      advancedFeatures: 0\n    };\n\n    // Score based on project size\n    score += Math.min(factors.segmentCount * 2, 20);\n    score += Math.min(factors.roomCount * 3, 15);\n    score += Math.min(factors.equipmentCount * 4, 20);\n\n    // Score based on calculation parameters\n    if (inputs.frictionRate > 0.12) score += 10; // High friction rate\n    if (inputs.targetVelocity && inputs.targetVelocity > 2000) score += 10; // High velocity\n    if (inputs.ductType === 'rectangular') score += 5; // More complex than round\n\n    // Score based on custom materials\n    score += factors.customMaterials * 10;\n\n    // Determine complexity level and required tier\n    let level: CalculationComplexity['level'];\n    let requiredTier: UserTier;\n\n    if (score <= 25) {\n      level = 'basic';\n      requiredTier = 'free';\n    } else if (score <= 50) {\n      level = 'intermediate';\n      requiredTier = 'pro';\n    } else if (score <= 75) {\n      level = 'advanced';\n      requiredTier = 'pro';\n    } else {\n      level = 'expert';\n      requiredTier = 'enterprise';\n    }\n\n    return {\n      level,\n      score: Math.min(score, 100),\n      factors,\n      requiredTier\n    };\n  }\n\n  /**\n   * Get user tier from feature manager\n   */\n  private async getUserTier(userId: string): Promise<UserTier> {\n    try {\n      // Get user from database through feature manager\n      const userRepo = this.featureManager['userRepository'];\n      const user = await userRepo.getUser(userId);\n      return user?.tier || 'free';\n    } catch (error) {\n      console.error('Error getting user tier:', error);\n      return 'free'; // Default to free tier on error\n    }\n  }\n\n  /**\n   * Get user project count\n   * TODO: Implement actual project count query when project repository is available\n   */\n  private async getUserProjectCount(userId: string): Promise<number> {\n    // This would typically query the projects table through a repository\n    // For now, return 0 as placeholder until project repository is implemented\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Get tier limits for a specific tier\n   */\n  public static getTierLimits(tier: UserTier): TierLimits {\n    return { ...TierEnforcer.TIER_LIMITS[tier] };\n  }\n\n  /**\n   * Get all export formats\n   */\n  public static getExportFormats(): Record<string, ExportFormat> {\n    return { ...TierEnforcer.EXPORT_FORMATS };\n  }\n\n  /**\n   * Get export formats available for a tier\n   */\n  public static getAvailableExportFormats(tier: UserTier): ExportFormat[] {\n    const limits = TierEnforcer.TIER_LIMITS[tier];\n    return limits.allowedExportFormats.map(id => TierEnforcer.EXPORT_FORMATS[id]).filter(Boolean);\n  }\n}\n\nexport default TierEnforcer;\n"],"version":3}