name: Deployment Readiness Check

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  pre-deployment-checks:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-release: ${{ steps.version.outputs.is-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version info
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-release=true" >> $GITHUB_OUTPUT
          else
            VERSION=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-release=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate project structure
        run: |
          echo "Checking project structure..."
          test -f frontend/package.json || (echo "Frontend package.json missing" && exit 1)
          test -f requirements.txt || (echo "Root requirements.txt missing" && exit 1)
          test -f backend/requirements.txt || (echo "Backend requirements.txt missing" && exit 1)
          test -f auth-server/requirements.txt || (echo "Auth-server requirements.txt missing" && exit 1)
          echo "Project structure validation passed"

  frontend-production-build:
    name: Frontend Production Build
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --production=false

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Build for production
        working-directory: ./frontend
        env:
          NODE_ENV: production
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: npm run build

      - name: Analyze bundle size
        working-directory: ./frontend
        run: |
          npx next-bundle-analyzer || echo "Bundle analysis completed"

      - name: Upload production build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-production-build
          path: |
            frontend/.next/
            frontend/out/
          retention-days: 30

  backend-production-test:
    name: Backend Production Test
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install production dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r backend/requirements.txt
          pip install -r auth-server/requirements.txt

      - name: Run backend tests
        run: |
          python -m pytest -v --tb=short

      - name: Test backend startup
        run: |
          python run_backend.py &
          sleep 10
          # Wait for backend to be ready
          for i in {1..15}; do
            if curl -f http://localhost:5000/api/health; then
              echo "Backend health check passed"
              break
            fi
            echo "Waiting for backend... ($i/15)"
            sleep 2
          done

  integration-production-test:
    name: Production Integration Test
    runs-on: ubuntu-latest
    needs: [frontend-production-build, backend-production-test]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-production-build
          path: frontend/

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium

      - name: Start production servers
        run: |
          python run_backend.py &
          cd frontend && npm start &
          sleep 20

      - name: Run production E2E tests
        working-directory: ./frontend
        env:
          NODE_ENV: production
        run: npx playwright test --project=chromium

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-e2e-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

  deployment-ready:
    name: Mark Deployment Ready
    runs-on: ubuntu-latest
    needs:
      [
        pre-deployment-checks,
        frontend-production-build,
        backend-production-test,
        integration-production-test,
      ]
    if: success()
    steps:
      - name: Deployment ready notification
        run: |
          echo "ðŸš€ SizeWise Suite is ready for deployment!"
          echo "Version: ${{ needs.pre-deployment-checks.outputs.version }}"
          echo "Is Release: ${{ needs.pre-deployment-checks.outputs.is-release }}"
          echo "All checks passed successfully."

      - name: Create deployment summary
        run: |
          echo "## ðŸŽ‰ Deployment Ready Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-deployment-checks.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ needs.pre-deployment-checks.outputs.is-release }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Completed Checks:" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend production build" >> $GITHUB_STEP_SUMMARY
          echo "- Backend production tests" >> $GITHUB_STEP_SUMMARY
          echo "- Integration tests" >> $GITHUB_STEP_SUMMARY
          echo "- Security scans" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status: READY FOR DEPLOYMENT** ðŸš€" >> $GITHUB_STEP_SUMMARY
