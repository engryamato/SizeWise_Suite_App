{"version":3,"names":["cov_pcgusyuqb","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","FittingCategory","exports","FittingComplexity","PerformanceClass","AdvancedFittingTypes","FlowPattern","CalculationMethod"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/types/AdvancedFittingTypes.ts"],"sourcesContent":["/**\n * Advanced Fitting Types for Phase 3 Duct Physics Implementation\n * \n * This module defines comprehensive TypeScript interfaces for advanced HVAC fitting\n * configurations, supporting complex multi-parameter calculations, performance curves,\n * and interaction effects.\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\nimport { FittingConfiguration, FittingLossResult } from '../FittingLossCalculator';\n\n// ============================================================================\n// Core Advanced Fitting Configuration\n// ============================================================================\n\nexport interface AdvancedFittingConfiguration extends FittingConfiguration {\n  // Core identification\n  id: string;\n  version: string;\n  category: FittingCategory;\n  complexity: FittingComplexity;\n  \n  // Performance characteristics\n  performanceClass: PerformanceClass;\n  flowCharacteristics: FlowCharacteristics;\n  pressureLossProfile: PressureLossProfile;\n  \n  // Physical properties\n  physicalProperties: FittingPhysicalProperties;\n  installationRequirements: InstallationRequirements;\n  \n  // Validation and constraints\n  validationRules: ValidationRule[];\n  compatibilityMatrix: CompatibilityMatrix;\n  \n  // Metadata\n  manufacturer?: string;\n  model?: string;\n  certifications: string[];\n  lastUpdated: Date;\n}\n\n// ============================================================================\n// Enumerations\n// ============================================================================\n\nexport enum FittingCategory {\n  TRANSITION = 'transition',\n  TERMINAL = 'terminal',\n  JUNCTION = 'junction',\n  CONTROL = 'control',\n  SPECIALTY = 'specialty'\n}\n\nexport enum FittingComplexity {\n  SIMPLE = 'simple',           // Single K-factor\n  COMPLEX = 'complex',         // Multiple parameters\n  VARIABLE = 'variable',       // Flow-dependent\n  CUSTOM = 'custom'            // User-defined\n}\n\nexport enum PerformanceClass {\n  STANDARD = 'standard',       // Standard commercial\n  HIGH_VELOCITY = 'high_velocity', // >2500 FPM\n  LOW_PRESSURE = 'low_pressure',   // <2\" w.g.\n  INDUSTRIAL = 'industrial',   // Heavy-duty applications\n  PRECISION = 'precision'      // Laboratory/cleanroom\n}\n\nexport enum AdvancedFittingTypes {\n  // Transitions\n  TRANSITION_RECT_TO_ROUND = 'transition_rect_to_round',\n  TRANSITION_ROUND_TO_RECT = 'transition_round_to_rect',\n  TRANSITION_GRADUAL = 'transition_gradual',\n  TRANSITION_ABRUPT = 'transition_abrupt',\n  \n  // Terminals\n  VAV_BOX = 'vav_box',\n  CAV_BOX = 'cav_box',\n  DIFFUSER_LINEAR = 'diffuser_linear',\n  DIFFUSER_CEILING = 'diffuser_ceiling',\n  GRILLE_RETURN = 'grille_return',\n  GRILLE_SUPPLY = 'grille_supply',\n  \n  // Controls\n  FIRE_DAMPER = 'fire_damper',\n  SMOKE_DAMPER = 'smoke_damper',\n  VOLUME_DAMPER = 'volume_damper',\n  BACKDRAFT_DAMPER = 'backdraft_damper',\n  \n  // Specialty\n  EXHAUST_HOOD = 'exhaust_hood',\n  SOUND_ATTENUATOR = 'sound_attenuator',\n  HEAT_EXCHANGER = 'heat_exchanger',\n  FILTER_SECTION = 'filter_section'\n}\n\nexport enum FlowPattern {\n  STRAIGHT_THROUGH = 'straight_through',\n  BRANCH_90 = 'branch_90',\n  BRANCH_45 = 'branch_45',\n  CONVERGING = 'converging',\n  DIVERGING = 'diverging',\n  SWIRL = 'swirl'\n}\n\nexport enum CalculationMethod {\n  SINGLE_K_FACTOR = 'single_k_factor',\n  MULTI_PARAMETER = 'multi_parameter',\n  PERFORMANCE_CURVE = 'performance_curve',\n  CFD_DERIVED = 'cfd_derived',\n  EMPIRICAL = 'empirical'\n}\n\n// ============================================================================\n// Flow Characteristics\n// ============================================================================\n\nexport interface FlowCharacteristics {\n  nominalFlow: FlowRange;\n  operatingRange: FlowRange;\n  turndownRatio: number;\n  flowPattern: FlowPattern;\n  velocityProfile: VelocityProfile;\n  turbulenceFactors: TurbulenceFactors;\n}\n\nexport interface FlowRange {\n  minimum: number;    // CFM\n  maximum: number;    // CFM\n  optimal: number;    // CFM\n  units: 'cfm' | 'l/s' | 'm3/h';\n}\n\nexport interface VelocityProfile {\n  uniformityIndex: number;     // 0-1, where 1 is perfectly uniform\n  peakVelocityRatio: number;   // Peak velocity / Average velocity\n  boundaryLayerThickness: number; // inches\n  flowSeparationRisk: 'low' | 'medium' | 'high';\n}\n\nexport interface TurbulenceFactors {\n  turbulenceIntensity: number; // %\n  mixingFactor: number;        // 0-1\n  pressureRecoveryFactor: number; // 0-1\n  downstreamDevelopmentLength: number; // diameters\n}\n\n// ============================================================================\n// Pressure Loss Profile\n// ============================================================================\n\nexport interface PressureLossProfile {\n  calculationMethod: CalculationMethod;\n  kFactorData: KFactorData;\n  performanceCurves?: PerformanceCurve[];\n  correctionFactors: CorrectionFactors;\n  uncertaintyBounds: UncertaintyBounds;\n}\n\nexport interface KFactorData {\n  baseKFactor: number;\n  parameterDependencies: ParameterDependency[];\n  reynoldsCorrection?: ReynoldsCorrection;\n  geometryCorrections: GeometryCorrection[];\n}\n\nexport interface ParameterDependency {\n  parameter: string;\n  relationship: 'linear' | 'polynomial' | 'exponential' | 'lookup';\n  coefficients: number[];\n  validRange: [number, number];\n  description: string;\n}\n\nexport interface ReynoldsCorrection {\n  enabled: boolean;\n  method: 'colebrook' | 'blasius' | 'custom';\n  coefficients: number[];\n  validRange: [number, number];\n}\n\nexport interface GeometryCorrection {\n  parameter: string;\n  correctionFactor: number;\n  applicableRange: [number, number];\n  description: string;\n}\n\nexport interface PerformanceCurve {\n  parameter: string;\n  units: string;\n  dataPoints: DataPoint[];\n  interpolationMethod: 'linear' | 'cubic' | 'spline';\n  extrapolationAllowed: boolean;\n}\n\nexport interface DataPoint {\n  x: number;\n  y: number;\n  uncertainty?: number;\n}\n\nexport interface CorrectionFactors {\n  temperatureCorrection: boolean;\n  densityCorrection: boolean;\n  viscosityCorrection: boolean;\n  roughnessCorrection: boolean;\n  installationCorrection: boolean;\n}\n\nexport interface UncertaintyBounds {\n  lowerBound: number;  // % below nominal\n  upperBound: number;  // % above nominal\n  confidenceLevel: number; // %\n  basisOfUncertainty: string;\n}\n\n// ============================================================================\n// Physical Properties and Installation\n// ============================================================================\n\nexport interface FittingPhysicalProperties {\n  dimensions: FittingDimensions;\n  materials: MaterialProperties[];\n  weight: number; // lbs\n  thermalProperties: ThermalProperties;\n  acousticProperties: AcousticProperties;\n}\n\nexport interface FittingDimensions {\n  length: number;     // inches\n  width: number;      // inches\n  height: number;     // inches\n  inletDiameter?: number;  // inches\n  outletDiameter?: number; // inches\n  connectionType: 'flanged' | 'slip' | 'welded' | 'threaded';\n}\n\nexport interface MaterialProperties {\n  material: string;\n  thickness: number;  // inches\n  roughness: number;  // inches\n  corrosionResistance: 'low' | 'medium' | 'high';\n  temperatureRating: [number, number]; // [min, max] °F\n}\n\nexport interface ThermalProperties {\n  thermalConductivity: number; // BTU/(hr·ft·°F)\n  heatCapacity: number;        // BTU/(lb·°F)\n  thermalExpansion: number;    // in/(in·°F)\n  insulationRequired: boolean;\n}\n\nexport interface AcousticProperties {\n  insertionLoss: number[];     // dB at octave bands\n  transmissionLoss: number[];  // dB at octave bands\n  regeneratedNoise: number[];  // dB at octave bands\n  octaveBands: number[];       // Hz\n}\n\nexport interface InstallationRequirements {\n  minimumStraightLength: {\n    upstream: number;   // diameters\n    downstream: number; // diameters\n  };\n  supportRequirements: SupportRequirement[];\n  accessRequirements: AccessRequirement[];\n  clearanceRequirements: ClearanceRequirement[];\n  specialTools: string[];\n}\n\nexport interface SupportRequirement {\n  location: string;\n  loadCapacity: number; // lbs\n  supportType: 'hanger' | 'bracket' | 'stand' | 'spring';\n}\n\nexport interface AccessRequirement {\n  purpose: 'maintenance' | 'inspection' | 'adjustment';\n  minimumClearance: number; // inches\n  frequency: 'daily' | 'weekly' | 'monthly' | 'annual';\n}\n\nexport interface ClearanceRequirement {\n  direction: 'top' | 'bottom' | 'left' | 'right' | 'front' | 'back';\n  minimumDistance: number; // inches\n  reason: string;\n}\n\n// ============================================================================\n// Validation and Compatibility\n// ============================================================================\n\nexport interface ValidationRule {\n  ruleId: string;\n  description: string;\n  severity: 'error' | 'warning' | 'info';\n  condition: ValidationCondition;\n  message: string;\n}\n\nexport interface ValidationCondition {\n  parameter: string;\n  operator: '>' | '<' | '=' | '>=' | '<=' | '!=' | 'in' | 'not_in';\n  value: number | string | number[] | string[];\n}\n\nexport interface CompatibilityMatrix {\n  compatibleWith: string[];      // Fitting IDs\n  incompatibleWith: string[];    // Fitting IDs\n  requiresSpecialHandling: string[]; // Fitting IDs\n  interactionEffects: InteractionEffect[];\n}\n\nexport interface InteractionEffect {\n  adjacentFittingType: string;\n  distance: number;              // diameters\n  effect: 'increase' | 'decrease' | 'neutral';\n  magnitude: number;             // multiplier\n  description: string;\n}\n\n// ============================================================================\n// Flow Conditions and System Context\n// ============================================================================\n\nexport interface FlowConditions {\n  velocity: number;           // FPM\n  volumeFlow: number;         // CFM\n  massFlow: number;           // lb/min\n  reynoldsNumber: number;\n  airDensity: number;         // lb/ft³\n  viscosity: number;          // lb/(ft·s)\n  temperature: number;        // °F\n  pressure: number;           // in Hg\n  turbulenceIntensity: number; // %\n}\n\nexport interface SystemContext {\n  systemId: string;\n  adjacentFittings: Map<string, AdvancedFittingConfiguration>;\n  ductGeometry: DuctGeometry;\n  flowDistribution: FlowDistribution;\n  \n  getUpstreamFittings(fittingId: string, distance: number): AdvancedFittingConfiguration[];\n  getDownstreamFittings(fittingId: string, distance: number): AdvancedFittingConfiguration[];\n  getLocalFlowConditions(fittingId: string): FlowConditions;\n}\n\nexport interface DuctGeometry {\n  shape: 'round' | 'rectangular';\n  dimensions: number[];        // [diameter] or [width, height]\n  roughness: number;          // inches\n  material: string;\n}\n\nexport interface FlowDistribution {\n  totalFlow: number;          // CFM\n  branchFlows: Map<string, number>; // branch ID -> CFM\n  pressureDistribution: Map<string, number>; // location -> pressure\n}\n\n// ============================================================================\n// Advanced Calculation Results\n// ============================================================================\n\nexport interface AdvancedFittingLossResult extends FittingLossResult {\n  calculationMethod: CalculationMethod;\n  interactionEffects: InteractionEffects;\n  performanceMetrics: PerformanceMetrics;\n  validationResults: ValidationResults;\n  recommendations: Recommendation[];\n}\n\nexport interface InteractionEffects {\n  totalInteractionFactor: number;\n  individualInteractions: FittingInteraction[];\n  significantInteractions: FittingInteraction[];\n}\n\nexport interface FittingInteraction {\n  adjacentFittingId: string;\n  distance: number;           // diameters\n  factor: number;             // pressure loss multiplier\n  type: 'upstream' | 'downstream';\n  significance: 'low' | 'medium' | 'high';\n}\n\nexport interface PerformanceMetrics {\n  efficiency: number;         // %\n  noiseGeneration: number;    // dB\n  energyLoss: number;         // BTU/hr\n  flowUniformity: number;     // %\n  pressureRecovery: number;   // %\n}\n\nexport interface ValidationResults {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationWarning[];\n  complianceStatus: ComplianceStatus;\n}\n\nexport interface ValidationError {\n  code: string;\n  message: string;\n  parameter: string;\n  value: number | string;\n}\n\nexport interface ValidationWarning {\n  code: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high';\n  recommendation: string;\n}\n\nexport interface ComplianceStatus {\n  smacnaCompliant: boolean;\n  ashraeCompliant: boolean;\n  localCodeCompliant: boolean;\n  customStandardsCompliant: boolean;\n}\n\nexport interface Recommendation {\n  type: 'optimization' | 'maintenance' | 'replacement' | 'adjustment';\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  description: string;\n  expectedBenefit: string;\n  implementationCost: 'low' | 'medium' | 'high';\n}\n"],"mappings":";;AAAA;;;;;;;;;;AAAA;AAAA,SAAAA,cAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF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","ignoreList":[]}