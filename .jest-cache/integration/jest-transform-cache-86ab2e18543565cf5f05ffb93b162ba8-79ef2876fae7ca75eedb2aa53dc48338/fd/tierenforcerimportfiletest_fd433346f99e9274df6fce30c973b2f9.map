{"file":"/Users/johnreyrazonable/Documents/SizeWise_Suite_App/tests/integration/enforcement/tier-enforcer-import-file.test.ts","mappings":"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","names":[],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/tests/integration/enforcement/tier-enforcer-import-file.test.ts"],"sourcesContent":["/**\n * TierEnforcer import/file access tests (integration style)\n *\n * Validates new additive methods validateImportAccess and validateFileAccess\n * using lightweight FeatureManager + userRepository stubs.\n */\n\nimport TierEnforcer from '@backend/services/enforcement/TierEnforcer';\nimport { FeatureManager } from '@backend/features/FeatureManager';\n\n// Minimal DatabaseManager stub\nconst dbStub: any = {};\n\nfunction makeFeatureManagerWithTier(tier: 'free'|'pro'|'enterprise') {\n  const fm = new FeatureManager(dbStub) as any;\n  fm.userRepository = {\n    getUser: jest.fn(async (_userId: string) => ({ id: _userId, tier }))\n  };\n  return fm as FeatureManager;\n}\n\ndescribe('TierEnforcer - validateImportAccess', () => {\n  test('allows import within size limit for free tier; denies when exceeding 10MB with requiredTier pro', async () => {\n    const featureManager = makeFeatureManagerWithTier('free');\n    const te = new TierEnforcer(featureManager, dbStub);\n\n    // Under 10MB\n    const small = await te.validateImportAccess('u1', '.json', 5 * 1024 * 1024);\n    expect(small.allowed).toBe(true);\n    expect(small.currentTier).toBe('free');\n\n    // Over 10MB -> require pro\n    const big = await te.validateImportAccess('u1', '.json', 20 * 1024 * 1024);\n    expect(big.allowed).toBe(false);\n    expect(big.requiredTier).toBe('pro');\n  });\n\n  test('requires enterprise for imports exceeding 100MB for pro user', async () => {\n    const featureManager = makeFeatureManagerWithTier('pro');\n    const te = new TierEnforcer(featureManager, dbStub);\n\n    const huge = await te.validateImportAccess('u2', '.json', 200 * 1024 * 1024);\n    expect(huge.allowed).toBe(false);\n    expect(huge.requiredTier).toBe('enterprise');\n  });\n\n  test('allows large imports for enterprise up to 1GB threshold', async () => {\n    const featureManager = makeFeatureManagerWithTier('enterprise');\n    const te = new TierEnforcer(featureManager, dbStub);\n\n    const ok = await te.validateImportAccess('u3', '.json', 900 * 1024 * 1024);\n    expect(ok.allowed).toBe(true);\n    expect(ok.currentTier).toBe('enterprise');\n  });\n});\n\ndescribe('TierEnforcer - validateFileAccess', () => {\n  test('returns allowed true for both read and write (current implementation)', async () => {\n    const featureManager = makeFeatureManagerWithTier('pro');\n    const te = new TierEnforcer(featureManager, dbStub);\n\n    const readRes = await te.validateFileAccess('any', 'read');\n    const writeRes = await te.validateFileAccess('any', 'write');\n\n    expect(readRes.allowed).toBe(true);\n    expect(writeRes.allowed).toBe(true);\n    expect(readRes.currentTier).toBe('pro');\n  });\n});\n\n"],"version":3}