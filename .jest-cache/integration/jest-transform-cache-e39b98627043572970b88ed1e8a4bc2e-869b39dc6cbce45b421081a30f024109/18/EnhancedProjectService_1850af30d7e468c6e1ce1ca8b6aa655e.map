{"version":3,"names":["cov_2oltjz3po7","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","uuid_1","require","duct_node_1","fitting_interfaces_1","EnhancedProjectService","constructor","db","userId","currentUserId","saveProject","project","projectToSave","id","v4","last_modified","Date","toISOString","created_at","createProject","uuid","project_name","user_name","project_location","codes","rooms","segments","equipment","computational_properties","ductSegments","length","saveDuctSegments","fittingSegments","saveFittingSegments","console","log","error","Error","message","loadProject","projectId","getProject","loadDuctSegments","loadFittingSegments","segmentRecords","map","segment","segment_id","projectUuid","segmentType","calculationData","material","size","airflow","velocity","pressure_loss","warnings","geometryData","points","geometry3D","connections","ductNode","shapeType","dimensions","systemProperties","position","metadata","validationResults","complianceStatus","bulkSaveProjectSegments","getProjectSegmentsByType","record","DuctNode","material3D","ductShape","fittingParameters","pressureLoss","kFactor","recommendations","FittingType","ELBOW","gauge","x","y","z","rotation","scale","deleteProject","getProjectSegments","deleteProjectSegment","getProjectList","allProjects","getAllProjects","projects","filter","p","enhancedProjects","push","exports"],"sources":["C:\\Users\\johnr\\Downloads\\SizeWise_Suite_App\\frontend\\lib\\services\\EnhancedProjectService.ts"],"sourcesContent":["/**\n * Enhanced Project Service\n * \n * Comprehensive project management with database storage for projects, \n * duct segments, and fitting segments. Integrates with the 3D fitting system.\n */\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { Project, Segment } from '@/types/air-duct-sizer';\nimport { SizeWiseDatabase, ProjectSegment } from '@/lib/database/DexieDatabase';\nimport { DuctNode } from '@/lib/3d-fittings/duct-node';\nimport { FittingType } from '@/lib/3d-fittings/fitting-interfaces';\nimport { GaugeType, MaterialType } from '@/lib/3d-fittings/smacna-gauge-tables';\n\n// =============================================================================\n// Enhanced Segment Types\n// =============================================================================\n\nexport interface EnhancedDuctSegment extends Segment {\n  // Enhanced properties for 3D fitting integration\n  ductNode?: DuctNode;\n  material3D?: {\n    type: MaterialType;\n    gauge: GaugeType;\n    finish?: 'standard' | 'painted' | 'weathered';\n  };\n  geometry3D?: {\n    position: { x: number; y: number; z: number };\n    rotation: { x: number; y: number; z: number };\n    scale: { x: number; y: number; z: number };\n  };\n  connections?: {\n    inlet?: string; // Connected segment ID\n    outlet?: string; // Connected segment ID\n  };\n}\n\nexport interface EnhancedFittingSegment {\n  segment_id: string;\n  type: FittingType;\n  name: string;\n  ductShape: 'round' | 'rectangular' | 'oval';\n  dimensions: {\n    diameter?: number;\n    width?: number;\n    height?: number;\n  };\n  material: {\n    type: MaterialType;\n    gauge: GaugeType;\n    finish?: 'standard' | 'painted' | 'weathered';\n  };\n  fittingParameters: Record<string, any>;\n  geometry3D: {\n    position: { x: number; y: number; z: number };\n    rotation: { x: number; y: number; z: number };\n    scale: { x: number; y: number; z: number };\n  };\n  connections: {\n    inlet?: string;\n    outlet?: string;\n  };\n  calculationData?: {\n    pressureLoss?: number;\n    velocity?: number;\n    kFactor?: number;\n  };\n  validationResults?: {\n    warnings: string[];\n    recommendations: string[];\n    complianceStatus: 'compliant' | 'warning' | 'error';\n  };\n}\n\nexport interface EnhancedProject extends Project {\n  ductSegments?: EnhancedDuctSegment[];\n  fittingSegments?: EnhancedFittingSegment[];\n  projectSettings?: {\n    units: 'imperial' | 'metric';\n    defaultMaterial: MaterialType;\n    defaultGauge: GaugeType;\n    autoValidation: boolean;\n    autoOptimization: boolean;\n  };\n}\n\n// =============================================================================\n// Enhanced Project Service\n// =============================================================================\n\nexport class EnhancedProjectService {\n  private db: SizeWiseDatabase;\n  private currentUserId: string;\n\n  constructor(db: SizeWiseDatabase, userId: string) {\n    this.db = db;\n    this.currentUserId = userId;\n  }\n\n  // =============================================================================\n  // Project Management\n  // =============================================================================\n\n  async saveProject(project: EnhancedProject): Promise<void> {\n    try {\n      // Ensure project has required fields\n      const projectToSave = {\n        ...project,\n        id: project.id || uuidv4(),\n        last_modified: new Date().toISOString(),\n        created_at: project.created_at || new Date().toISOString()\n      };\n\n      // Save main project data\n      await this.db.createProject({\n        uuid: projectToSave.id,\n        project_name: projectToSave.project_name,\n        user_name: this.currentUserId,\n        project_location: projectToSave.project_location || '',\n        codes: projectToSave.codes || [],\n        created_at: projectToSave.created_at,\n        last_modified: projectToSave.last_modified,\n        rooms: projectToSave.rooms || [],\n        segments: projectToSave.segments || [],\n        equipment: projectToSave.equipment || [],\n        computational_properties: projectToSave.computational_properties\n      });\n\n      // Save duct segments separately\n      if (projectToSave.ductSegments && projectToSave.ductSegments.length > 0) {\n        await this.saveDuctSegments(projectToSave.id, projectToSave.ductSegments);\n      }\n\n      // Save fitting segments separately\n      if (projectToSave.fittingSegments && projectToSave.fittingSegments.length > 0) {\n        await this.saveFittingSegments(projectToSave.id, projectToSave.fittingSegments);\n      }\n\n      console.log(`✅ Project saved successfully: ${projectToSave.project_name}`);\n    } catch (error) {\n      console.error('❌ Failed to save project:', error);\n      throw new Error(`Failed to save project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async loadProject(projectId: string): Promise<EnhancedProject | null> {\n    try {\n      // Load main project data\n      const project = await this.db.getProject(projectId);\n      if (!project) {\n        return null;\n      }\n\n      // Load duct segments\n      const ductSegments = await this.loadDuctSegments(projectId);\n\n      // Load fitting segments\n      const fittingSegments = await this.loadFittingSegments(projectId);\n\n      return {\n        ...project,\n        id: project.uuid, // Use UUID as the string ID\n        ductSegments,\n        fittingSegments\n      };\n    } catch (error) {\n      console.error('❌ Failed to load project:', error);\n      throw new Error(`Failed to load project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  // =============================================================================\n  // Duct Segment Management\n  // =============================================================================\n\n  private async saveDuctSegments(projectId: string, segments: EnhancedDuctSegment[]): Promise<void> {\n    const segmentRecords: Omit<ProjectSegment, 'id' | 'lastModified' | 'syncStatus'>[] = segments.map(segment => ({\n      uuid: segment.segment_id,\n      projectUuid: projectId,\n      segmentType: 'duct',\n      name: `Duct ${segment.segment_id}`,\n      calculationData: {\n        type: segment.type,\n        material: segment.material,\n        size: segment.size,\n        length: segment.length,\n        airflow: segment.airflow,\n        velocity: segment.velocity,\n        pressure_loss: segment.pressure_loss,\n        warnings: segment.warnings\n      },\n      geometryData: {\n        points: segment.points,\n        geometry3D: segment.geometry3D,\n        connections: segment.connections,\n        ductNode: segment.ductNode ? {\n          id: segment.ductNode.id,\n          shapeType: segment.ductNode.shapeType,\n          dimensions: segment.ductNode.dimensions,\n          material: segment.ductNode.material,\n          systemProperties: segment.ductNode.systemProperties,\n          position: segment.ductNode.position,\n          metadata: segment.ductNode.metadata\n        } : null\n      },\n      validationResults: {\n        warnings: segment.warnings || [],\n        complianceStatus: segment.warnings?.length > 0 ? 'warning' : 'compliant'\n      }\n    }));\n\n    await this.db.bulkSaveProjectSegments(segmentRecords);\n  }\n\n  private async loadDuctSegments(projectId: string): Promise<EnhancedDuctSegment[]> {\n    const segmentRecords = await this.db.getProjectSegmentsByType(projectId, 'duct');\n    \n    return segmentRecords.map(record => {\n      const calculationData = record.calculationData || {};\n      const geometryData = record.geometryData || {};\n      \n      return {\n        segment_id: record.uuid,\n        type: calculationData.type || 'straight',\n        material: calculationData.material || 'galvanized_steel',\n        size: calculationData.size || {},\n        length: calculationData.length || 0,\n        airflow: calculationData.airflow,\n        velocity: calculationData.velocity,\n        pressure_loss: calculationData.pressure_loss,\n        warnings: calculationData.warnings || [],\n        points: geometryData.points,\n        geometry3D: geometryData.geometry3D,\n        connections: geometryData.connections,\n        ductNode: geometryData.ductNode ? new DuctNode(geometryData.ductNode) : undefined,\n        material3D: calculationData.material3D\n      };\n    });\n  }\n\n  // =============================================================================\n  // Fitting Segment Management\n  // =============================================================================\n\n  private async saveFittingSegments(projectId: string, segments: EnhancedFittingSegment[]): Promise<void> {\n    const segmentRecords: Omit<ProjectSegment, 'id' | 'lastModified' | 'syncStatus'>[] = segments.map(segment => ({\n      uuid: segment.segment_id,\n      projectUuid: projectId,\n      segmentType: 'fitting',\n      name: segment.name,\n      calculationData: {\n        type: segment.type,\n        ductShape: segment.ductShape,\n        dimensions: segment.dimensions,\n        material: segment.material,\n        fittingParameters: segment.fittingParameters,\n        pressureLoss: segment.calculationData?.pressureLoss,\n        velocity: segment.calculationData?.velocity,\n        kFactor: segment.calculationData?.kFactor\n      },\n      geometryData: {\n        geometry3D: segment.geometry3D,\n        connections: segment.connections\n      },\n      validationResults: segment.validationResults || {\n        warnings: [],\n        recommendations: [],\n        complianceStatus: 'compliant'\n      }\n    }));\n\n    await this.db.bulkSaveProjectSegments(segmentRecords);\n  }\n\n  private async loadFittingSegments(projectId: string): Promise<EnhancedFittingSegment[]> {\n    const segmentRecords = await this.db.getProjectSegmentsByType(projectId, 'fitting');\n    \n    return segmentRecords.map(record => {\n      const calculationData = record.calculationData || {};\n      const geometryData = record.geometryData || {};\n      \n      return {\n        segment_id: record.uuid,\n        type: calculationData.type || FittingType.ELBOW,\n        name: record.name,\n        ductShape: calculationData.ductShape || 'round',\n        dimensions: calculationData.dimensions || {},\n        material: calculationData.material || {\n          type: 'galvanized_steel',\n          gauge: '26'\n        },\n        fittingParameters: calculationData.fittingParameters || {},\n        geometry3D: geometryData.geometry3D || {\n          position: { x: 0, y: 0, z: 0 },\n          rotation: { x: 0, y: 0, z: 0 },\n          scale: { x: 1, y: 1, z: 1 }\n        },\n        connections: geometryData.connections || {},\n        calculationData: {\n          pressureLoss: calculationData.pressureLoss,\n          velocity: calculationData.velocity,\n          kFactor: calculationData.kFactor\n        },\n        validationResults: record.validationResults || {\n          warnings: [],\n          recommendations: [],\n          complianceStatus: 'compliant'\n        }\n      };\n    });\n  }\n\n  // =============================================================================\n  // Utility Methods\n  // =============================================================================\n\n  async deleteProject(projectId: string): Promise<void> {\n    try {\n      // Delete all segments first\n      const segments = await this.db.getProjectSegments(projectId);\n      for (const segment of segments) {\n        await this.db.deleteProjectSegment(segment.uuid);\n      }\n\n      // Delete the project\n      await this.db.deleteProject(projectId);\n      \n      console.log(`✅ Project deleted successfully: ${projectId}`);\n    } catch (error) {\n      console.error('❌ Failed to delete project:', error);\n      throw new Error(`Failed to delete project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getProjectList(): Promise<EnhancedProject[]> {\n    try {\n      const allProjects = await this.db.getAllProjects();\n      const projects = allProjects.filter(p => p.user_name === this.currentUserId);\n      \n      // Load segments for each project (optional - can be lazy loaded)\n      const enhancedProjects: EnhancedProject[] = [];\n      for (const project of projects) {\n        const ductSegments = await this.loadDuctSegments(project.uuid);\n        const fittingSegments = await this.loadFittingSegments(project.uuid);\n        \n        enhancedProjects.push({\n          ...project,\n          id: project.uuid, // Use UUID as the string ID\n          ductSegments,\n          fittingSegments\n        });\n      }\n      \n      return enhancedProjects;\n    } catch (error) {\n      console.error('❌ Failed to get project list:', error);\n      throw new Error(`Failed to get project list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}