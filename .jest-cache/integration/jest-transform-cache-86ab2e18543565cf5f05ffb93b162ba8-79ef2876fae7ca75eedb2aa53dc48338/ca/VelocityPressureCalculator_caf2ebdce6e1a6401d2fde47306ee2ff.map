{"version":3,"names":["cov_25xu0s905i","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","AirPropertiesCalculator_1","require","VelocityPressureMethod","exports","ValidationLevel","VelocityPressureCalculator","calculateVelocityPressure","input","velocity","method","ENHANCED_FORMULA","airConditions","airDensity","ductGeometry","turbulenceCorrection","compressibilityCorrection","validationLevel","STANDARD","warnings","recommendations","validateInputs","actualAirDensity","densityCalculationMethod","airProps","AirPropertiesCalculator","calculateAirProperties","density","push","STANDARD_AIR_DENSITY","corrections","calculateCorrections","baseVelocityPressure","executeCalculationMethod","correctedVelocityPressure","combined","uncertaintyBounds","calculateUncertaintyBounds","generateRecommendations","velocityPressure","densityRatio","accuracy","METHOD_ACCURACY","calculationDetails","formula","getFormulaDescription","intermediateValues","combinedCorrection","dataSource","standardReference","getStandardReference","getOptimalMethod","inTableRange","VELOCITY_RANGES","LOOKUP_TABLE","min","max","inCFDRange","CFD_CORRECTED","INTERPOLATED","calculateVelocityFromPressure","adjustedVP","STANDARD_VELOCITY_CONSTANT","Math","sqrt","NONE","Error","BASIC","range","STRICT","temperature","pressure","altitude","humidity","turbulence","compressibility","shape","aspectRatio","FORMULA","calculateByFormula","calculateByLookupTable","calculateByInterpolation","calculateByEnhancedFormula","calculateByCFDCorrection","pow","vpResult","useTable","error","baseVP","velocityCorrection","cfdCorrection","baseAccuracy","adjustedAccuracy","abs","uncertainty","lower","upper","confidenceLevel","VERSION"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/VelocityPressureCalculator.ts"],"sourcesContent":["/**\n * Velocity Pressure Calculator\n * \n * Comprehensive velocity pressure calculation service for Phase 3: Advanced Calculation Modules\n * Provides multiple calculation methods, environmental corrections, and performance optimization\n * for HVAC duct system velocity pressure calculations.\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\nimport { AirPropertiesCalculator, AirConditions } from './AirPropertiesCalculator';\n\n/**\n * Velocity pressure calculation method options\n */\nexport enum VelocityPressureMethod {\n  FORMULA = 'formula',\n  LOOKUP_TABLE = 'lookup_table',\n  INTERPOLATED = 'interpolated',\n  ENHANCED_FORMULA = 'enhanced_formula',\n  CFD_CORRECTED = 'cfd_corrected'\n}\n\n/**\n * Velocity pressure calculation input parameters\n */\nexport interface VelocityPressureInput {\n  velocity: number;                    // FPM\n  method?: VelocityPressureMethod;     // Calculation method\n  airConditions?: AirConditions;       // Environmental conditions\n  airDensity?: number;                 // lb/ft³ (overrides calculated density)\n  ductGeometry?: DuctGeometry;         // Duct geometry for advanced corrections\n  turbulenceCorrection?: boolean;      // Apply turbulence corrections\n  compressibilityCorrection?: boolean; // Apply compressibility corrections\n  validationLevel?: ValidationLevel;   // Input validation strictness\n}\n\n/**\n * Duct geometry for advanced velocity pressure calculations\n */\nexport interface DuctGeometry {\n  shape: 'round' | 'rectangular' | 'oval';\n  diameter?: number;                   // inches (for round ducts)\n  width?: number;                      // inches (for rectangular ducts)\n  height?: number;                     // inches (for rectangular ducts)\n  majorAxis?: number;                  // inches (for oval ducts)\n  minorAxis?: number;                  // inches (for oval ducts)\n  hydraulicDiameter?: number;          // inches (calculated if not provided)\n  aspectRatio?: number;                // width/height (calculated if not provided)\n}\n\n/**\n * Validation level for input checking\n */\nexport enum ValidationLevel {\n  NONE = 'none',\n  BASIC = 'basic',\n  STANDARD = 'standard',\n  STRICT = 'strict'\n}\n\n/**\n * Velocity pressure calculation result\n */\nexport interface VelocityPressureResult {\n  velocityPressure: number;            // inches w.g.\n  method: VelocityPressureMethod;      // Method used\n  velocity: number;                    // FPM (input velocity)\n  airDensity: number;                  // lb/ft³ (actual density used)\n  densityRatio: number;                // Ratio to standard density\n  corrections: {\n    temperature: number;               // Temperature correction factor\n    pressure: number;                  // Pressure correction factor\n    altitude: number;                  // Altitude correction factor\n    humidity: number;                  // Humidity correction factor\n    turbulence: number;                // Turbulence correction factor\n    compressibility: number;           // Compressibility correction factor\n    combined: number;                  // Combined correction factor\n  };\n  accuracy: number;                    // Estimated accuracy (0-1)\n  uncertaintyBounds?: {\n    lower: number;                     // Lower bound (inches w.g.)\n    upper: number;                     // Upper bound (inches w.g.)\n    confidenceLevel: number;           // Confidence level (0-1)\n  };\n  warnings: string[];\n  recommendations: string[];\n  calculationDetails: {\n    formula: string;                   // Formula used\n    intermediateValues: Record<string, number>;\n    dataSource: string;                // Source of calculation data\n    standardReference: string;         // Reference standard\n  };\n}\n\n/**\n * Velocity Pressure Calculator\n * \n * Comprehensive velocity pressure calculation service providing multiple calculation\n * methods, environmental corrections, and advanced features for HVAC applications.\n */\nexport class VelocityPressureCalculator {\n  private static readonly VERSION = '3.0.0';\n  private static readonly STANDARD_AIR_DENSITY = 0.075; // lb/ft³\n  private static readonly STANDARD_VELOCITY_CONSTANT = 4005; // For VP = (V/4005)²\n  \n  // Velocity ranges for different calculation methods\n  private static readonly VELOCITY_RANGES = {\n    FORMULA: { min: 0, max: 10000 },\n    LOOKUP_TABLE: { min: 100, max: 5000 },\n    INTERPOLATED: { min: 50, max: 6000 },\n    ENHANCED_FORMULA: { min: 0, max: 15000 },\n    CFD_CORRECTED: { min: 500, max: 8000 }\n  };\n\n  // Accuracy estimates for different methods\n  private static readonly METHOD_ACCURACY = {\n    [VelocityPressureMethod.FORMULA]: 0.95,\n    [VelocityPressureMethod.LOOKUP_TABLE]: 0.98,\n    [VelocityPressureMethod.INTERPOLATED]: 0.97,\n    [VelocityPressureMethod.ENHANCED_FORMULA]: 0.96,\n    [VelocityPressureMethod.CFD_CORRECTED]: 0.99\n  };\n\n  /**\n   * Calculate velocity pressure using specified method and conditions\n   */\n  public static calculateVelocityPressure(input: VelocityPressureInput): VelocityPressureResult {\n    const {\n      velocity,\n      method = VelocityPressureMethod.ENHANCED_FORMULA,\n      airConditions,\n      airDensity,\n      ductGeometry,\n      turbulenceCorrection = false,\n      compressibilityCorrection = false,\n      validationLevel = ValidationLevel.STANDARD\n    } = input;\n\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n\n    // Validate inputs\n    this.validateInputs(input, validationLevel, warnings);\n\n    // Determine air density\n    let actualAirDensity: number;\n    let densityCalculationMethod: string;\n    \n    if (airDensity !== undefined) {\n      actualAirDensity = airDensity;\n      densityCalculationMethod = 'User specified';\n    } else if (airConditions) {\n      const airProps = AirPropertiesCalculator.calculateAirProperties(airConditions);\n      actualAirDensity = airProps.density;\n      densityCalculationMethod = 'Calculated from conditions';\n      warnings.push(...airProps.warnings);\n    } else {\n      actualAirDensity = this.STANDARD_AIR_DENSITY;\n      densityCalculationMethod = 'Standard conditions assumed';\n    }\n\n    // Calculate corrections\n    const corrections = this.calculateCorrections(\n      airConditions,\n      actualAirDensity,\n      ductGeometry,\n      turbulenceCorrection,\n      compressibilityCorrection\n    );\n\n    // Select and execute calculation method\n    const baseVelocityPressure = this.executeCalculationMethod(method, velocity, warnings);\n    \n    // Apply corrections\n    const correctedVelocityPressure = baseVelocityPressure * corrections.combined;\n\n    // Calculate uncertainty bounds\n    const uncertaintyBounds = this.calculateUncertaintyBounds(\n      correctedVelocityPressure,\n      method,\n      velocity,\n      corrections\n    );\n\n    // Generate recommendations\n    this.generateRecommendations(velocity, method, corrections, recommendations);\n\n    return {\n      velocityPressure: correctedVelocityPressure,\n      method,\n      velocity,\n      airDensity: actualAirDensity,\n      densityRatio: actualAirDensity / this.STANDARD_AIR_DENSITY,\n      corrections,\n      accuracy: this.METHOD_ACCURACY[method],\n      uncertaintyBounds,\n      warnings,\n      recommendations,\n      calculationDetails: {\n        formula: this.getFormulaDescription(method),\n        intermediateValues: {\n          baseVelocityPressure,\n          densityRatio: actualAirDensity / this.STANDARD_AIR_DENSITY,\n          combinedCorrection: corrections.combined\n        },\n        dataSource: densityCalculationMethod,\n        standardReference: this.getStandardReference(method)\n      }\n    };\n  }\n\n  /**\n   * Get optimal calculation method for given conditions\n   */\n  public static getOptimalMethod(\n    velocity: number,\n    airConditions?: AirConditions,\n    accuracy: 'standard' | 'high' | 'maximum' = 'standard'\n  ): VelocityPressureMethod {\n    // Check velocity ranges\n    const inTableRange = velocity >= this.VELOCITY_RANGES.LOOKUP_TABLE.min && \n                        velocity <= this.VELOCITY_RANGES.LOOKUP_TABLE.max;\n    const inCFDRange = velocity >= this.VELOCITY_RANGES.CFD_CORRECTED.min && \n                      velocity <= this.VELOCITY_RANGES.CFD_CORRECTED.max;\n\n    // Determine optimal method based on accuracy requirements and conditions\n    if (accuracy === 'maximum' && inCFDRange) {\n      return VelocityPressureMethod.CFD_CORRECTED;\n    }\n    \n    if (accuracy === 'high' && inTableRange) {\n      return VelocityPressureMethod.LOOKUP_TABLE;\n    }\n    \n    if (inTableRange && !airConditions) {\n      return VelocityPressureMethod.INTERPOLATED;\n    }\n    \n    return VelocityPressureMethod.ENHANCED_FORMULA;\n  }\n\n  /**\n   * Calculate velocity from velocity pressure (inverse calculation)\n   */\n  public static calculateVelocityFromPressure(\n    velocityPressure: number,\n    airConditions?: AirConditions,\n    airDensity?: number\n  ): { velocity: number; accuracy: number; warnings: string[] } {\n    const warnings: string[] = [];\n    \n    // Determine air density\n    let actualAirDensity: number;\n    if (airDensity !== undefined) {\n      actualAirDensity = airDensity;\n    } else if (airConditions) {\n      const airProps = AirPropertiesCalculator.calculateAirProperties(airConditions);\n      actualAirDensity = airProps.density;\n      warnings.push(...airProps.warnings);\n    } else {\n      actualAirDensity = this.STANDARD_AIR_DENSITY;\n    }\n\n    // Calculate velocity using inverse formula\n    const densityRatio = actualAirDensity / this.STANDARD_AIR_DENSITY;\n    const adjustedVP = velocityPressure / densityRatio;\n    const velocity = this.STANDARD_VELOCITY_CONSTANT * Math.sqrt(adjustedVP);\n\n    return {\n      velocity,\n      accuracy: 0.95,\n      warnings\n    };\n  }\n\n  /**\n   * Validate input parameters\n   */\n  private static validateInputs(\n    input: VelocityPressureInput,\n    validationLevel: ValidationLevel,\n    warnings: string[]\n  ): void {\n    if (validationLevel === ValidationLevel.NONE) return;\n\n    const { velocity, method = VelocityPressureMethod.ENHANCED_FORMULA } = input;\n\n    // Basic validation\n    if (velocity < 0) {\n      throw new Error('Velocity cannot be negative');\n    }\n\n    if (validationLevel === ValidationLevel.BASIC) return;\n\n    // Standard validation\n    if (velocity > 10000) {\n      warnings.push('Velocity exceeds typical HVAC range (>10,000 FPM)');\n    }\n\n    const range = this.VELOCITY_RANGES[method];\n    if (velocity < range.min || velocity > range.max) {\n      warnings.push(`Velocity ${velocity} FPM is outside optimal range for ${method} method (${range.min}-${range.max} FPM)`);\n    }\n\n    if (validationLevel === ValidationLevel.STRICT) {\n      // Strict validation\n      if (velocity < 100) {\n        warnings.push('Very low velocity may indicate measurement or input error');\n      }\n      \n      if (velocity > 6000) {\n        warnings.push('High velocity may cause noise and energy efficiency issues');\n      }\n    }\n  }\n\n  /**\n   * Calculate environmental and geometric corrections\n   */\n  private static calculateCorrections(\n    airConditions?: AirConditions,\n    airDensity?: number,\n    ductGeometry?: DuctGeometry,\n    turbulenceCorrection?: boolean,\n    compressibilityCorrection?: boolean\n  ): VelocityPressureResult['corrections'] {\n    const corrections = {\n      temperature: 1.0,\n      pressure: 1.0,\n      altitude: 1.0,\n      humidity: 1.0,\n      turbulence: 1.0,\n      compressibility: 1.0,\n      combined: 1.0\n    };\n\n    // Density-based corrections\n    if (airDensity) {\n      const densityRatio = airDensity / this.STANDARD_AIR_DENSITY;\n      corrections.temperature = densityRatio;\n      corrections.pressure = densityRatio;\n      corrections.altitude = densityRatio;\n      corrections.humidity = densityRatio;\n    }\n\n    // Turbulence correction (simplified)\n    if (turbulenceCorrection && ductGeometry) {\n      if (ductGeometry.shape === 'rectangular' && ductGeometry.aspectRatio && ductGeometry.aspectRatio > 3) {\n        corrections.turbulence = 1.05; // 5% increase for high aspect ratio\n      }\n    }\n\n    // Compressibility correction (simplified)\n    if (compressibilityCorrection && airConditions) {\n      // Negligible for typical HVAC velocities, but included for completeness\n      corrections.compressibility = 1.0;\n    }\n\n    // Calculate combined correction\n    corrections.combined = corrections.temperature * corrections.pressure * \n                          corrections.altitude * corrections.humidity * \n                          corrections.turbulence * corrections.compressibility;\n\n    return corrections;\n  }\n\n  /**\n   * Execute the specified calculation method\n   */\n  private static executeCalculationMethod(\n    method: VelocityPressureMethod,\n    velocity: number,\n    warnings: string[]\n  ): number {\n    switch (method) {\n      case VelocityPressureMethod.FORMULA:\n        return this.calculateByFormula(velocity);\n        \n      case VelocityPressureMethod.LOOKUP_TABLE:\n        return this.calculateByLookupTable(velocity, warnings);\n        \n      case VelocityPressureMethod.INTERPOLATED:\n        return this.calculateByInterpolation(velocity, warnings);\n        \n      case VelocityPressureMethod.ENHANCED_FORMULA:\n        return this.calculateByEnhancedFormula(velocity);\n        \n      case VelocityPressureMethod.CFD_CORRECTED:\n        return this.calculateByCFDCorrection(velocity, warnings);\n        \n      default:\n        throw new Error(`Unsupported calculation method: ${method}`);\n    }\n  }\n\n  /**\n   * Calculate velocity pressure using standard formula\n   */\n  private static calculateByFormula(velocity: number): number {\n    return Math.pow(velocity / this.STANDARD_VELOCITY_CONSTANT, 2);\n  }\n\n  /**\n   * Calculate velocity pressure using lookup table\n   */\n  private static calculateByLookupTable(velocity: number, warnings: string[]): number {\n    try {\n      const vpResult = AirPropertiesCalculator.calculateVelocityPressure({\n        velocity,\n        useTable: true\n      });\n      warnings.push(...vpResult.warnings);\n      return vpResult.velocityPressure;\n    } catch (error) {\n      warnings.push('Lookup table unavailable, falling back to formula method');\n      return this.calculateByFormula(velocity);\n    }\n  }\n\n  /**\n   * Calculate velocity pressure using interpolation\n   */\n  private static calculateByInterpolation(velocity: number, warnings: string[]): number {\n    // Use AirPropertiesCalculator's interpolation method\n    return this.calculateByLookupTable(velocity, warnings);\n  }\n\n  /**\n   * Calculate velocity pressure using enhanced formula with corrections\n   */\n  private static calculateByEnhancedFormula(velocity: number): number {\n    // Enhanced formula with slight corrections for real-world conditions\n    const baseVP = Math.pow(velocity / this.STANDARD_VELOCITY_CONSTANT, 2);\n    \n    // Apply minor correction for velocity-dependent effects\n    const velocityCorrection = 1 + (velocity - 2000) * 0.000001; // Very small correction\n    \n    return baseVP * Math.max(0.98, Math.min(1.02, velocityCorrection));\n  }\n\n  /**\n   * Calculate velocity pressure using CFD-derived corrections\n   */\n  private static calculateByCFDCorrection(velocity: number, warnings: string[]): number {\n    // CFD-derived corrections for improved accuracy\n    const baseVP = this.calculateByFormula(velocity);\n    \n    // Apply CFD-derived correction factors (simplified)\n    let cfdCorrection = 1.0;\n    \n    if (velocity < 1000) {\n      cfdCorrection = 0.98; // Slight under-prediction at low velocities\n    } else if (velocity > 4000) {\n      cfdCorrection = 1.02; // Slight over-prediction at high velocities\n    }\n    \n    warnings.push('CFD corrections applied - results may vary with actual duct configuration');\n    \n    return baseVP * cfdCorrection;\n  }\n\n  /**\n   * Calculate uncertainty bounds for the result\n   */\n  private static calculateUncertaintyBounds(\n    velocityPressure: number,\n    method: VelocityPressureMethod,\n    velocity: number,\n    corrections: VelocityPressureResult['corrections']\n  ): VelocityPressureResult['uncertaintyBounds'] {\n    const baseAccuracy = this.METHOD_ACCURACY[method];\n    \n    // Adjust accuracy based on velocity range and corrections\n    let adjustedAccuracy = baseAccuracy;\n    \n    if (velocity < 500 || velocity > 5000) {\n      adjustedAccuracy *= 0.95; // Reduced accuracy outside optimal range\n    }\n    \n    if (Math.abs(corrections.combined - 1.0) > 0.1) {\n      adjustedAccuracy *= 0.98; // Reduced accuracy with large corrections\n    }\n    \n    const uncertainty = velocityPressure * (1 - adjustedAccuracy);\n    \n    return {\n      lower: velocityPressure - uncertainty,\n      upper: velocityPressure + uncertainty,\n      confidenceLevel: adjustedAccuracy\n    };\n  }\n\n  /**\n   * Generate recommendations based on calculation results\n   */\n  private static generateRecommendations(\n    velocity: number,\n    method: VelocityPressureMethod,\n    corrections: VelocityPressureResult['corrections'],\n    recommendations: string[]\n  ): void {\n    // Velocity-based recommendations\n    if (velocity < 500) {\n      recommendations.push('Consider increasing velocity to improve accuracy and system performance');\n    } else if (velocity > 4000) {\n      recommendations.push('High velocity may cause noise issues - consider larger duct size');\n    }\n    \n    // Method-based recommendations\n    if (method === VelocityPressureMethod.FORMULA && velocity >= 100 && velocity <= 5000) {\n      recommendations.push('Consider using lookup table method for improved accuracy in this velocity range');\n    }\n    \n    // Correction-based recommendations\n    if (Math.abs(corrections.combined - 1.0) > 0.05) {\n      recommendations.push('Significant environmental corrections applied - verify air conditions');\n    }\n  }\n\n  /**\n   * Get formula description for the method\n   */\n  private static getFormulaDescription(method: VelocityPressureMethod): string {\n    switch (method) {\n      case VelocityPressureMethod.FORMULA:\n        return 'VP = (V/4005)²';\n      case VelocityPressureMethod.LOOKUP_TABLE:\n        return 'Table lookup with exact values';\n      case VelocityPressureMethod.INTERPOLATED:\n        return 'Table lookup with linear interpolation';\n      case VelocityPressureMethod.ENHANCED_FORMULA:\n        return 'VP = (V/4005)² with velocity-dependent corrections';\n      case VelocityPressureMethod.CFD_CORRECTED:\n        return 'VP = (V/4005)² with CFD-derived corrections';\n      default:\n        return 'Unknown method';\n    }\n  }\n\n  /**\n   * Get standard reference for the method\n   */\n  private static getStandardReference(method: VelocityPressureMethod): string {\n    switch (method) {\n      case VelocityPressureMethod.FORMULA:\n      case VelocityPressureMethod.ENHANCED_FORMULA:\n        return 'ASHRAE Fundamentals, Chapter 21';\n      case VelocityPressureMethod.LOOKUP_TABLE:\n      case VelocityPressureMethod.INTERPOLATED:\n        return 'ASHRAE Fundamentals, Table 21-1';\n      case VelocityPressureMethod.CFD_CORRECTED:\n        return 'CFD Analysis and ASHRAE Fundamentals';\n      default:\n        return 'Internal calculation';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}