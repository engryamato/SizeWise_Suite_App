/**
 * Canvas3D Type Definitions
 * SizeWise Suite - Phase 5: Architecture Modernization
 * 
 * Extracted type definitions from Canvas3D.tsx for better organization
 */

import { Vector3, Euler } from 'three';

// Enhanced flow properties for real-time calculations
export interface FlowProperties {
  airflow: number; // CFM
  velocity: number; // FPM
  pressureDrop: number; // inches w.g.
  frictionRate: number; // inches w.g. per 100 ft
  reynoldsNumber: number;
  temperature: number; // °F
  density: number; // lb/ft³
  isCalculated: boolean;
  lastUpdated: Date;
}

// Connection relationships for system topology
export interface ConnectionRelationships {
  upstreamSegments: string[]; // IDs of segments feeding into this one
  downstreamSegments: string[]; // IDs of segments this one feeds into
  connectedEquipment: string[]; // IDs of connected equipment
  connectedFittings: string[]; // IDs of connected fittings
  flowPath: string[]; // Complete flow path from source to terminal
  branchLevel: number; // Level in the system hierarchy (0 = main trunk)
}

// Calculation state tracking
export interface CalculationState {
  needsRecalculation: boolean;
  isCalculating: boolean;
  lastCalculated: Date | null;
  calculationDependencies: string[]; // IDs of elements that affect this segment's calculations
  calculationOrder: number; // Order in which this segment should be calculated
  validationWarnings: string[];
  calculationErrors: string[];
}

// Core duct segment interface - Enhanced for real-time calculations
export interface DuctSegment {
  id: string;
  start: Vector3;
  end: Vector3;
  width?: number; // Optional for round ducts
  height?: number; // Optional for round ducts
  diameter?: number; // For round ducts
  shape: 'rectangular' | 'round';
  type: 'supply' | 'return' | 'exhaust';
  material: string;

  // Enhanced properties for real-time calculation connectivity
  flowProperties: FlowProperties;
  connectionRelationships: ConnectionRelationships;
  calculationState: CalculationState;

  // Connection points for HVAC system connectivity
  inlet?: ConnectionPoint;
  outlet?: ConnectionPoint;

  // System integration properties
  systemId?: string; // ID of the HVAC system this segment belongs to
  zoneId?: string; // ID of the zone this segment serves
  designConditions?: {
    designAirflow: number; // Design CFM
    designVelocity: number; // Design FPM
    maxPressureDrop: number; // Maximum allowable pressure drop
  };
}

// Enhanced connection point for duct fittings and system connectivity
export interface ConnectionPoint {
  id: string;
  position: Vector3;
  direction: Vector3;
  shape: 'rectangular' | 'round';
  width?: number;
  height?: number;
  diameter?: number;
  // Connection status for system validation
  status: 'available' | 'connected' | 'blocked';
  connectedTo?: string; // ID of connected element
}

// Base fitting interface - Enhanced for real-time calculations
export interface DuctFitting {
  id: string;
  type: 'transition' | 'elbow' | 'tee' | 'wye' | 'reducer' | 'cap';
  position: Vector3;
  rotation: Euler;
  inlet: ConnectionPoint;
  outlet: ConnectionPoint;
  material: string;

  // Enhanced properties for real-time calculation connectivity
  flowProperties: FlowProperties;
  connectionRelationships: ConnectionRelationships;
  calculationState: CalculationState;

  // Fitting-specific calculation properties
  pressureLossCoefficient: number; // K-factor for pressure loss calculations
  fittingGeometry: {
    bendRadius?: number; // For elbows
    angle?: number; // Bend angle in degrees
    branchAngle?: number; // For tees and wyes
    reductionRatio?: number; // For reducers
  };

  // SMACNA compliance properties
  smacnaCompliant: boolean;
  smacnaClassification?: string;
  installationNotes?: string[];

  // System integration properties
  systemId?: string; // ID of the HVAC system this fitting belongs to
  isAutoGenerated: boolean; // True if fitting was automatically generated by connection logic
}

// Equipment interface for HVAC components - Enhanced for real-time calculations
export interface Equipment {
  id: string;
  type: 'Fan' | 'AHU' | 'VAV Box' | 'Damper' | 'Filter' | 'Coil' | 'Custom';
  position: Vector3;
  rotation: Euler;
  dimensions: {
    width: number;
    height: number;
    depth: number;
  };
  properties: {
    cfmCapacity: number;
    staticPressureCapacity: number;
    model?: string;
    manufacturer?: string;
    powerConsumption?: number;
    efficiency?: number; // Equipment efficiency (0-1)
    pressureLossCoefficient?: number; // Pressure loss through equipment
  };
  material: string;

  // Enhanced properties for real-time calculation connectivity
  flowProperties: FlowProperties;
  connectionRelationships: ConnectionRelationships;
  calculationState: CalculationState;

  // Connection points for HVAC system integration
  connectionPoints: ConnectionPoint[];

  // Equipment-specific calculation properties
  operatingConditions: {
    currentAirflow: number; // Current operating CFM
    currentPressure: number; // Current operating pressure
    currentEfficiency: number; // Current operating efficiency
    loadPercentage: number; // Percentage of capacity being used
  };

  // System integration properties
  systemId?: string; // ID of the HVAC system this equipment belongs to
  controlStrategy?: 'constant_volume' | 'variable_volume' | 'demand_controlled';
  isSource: boolean; // True if this equipment is an airflow source (fan, AHU)
  isTerminal: boolean; // True if this equipment is a terminal device (VAV, diffuser)
}

// Transition fitting for size/shape changes
export interface TransitionFitting extends DuctFitting {
  type: 'transition';
  transitionType: 'rect-to-rect' | 'round-to-round' | 'rect-to-round' | 'round-to-rect';
  length: number; // Calculated from SMACNA 2.5:1 slope ratio
  slopeRatio: number;
}

// Elbow fitting for direction changes
export interface ElbowFitting extends DuctFitting {
  type: 'elbow';
  elbowType: 'rectangular' | 'round';
  angle: 30 | 45 | 90; // Restricted angles for snapping
  centerlineRadius: number; // Based on SMACNA guidelines
}

// Main Canvas3D component props
export interface Canvas3DProps {
  segments: DuctSegment[];
  equipment?: Equipment[];
  fittings?: DuctFitting[];
  selectedIds?: string[];
  onSegmentAdd?: (segment: DuctSegment) => void;
  onSegmentUpdate?: (id: string, segment: Partial<DuctSegment>) => void;
  onSegmentDelete?: (id: string) => void;
  onEquipmentAdd?: (equipment: Equipment) => void;
  onFittingAdd?: (fitting: DuctFitting) => void;
  onSelectionChange?: (selectedIds: string[]) => void;
  onCameraChange?: (position: Vector3, target: Vector3) => void;
  className?: string;
  showGrid?: boolean;
  showGizmo?: boolean;
  showLabels?: boolean;
  showDimensions?: boolean;
  enableControls?: boolean;
  enableDrawing?: boolean;
  drawingTool?: any;
  performanceMode?: boolean;
}

// Drawing tool types
export interface DrawingTool {
  id: string;
  label: string;
  icon: React.ComponentType;
  active: boolean;
  onClick: () => void;
}

// Camera control types
export interface CameraState {
  position: Vector3;
  target: Vector3;
  zoom: number;
}

// Performance configuration
export interface PerformanceConfig {
  enableShadows: boolean;
  enableAntialiasing: boolean;
  pixelRatio: number;
  frameloop: 'always' | 'demand' | 'never';
  powerPreference: 'default' | 'high-performance' | 'low-power';
}

// Selection state
export interface SelectionState {
  selectedIds: string[];
  hoveredId: string | null;
  multiSelect: boolean;
  selectionBox: {
    start: Vector3 | null;
    end: Vector3 | null;
    active: boolean;
  };
}

// Measurement types
export interface Measurement {
  id: string;
  type: 'distance' | 'area' | 'volume';
  points: Vector3[];
  value: number;
  unit: string;
  label?: string;
}

// Grid configuration
export interface GridConfig {
  visible: boolean;
  size: number;
  divisions: number;
  color: string;
  colorCenterLine: string;
  colorGrid: string;
  fadeDistance: number;
  infiniteGrid: boolean;
}

// Environment settings
export interface EnvironmentConfig {
  preset: 'sunset' | 'dawn' | 'night' | 'warehouse' | 'forest' | 'apartment' | 'studio' | 'city' | 'park' | 'lobby';
  background: boolean | string;
  blur: number;
  intensity: number;
}

// Lighting configuration
export interface LightingConfig {
  ambientIntensity: number;
  ambient: {
    intensity: number;
    color: string;
  };
  directional: {
    intensity: number;
    color: string;
    position: Vector3;
    castShadow: boolean;
  };
  point: {
    intensity: number;
    color: string;
    position: Vector3;
    distance: number;
    decay: number;
  };
}

// Material properties
export interface MaterialConfig {
  metalness: number;
  roughness: number;
  color: string;
  opacity: number;
  transparent: boolean;
  wireframe: boolean;
}

// Animation state
export interface AnimationState {
  isAnimating: boolean;
  duration: number;
  easing: string;
  target: {
    position?: Vector3;
    rotation?: Euler;
    scale?: Vector3;
  };
}

// Validation result types
export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  suggestions: string[];
}

// Connection validation result
export interface ConnectionValidationResult extends ValidationResult {
  compatibilityScore: number;
  requiredFittings: DuctFitting[];
}

// SMACNA standards constants
export interface SMACNAStandards {
  TRANSITION_SLOPE_RATIO: number;
  ROUND_ELBOW_RADIUS_RATIO: number;
  RECTANGULAR_ELBOW_RADIUS_RATIO: number;
  MIN_DUCT_VELOCITY: number;
  MAX_DUCT_VELOCITY: number;
  STANDARD_GAUGES: number[];
}

// Export utility types
export type DuctShape = 'rectangular' | 'round';
export type DuctType = 'supply' | 'return' | 'exhaust';
export type FittingType = 'transition' | 'elbow';
export type EquipmentType = 'Fan' | 'AHU' | 'VAV Box' | 'Damper' | 'Filter' | 'Coil' | 'Custom';
export type ConnectionStatus = 'available' | 'connected' | 'blocked';
export type TransitionType = 'rect-to-rect' | 'round-to-round' | 'rect-to-round' | 'round-to-rect';
export type ElbowType = 'rectangular' | 'round';
export type ElbowAngle = 30 | 45 | 90;
