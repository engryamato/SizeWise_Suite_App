# Pytest Configuration for SizeWise Suite Backend Testing
#
# Comprehensive configuration for unit, integration, and performance testing including:
# - Test discovery and collection
# - Coverage reporting
# - Async testing support
# - Database testing
# - Performance benchmarks

[tool:pytest]
# Test discovery
testpaths = tests/backend tests/integration/backend
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts = 
    # Verbose output
    -v
    # Show local variables in tracebacks
    --tb=short
    # Show summary of all tests
    -ra
    # Strict mode for markers and config
    --strict-markers
    --strict-config
    # Coverage reporting
    --cov=backend
    --cov-report=html:coverage/backend
    --cov-report=xml:coverage/backend.xml
    --cov-report=term-missing
    --cov-report=json:coverage/backend.json
    # Coverage thresholds
    --cov-fail-under=85
    # Parallel execution
    -n auto
    # Disable warnings
    --disable-warnings
    # JUnit XML output for CI
    --junit-xml=test-results/backend-junit.xml
    # HTML report
    --html=test-results/backend-report.html
    --self-contained-html

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    slow: Slow running tests
    database: Tests requiring database
    mongodb: Tests requiring MongoDB
    postgresql: Tests requiring PostgreSQL
    redis: Tests requiring Redis
    api: API endpoint tests
    calculations: HVAC calculation tests
    monitoring: Monitoring system tests
    collaboration: Collaboration feature tests
    ai: AI optimization tests
    analytics: Analytics dashboard tests
    auth: Authentication tests
    security: Security tests
    asyncio: Async tests

# Async testing
asyncio_mode = auto

# Test timeout (in seconds)
timeout = 300

# Timeout method
timeout_method = thread

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*
    ignore::UserWarning:urllib3.*

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-results/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test collection
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Cache
cache_dir = .pytest_cache

# Required plugins
required_plugins = 
    pytest-cov>=4.0.0
    pytest-asyncio>=0.21.0
    pytest-xdist>=3.0.0
    pytest-html>=3.1.0
    pytest-timeout>=2.1.0
    pytest-mock>=3.10.0
    pytest-benchmark>=4.0.0

# Environment variables for testing
env = 
    ENVIRONMENT = test
    DATABASE_URL = postgresql://test:test@localhost:5432/sizewise_test
    MONGODB_URL = mongodb://localhost:27017/sizewise_test
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key-for-testing-only
    JWT_SECRET = test-jwt-secret-for-testing-only
    TESTING = true
    LOG_LEVEL = DEBUG
