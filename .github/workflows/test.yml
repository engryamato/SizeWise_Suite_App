name: Quick CI Tests

on:
  push:
    branches: ["main", "develop", "security-patches-phase1"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Environment variables for consistent configuration
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  NODE_ENV: test

jobs:
  # Quick smoke tests for fast feedback
  quick-checks:
    name: Quick Checks (Lint & Type)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy

      - name: Frontend type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Frontend lint check
        working-directory: ./frontend
        run: npm run lint

      - name: Python lint check
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          mypy . --ignore-missing-imports

  frontend-tests:
    name: Frontend Tests (Node.js ${{ matrix.node-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-checks
    strategy:
      matrix:
        node-version: ["18.x", "20.x", "22.x"]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    defaults:
      run:
        working-directory: "./frontend"
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Cache Jest cache
        uses: actions/cache@v4
        with:
          path: frontend/node_modules/.cache/jest
          key: jest-cache-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            jest-cache-${{ runner.os }}-${{ matrix.node-version }}-
            jest-cache-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Verify React version (should be 18.x)
        run: |
          REACT_VERSION=$(npm list react --depth=0 --json | jq -r '.dependencies.react.version')
          echo "React version: $REACT_VERSION"
          if [[ ! $REACT_VERSION =~ ^18\. ]]; then
            echo "❌ Expected React 18.x, got $REACT_VERSION"
            exit 1
          fi
          echo "✅ React version check passed"

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Next.js build validation
        env:
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN }}
        run: npm run build

      - name: Run Jest tests with coverage
        env:
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN }}
        run: npm run test:coverage

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage-node${{ matrix.node-version }}-${{ matrix.os }}
          path: "frontend/coverage"
          retention-days: 30

  backend-tests:
    name: Backend Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: quick-checks
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            backend/requirements.txt
            auth-server/requirements.txt

      - name: Cache pytest cache
        uses: actions/cache@v4
        with:
          path: .pytest_cache
          key: pytest-cache-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt', 'backend/requirements.txt') }}
          restore-keys: |
            pytest-cache-${{ runner.os }}-${{ matrix.python-version }}-
            pytest-cache-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi
          if [ -f auth-server/requirements.txt ]; then
            pip install -r auth-server/requirements.txt
          fi

      - name: Install code quality tools
        run: |
          pip install black flake8 mypy

      - name: Run Black formatting check
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Run Flake8 linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Run mypy type checking
        run: |
          mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

      - name: Run Python tests with coverage
        run: |
          python -m pytest --cov=. --cov-report=xml -v --tb=short

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-python${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml
          retention-days: 30

  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          cd "frontend" && npm ci --legacy-peer-deps
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run npm audit
        working-directory: "./frontend"
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Python safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: ${{ !inputs.skip_e2e }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install frontend dependencies
        working-directory: "./frontend"
        run: npm ci --legacy-peer-deps

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        working-directory: "./frontend"
        run: npx playwright install --with-deps chromium

      - name: Build frontend
        working-directory: "./frontend"
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: npm run build

      - name: Test backend startup
        run: |
          python run_backend.py &
          sleep 10
          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -f http://localhost:5000/api/health; then
              echo "✅ Backend is ready!"
              break
            fi
            echo "⏳ Waiting for backend... ($i/30)"
            sleep 2
          done

      - name: Start frontend server
        working-directory: "./frontend"
        run: |
          npm run start &
          sleep 15
          # Verify frontend is ready
          for i in {1..15}; do
            if curl -f http://localhost:3000; then
              echo "✅ Frontend is ready!"
              break
            fi
            echo "⏳ Waiting for frontend... ($i/15)"
            sleep 2
          done

      - name: Run E2E tests
        working-directory: "./frontend"
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            "frontend/test-results/"
            "frontend/playwright-report/"
          retention-days: 30

  test-summary:
    name: Test Summary & Status Check
    runs-on: ubuntu-latest
    needs:
      [quick-checks, frontend-tests, backend-tests, security-scan, e2e-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Quick checks
          if [[ "${{ needs.quick-checks.result }}" == "success" ]]; then
            echo "✅ **Quick Checks**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quick Checks**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # Frontend tests
          if [[ "${{ needs.frontend-tests.result }}" == "success" ]]; then
            echo "✅ **Frontend Tests**: PASSED (Node.js 18.x, 20.x)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # Backend tests
          if [[ "${{ needs.backend-tests.result }}" == "success" ]]; then
            echo "✅ **Backend Tests**: PASSED (Python 3.9, 3.10, 3.11)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # Security scan
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ **Security Scan**: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
          fi

          # E2E tests
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
            echo "✅ **E2E Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.e2e-tests.result }}" == "skipped" ]]; then
            echo "⏭️ **E2E Tests**: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Reports Available:" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend coverage (Node.js 18.x, 20.x)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend coverage (Python 3.9, 3.10, 3.11)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.quick-checks.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.backend-tests.result }}" == "success" ]]; then
            echo "**🎉 Overall Status: READY FOR REVIEW**" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Note**: For comprehensive testing including performance and security tests, check the 'Comprehensive Testing Pipeline' workflow." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "**❌ Overall Status: NEEDS ATTENTION**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
