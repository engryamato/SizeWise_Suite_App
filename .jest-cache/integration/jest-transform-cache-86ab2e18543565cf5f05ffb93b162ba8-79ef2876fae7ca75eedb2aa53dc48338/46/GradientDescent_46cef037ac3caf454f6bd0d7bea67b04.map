{"version":3,"names":["cov_2qpojs2dt6","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SystemOptimizationTypes_1","require","GradientDescent","constructor","parameters","currentState","bestSolution","history","evaluationCount","maxIterations","learningRate","learningRateMin","learningRateMax","variant","momentumCoefficient","adamBeta1","adamBeta2","adamEpsilon","rmspropDecayRate","rmspropEpsilon","gradientMethod","finiteDifferenceStep","adaptiveLearningRate","lineSearch","lineSearchMethod","constraintHandling","penaltyCoefficient","convergenceTolerance","gradientTolerance","seedValue","random","createSeededRandom","Math","optimize","problem","objectiveFunction","constraintFunctions","startTime","performance","now","validateProblem","initializeAlgorithm","createInitialSolution","shouldTerminate","performIteration","updateHistory","adaptLearningRate","createOptimizationResult","error","console","hasDiscreteVariables","variables","some","v","discreteValues","length","warn","log","initialSolution","createRandomSolution","evaluateSolution","numVariables","solution","gradient","Array","fill","momentum","adamM","adamV","rmspropV","adagradG","iteration","gradientNorm","stepSize","functionValue","fitness","variable","randomIndex","floor","id","min","bounds","minimum","max","maximum","generateSolutionId","objectiveValues","constraintViolations","feasible","systemConfiguration","performanceMetrics","solutionToVariables","objectiveValue","objectives","i","violation","push","constraintId","violationType","currentValue","requiredValue","severity","penalty","every","totalPenalty","filter","reduce","sum","Number","MAX_VALUE","variableTemplates","map","template","computeGradient","updateSolution","projectSolution","currentVariables","h","originalValue","forwardValue","backwardValue","forwardVal","backwardVal","sqrt","g","stepDirection","computeStepDirection","performLineSearch","newVariables","newValue","Infinity","newSolution","beta1","beta2","epsilon","t","mHat","pow","vHat","decay","eps","adagradEps","armijoLineSearch","wolfeLineSearch","goldenSectionLineSearch","c1","alpha","maxBacktrack","gradientDotDirection","testVariables","createTestVariables","testValue","phi","resphi","a","tol","x1","x2","f1","evaluateAtStep","f2","abs","projectedVariables","recentHistory","slice","functionImprovement","bestFitness","averageFitness","worstFitness","diversity","timestamp","Date","executionTime","statistics","totalIterations","totalEvaluations","convergenceIteration","bestFitnessHistory","averageFitnessHistory","diversityHistory","constraintViolationHistory","algorithmSpecificStats","finalLearningRate","finalGradientNorm","finalStepSize","optimizationHistory","iterations","populationHistory","parameterHistory","convergenceMetrics","problemId","status","OptimizationStatus","CONVERGED","analysis","recommendations","warnings","errors","toString","substr","seed","state","exports"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/algorithms/GradientDescent.ts"],"sourcesContent":["/**\n * Gradient Descent Algorithm Implementation for System Optimization\n * \n * Implements gradient descent optimization with:\n * - Multiple variants (standard, momentum, Adam, RMSprop)\n * - Numerical gradient computation with finite differences\n * - Adaptive learning rate and step size control\n * - Line search optimization\n * - Constraint handling with projected gradients\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\nimport {\n  OptimizationSolution,\n  OptimizationVariable,\n  OptimizationProblem,\n  OptimizationResult,\n  OptimizationStatus,\n  OptimizationStatistics,\n  OptimizationHistory,\n  IterationHistory,\n  SolutionPerformanceMetrics,\n  ObjectiveFunctionType,\n  ConstraintFunctionType\n} from '../types/SystemOptimizationTypes';\n\nexport interface GradientDescentParameters {\n  maxIterations: number;\n  learningRate: number;\n  learningRateMin: number;\n  learningRateMax: number;\n  variant: 'standard' | 'momentum' | 'adam' | 'rmsprop' | 'adagrad';\n  momentumCoefficient: number;\n  adamBeta1: number;\n  adamBeta2: number;\n  adamEpsilon: number;\n  rmspropDecayRate: number;\n  rmspropEpsilon: number;\n  gradientMethod: 'forward' | 'backward' | 'central';\n  finiteDifferenceStep: number;\n  adaptiveLearningRate: boolean;\n  lineSearch: boolean;\n  lineSearchMethod: 'armijo' | 'wolfe' | 'golden_section';\n  constraintHandling: 'penalty' | 'projection' | 'barrier';\n  penaltyCoefficient: number;\n  convergenceTolerance: number;\n  gradientTolerance: number;\n  seedValue?: number;\n}\n\nexport interface GradientState {\n  solution: OptimizationSolution;\n  gradient: number[];\n  momentum: number[];\n  adamM: number[];\n  adamV: number[];\n  rmspropV: number[];\n  adagradG: number[];\n  iteration: number;\n  learningRate: number;\n  gradientNorm: number;\n  stepSize: number;\n  functionValue: number;\n}\n\n/**\n * Gradient Descent optimizer for continuous optimization problems\n */\nexport class GradientDescent {\n  private parameters: GradientDescentParameters;\n  private currentState: GradientState | null = null;\n  private bestSolution: OptimizationSolution | null = null;\n  private history: IterationHistory[] = [];\n  private random: () => number;\n  private evaluationCount: number = 0;\n\n  constructor(parameters?: Partial<GradientDescentParameters>) {\n    this.parameters = {\n      maxIterations: 1000,\n      learningRate: 0.01,\n      learningRateMin: 1e-6,\n      learningRateMax: 1.0,\n      variant: 'adam',\n      momentumCoefficient: 0.9,\n      adamBeta1: 0.9,\n      adamBeta2: 0.999,\n      adamEpsilon: 1e-8,\n      rmspropDecayRate: 0.9,\n      rmspropEpsilon: 1e-8,\n      gradientMethod: 'central',\n      finiteDifferenceStep: 1e-6,\n      adaptiveLearningRate: true,\n      lineSearch: true,\n      lineSearchMethod: 'armijo',\n      constraintHandling: 'projection',\n      penaltyCoefficient: 1000,\n      convergenceTolerance: 1e-6,\n      gradientTolerance: 1e-6,\n      ...parameters\n    };\n\n    // Initialize random number generator\n    if (this.parameters.seedValue !== undefined) {\n      this.random = this.createSeededRandom(this.parameters.seedValue);\n    } else {\n      this.random = Math.random;\n    }\n  }\n\n  /**\n   * Main optimization method\n   */\n  public async optimize(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[]\n  ): Promise<OptimizationResult> {\n    const startTime = performance.now();\n    \n    try {\n      // Validate problem for gradient descent\n      this.validateProblem(problem);\n      \n      // Initialize algorithm\n      this.initializeAlgorithm(problem);\n      \n      // Create initial solution\n      await this.createInitialSolution(problem, objectiveFunction, constraintFunctions);\n      \n      // Main optimization loop\n      while (!this.shouldTerminate()) {\n        await this.performIteration(problem, objectiveFunction, constraintFunctions);\n        this.updateHistory();\n        \n        if (this.parameters.adaptiveLearningRate) {\n          this.adaptLearningRate();\n        }\n      }\n      \n      // Create final result\n      return this.createOptimizationResult(problem, startTime);\n      \n    } catch (error) {\n      console.error('Gradient descent optimization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Validate problem for gradient descent\n   */\n  private validateProblem(problem: OptimizationProblem): void {\n    // Check for continuous variables only\n    const hasDiscreteVariables = problem.variables.some(v => v.discreteValues && v.discreteValues.length > 0);\n    if (hasDiscreteVariables) {\n      console.warn('Gradient descent works best with continuous variables. Discrete variables will be treated as continuous.');\n    }\n  }\n\n  /**\n   * Initialize algorithm state\n   */\n  private initializeAlgorithm(problem: OptimizationProblem): void {\n    this.currentState = null;\n    this.bestSolution = null;\n    this.history = [];\n    this.evaluationCount = 0;\n    \n    console.log(`Initializing Gradient Descent (${this.parameters.variant}) with learning rate: ${this.parameters.learningRate}`);\n  }\n\n  /**\n   * Create initial solution\n   */\n  private async createInitialSolution(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[]\n  ): Promise<void> {\n    // Generate initial solution\n    const initialSolution = this.createRandomSolution(problem);\n    await this.evaluateSolution(initialSolution, problem, objectiveFunction, constraintFunctions);\n    \n    // Initialize gradient state\n    const numVariables = problem.variables.length;\n    this.currentState = {\n      solution: initialSolution,\n      gradient: new Array(numVariables).fill(0),\n      momentum: new Array(numVariables).fill(0),\n      adamM: new Array(numVariables).fill(0),\n      adamV: new Array(numVariables).fill(0),\n      rmspropV: new Array(numVariables).fill(0),\n      adagradG: new Array(numVariables).fill(0),\n      iteration: 0,\n      learningRate: this.parameters.learningRate,\n      gradientNorm: 0,\n      stepSize: 0,\n      functionValue: initialSolution.fitness\n    };\n    \n    this.bestSolution = { ...initialSolution };\n  }\n\n  /**\n   * Create a random solution\n   */\n  private createRandomSolution(problem: OptimizationProblem): OptimizationSolution {\n    const variables: { [variableId: string]: number | string } = {};\n    \n    for (const variable of problem.variables) {\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\n        // Discrete variable - select random value\n        const randomIndex = Math.floor(this.random() * variable.discreteValues.length);\n        variables[variable.id] = variable.discreteValues[randomIndex];\n      } else {\n        // Continuous variable\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : 0;\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : 1;\n        variables[variable.id] = min + this.random() * (max - min);\n      }\n    }\n    \n    return {\n      id: this.generateSolutionId(),\n      variables,\n      objectiveValues: {},\n      constraintViolations: [],\n      feasible: true,\n      fitness: 0,\n      systemConfiguration: problem.systemConfiguration,\n      performanceMetrics: {} as SolutionPerformanceMetrics\n    };\n  }\n\n  /**\n   * Evaluate solution fitness and constraints\n   */\n  private async evaluateSolution(\n    solution: OptimizationSolution,\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[]\n  ): Promise<void> {\n    try {\n      // Convert solution to optimization variables\n      const variables = this.solutionToVariables(solution, problem.variables);\n      \n      // Evaluate objective function\n      const objectiveValue = objectiveFunction(variables);\n      solution.fitness = objectiveValue;\n      \n      // Store objective values\n      if (problem.objectives.objectives.length > 0) {\n        solution.objectiveValues[problem.objectives.objectives[0].id] = objectiveValue;\n      }\n      \n      // Evaluate constraints\n      solution.constraintViolations = [];\n      for (let i = 0; i < constraintFunctions.length; i++) {\n        const violation = constraintFunctions[i](variables);\n        solution.constraintViolations.push({\n          constraintId: `constraint_${i}`,\n          violationType: violation > 0 ? 'inequality' : 'boundary',\n          currentValue: violation,\n          requiredValue: 0,\n          severity: violation > 0 ? 'major' : 'minor',\n          penalty: violation > 0 ? violation * this.parameters.penaltyCoefficient : 0\n        });\n      }\n      \n      // Check feasibility\n      solution.feasible = solution.constraintViolations.every(v => v.currentValue <= 0);\n      \n      // Apply constraint handling\n      if (!solution.feasible && this.parameters.constraintHandling === 'penalty') {\n        const totalPenalty = solution.constraintViolations\n          .filter(v => v.currentValue > 0)\n          .reduce((sum, v) => sum + v.penalty, 0);\n        solution.fitness += totalPenalty;\n      }\n      \n      this.evaluationCount++;\n      \n    } catch (error) {\n      console.error('Error evaluating solution:', error);\n      solution.fitness = Number.MAX_VALUE;\n      solution.feasible = false;\n    }\n  }\n\n  /**\n   * Convert solution to optimization variables\n   */\n  private solutionToVariables(solution: OptimizationSolution, variableTemplates: OptimizationVariable[]): OptimizationVariable[] {\n    return variableTemplates.map(template => ({\n      ...template,\n      currentValue: solution.variables[template.id]\n    }));\n  }\n\n  /**\n   * Perform one iteration of gradient descent\n   */\n  private async performIteration(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[]\n  ): Promise<void> {\n    if (!this.currentState) return;\n    \n    // Compute gradient\n    await this.computeGradient(problem, objectiveFunction, constraintFunctions);\n    \n    // Update solution based on variant\n    await this.updateSolution(problem, objectiveFunction, constraintFunctions);\n    \n    // Apply constraints if using projection\n    if (this.parameters.constraintHandling === 'projection') {\n      this.projectSolution(problem);\n    }\n    \n    // Update best solution\n    if (this.currentState.solution.fitness < this.bestSolution!.fitness) {\n      this.bestSolution = { ...this.currentState.solution };\n    }\n    \n    this.currentState.iteration++;\n  }\n\n  /**\n   * Compute numerical gradient\n   */\n  private async computeGradient(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[]\n  ): Promise<void> {\n    if (!this.currentState) return;\n    \n    const currentVariables = this.solutionToVariables(this.currentState.solution, problem.variables);\n    const h = this.parameters.finiteDifferenceStep;\n    \n    for (let i = 0; i < problem.variables.length; i++) {\n      const variable = problem.variables[i];\n      \n      // Skip discrete variables\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\n        this.currentState.gradient[i] = 0;\n        continue;\n      }\n      \n      const originalValue = currentVariables[i].currentValue as number;\n      \n      let gradient = 0;\n      \n      switch (this.parameters.gradientMethod) {\n        case 'forward':\n          // f'(x) ≈ (f(x+h) - f(x)) / h\n          currentVariables[i].currentValue = originalValue + h;\n          const forwardValue = objectiveFunction(currentVariables);\n          gradient = (forwardValue - this.currentState.functionValue) / h;\n          break;\n          \n        case 'backward':\n          // f'(x) ≈ (f(x) - f(x-h)) / h\n          currentVariables[i].currentValue = originalValue - h;\n          const backwardValue = objectiveFunction(currentVariables);\n          gradient = (this.currentState.functionValue - backwardValue) / h;\n          break;\n          \n        case 'central':\n          // f'(x) ≈ (f(x+h) - f(x-h)) / (2h)\n          currentVariables[i].currentValue = originalValue + h;\n          const forwardVal = objectiveFunction(currentVariables);\n          currentVariables[i].currentValue = originalValue - h;\n          const backwardVal = objectiveFunction(currentVariables);\n          gradient = (forwardVal - backwardVal) / (2 * h);\n          break;\n      }\n      \n      // Restore original value\n      currentVariables[i].currentValue = originalValue;\n      \n      this.currentState.gradient[i] = gradient;\n      this.evaluationCount += this.parameters.gradientMethod === 'central' ? 2 : 1;\n    }\n    \n    // Compute gradient norm\n    this.currentState.gradientNorm = Math.sqrt(\n      this.currentState.gradient.reduce((sum, g) => sum + g * g, 0)\n    );\n  }\n\n  /**\n   * Update solution based on gradient descent variant\n   */\n  private async updateSolution(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[]\n  ): Promise<void> {\n    if (!this.currentState) return;\n    \n    const stepDirection = this.computeStepDirection();\n    \n    // Determine step size\n    let stepSize = this.currentState.learningRate;\n    if (this.parameters.lineSearch) {\n      stepSize = await this.performLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\n    }\n    \n    // Update solution\n    const newVariables: { [variableId: string]: number | string } = {};\n    \n    for (let i = 0; i < problem.variables.length; i++) {\n      const variable = problem.variables[i];\n      const currentValue = this.currentState.solution.variables[variable.id];\n      \n      if (variable.discreteValues && variable.discreteValues.length > 0) {\n        // Keep discrete variables unchanged\n        newVariables[variable.id] = currentValue;\n      } else if (typeof currentValue === 'number') {\n        // Update continuous variables\n        const newValue = currentValue - stepSize * stepDirection[i];\n        \n        // Apply bounds\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\n        newVariables[variable.id] = Math.max(min, Math.min(max, newValue));\n      } else {\n        newVariables[variable.id] = currentValue;\n      }\n    }\n    \n    // Create new solution\n    const newSolution: OptimizationSolution = {\n      ...this.currentState.solution,\n      id: this.generateSolutionId(),\n      variables: newVariables\n    };\n    \n    // Evaluate new solution\n    await this.evaluateSolution(newSolution, problem, objectiveFunction, constraintFunctions);\n    \n    // Update state\n    this.currentState.solution = newSolution;\n    this.currentState.stepSize = stepSize;\n    this.currentState.functionValue = newSolution.fitness;\n  }\n\n  /**\n   * Compute step direction based on variant\n   */\n  private computeStepDirection(): number[] {\n    if (!this.currentState) return [];\n    \n    const gradient = this.currentState.gradient;\n    const stepDirection = new Array(gradient.length);\n    \n    switch (this.parameters.variant) {\n      case 'standard':\n        // Standard gradient descent: d = -∇f\n        for (let i = 0; i < gradient.length; i++) {\n          stepDirection[i] = gradient[i];\n        }\n        break;\n        \n      case 'momentum':\n        // Momentum: v = β*v + ∇f, d = v\n        for (let i = 0; i < gradient.length; i++) {\n          this.currentState.momentum[i] = this.parameters.momentumCoefficient * this.currentState.momentum[i] + gradient[i];\n          stepDirection[i] = this.currentState.momentum[i];\n        }\n        break;\n        \n      case 'adam':\n        // Adam optimizer\n        const beta1 = this.parameters.adamBeta1;\n        const beta2 = this.parameters.adamBeta2;\n        const epsilon = this.parameters.adamEpsilon;\n        const t = this.currentState.iteration + 1;\n        \n        for (let i = 0; i < gradient.length; i++) {\n          // Update biased first moment estimate\n          this.currentState.adamM[i] = beta1 * this.currentState.adamM[i] + (1 - beta1) * gradient[i];\n          \n          // Update biased second raw moment estimate\n          this.currentState.adamV[i] = beta2 * this.currentState.adamV[i] + (1 - beta2) * gradient[i] * gradient[i];\n          \n          // Compute bias-corrected first moment estimate\n          const mHat = this.currentState.adamM[i] / (1 - Math.pow(beta1, t));\n          \n          // Compute bias-corrected second raw moment estimate\n          const vHat = this.currentState.adamV[i] / (1 - Math.pow(beta2, t));\n          \n          // Update step direction\n          stepDirection[i] = mHat / (Math.sqrt(vHat) + epsilon);\n        }\n        break;\n        \n      case 'rmsprop':\n        // RMSprop\n        const decay = this.parameters.rmspropDecayRate;\n        const eps = this.parameters.rmspropEpsilon;\n        \n        for (let i = 0; i < gradient.length; i++) {\n          this.currentState.rmspropV[i] = decay * this.currentState.rmspropV[i] + (1 - decay) * gradient[i] * gradient[i];\n          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.rmspropV[i]) + eps);\n        }\n        break;\n        \n      case 'adagrad':\n        // Adagrad\n        const adagradEps = this.parameters.adamEpsilon;\n        \n        for (let i = 0; i < gradient.length; i++) {\n          this.currentState.adagradG[i] += gradient[i] * gradient[i];\n          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.adagradG[i]) + adagradEps);\n        }\n        break;\n        \n      default:\n        // Default to standard gradient descent\n        for (let i = 0; i < gradient.length; i++) {\n          stepDirection[i] = gradient[i];\n        }\n    }\n    \n    return stepDirection;\n  }\n\n  /**\n   * Perform line search to find optimal step size\n   */\n  private async performLineSearch(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[],\n    stepDirection: number[]\n  ): Promise<number> {\n    if (!this.currentState) return this.parameters.learningRate;\n    \n    switch (this.parameters.lineSearchMethod) {\n      case 'armijo':\n        return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\n      case 'wolfe':\n        return this.wolfeLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\n      case 'golden_section':\n        return this.goldenSectionLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\n      default:\n        return this.parameters.learningRate;\n    }\n  }\n\n  /**\n   * Armijo line search\n   */\n  private async armijoLineSearch(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[],\n    stepDirection: number[]\n  ): Promise<number> {\n    if (!this.currentState) return this.parameters.learningRate;\n    \n    const c1 = 1e-4; // Armijo constant\n    let alpha = this.parameters.learningRate;\n    const maxBacktrack = 20;\n    \n    const currentValue = this.currentState.functionValue;\n    const gradientDotDirection = this.currentState.gradient.reduce((sum, g, i) => sum + g * stepDirection[i], 0);\n    \n    for (let i = 0; i < maxBacktrack; i++) {\n      // Test step\n      const testVariables = this.createTestVariables(problem, stepDirection, alpha);\n      const testValue = objectiveFunction(testVariables);\n      this.evaluationCount++;\n      \n      // Armijo condition\n      if (testValue <= currentValue - c1 * alpha * gradientDotDirection) {\n        return alpha;\n      }\n      \n      alpha *= 0.5; // Backtrack\n    }\n    \n    return alpha;\n  }\n\n  /**\n   * Wolfe line search (simplified)\n   */\n  private async wolfeLineSearch(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[],\n    stepDirection: number[]\n  ): Promise<number> {\n    // Simplified implementation - use Armijo for now\n    return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\n  }\n\n  /**\n   * Golden section line search\n   */\n  private async goldenSectionLineSearch(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    constraintFunctions: ConstraintFunctionType[],\n    stepDirection: number[]\n  ): Promise<number> {\n    const phi = (1 + Math.sqrt(5)) / 2; // Golden ratio\n    const resphi = 2 - phi;\n    \n    let a = 0;\n    let b = this.parameters.learningRate * 2;\n    const tol = 1e-6;\n    \n    // Find initial bracket\n    let x1 = a + resphi * (b - a);\n    let x2 = a + (1 - resphi) * (b - a);\n    \n    let f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);\n    let f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);\n    \n    while (Math.abs(b - a) > tol) {\n      if (f1 < f2) {\n        b = x2;\n        x2 = x1;\n        f2 = f1;\n        x1 = a + resphi * (b - a);\n        f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);\n      } else {\n        a = x1;\n        x1 = x2;\n        f1 = f2;\n        x2 = a + (1 - resphi) * (b - a);\n        f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);\n      }\n    }\n    \n    return (a + b) / 2;\n  }\n\n  /**\n   * Create test variables for line search\n   */\n  private createTestVariables(problem: OptimizationProblem, stepDirection: number[], alpha: number): OptimizationVariable[] {\n    if (!this.currentState) return [];\n    \n    return problem.variables.map((variable, i) => {\n      const currentValue = this.currentState!.solution.variables[variable.id];\n      \n      if (typeof currentValue === 'number') {\n        const newValue = currentValue - alpha * stepDirection[i];\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\n        \n        return {\n          ...variable,\n          currentValue: Math.max(min, Math.min(max, newValue))\n        };\n      } else {\n        return {\n          ...variable,\n          currentValue\n        };\n      }\n    });\n  }\n\n  /**\n   * Evaluate function at specific step size\n   */\n  private evaluateAtStep(\n    problem: OptimizationProblem,\n    objectiveFunction: ObjectiveFunctionType,\n    stepDirection: number[],\n    alpha: number\n  ): number {\n    const testVariables = this.createTestVariables(problem, stepDirection, alpha);\n    this.evaluationCount++;\n    return objectiveFunction(testVariables);\n  }\n\n  /**\n   * Project solution onto feasible region\n   */\n  private projectSolution(problem: OptimizationProblem): void {\n    if (!this.currentState) return;\n    \n    // Simple box constraint projection\n    const projectedVariables: { [variableId: string]: number | string } = {};\n    \n    for (const variable of problem.variables) {\n      const currentValue = this.currentState.solution.variables[variable.id];\n      \n      if (typeof currentValue === 'number') {\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\n        projectedVariables[variable.id] = Math.max(min, Math.min(max, currentValue));\n      } else {\n        projectedVariables[variable.id] = currentValue;\n      }\n    }\n    \n    this.currentState.solution.variables = projectedVariables;\n  }\n\n  /**\n   * Adapt learning rate based on progress\n   */\n  private adaptLearningRate(): void {\n    if (!this.currentState) return;\n    \n    // Simple adaptive scheme based on gradient norm\n    if (this.currentState.gradientNorm > 1.0) {\n      // Large gradient - decrease learning rate\n      this.currentState.learningRate = Math.max(\n        this.parameters.learningRateMin,\n        this.currentState.learningRate * 0.9\n      );\n    } else if (this.currentState.gradientNorm < 0.1) {\n      // Small gradient - increase learning rate\n      this.currentState.learningRate = Math.min(\n        this.parameters.learningRateMax,\n        this.currentState.learningRate * 1.1\n      );\n    }\n  }\n\n  /**\n   * Check termination criteria\n   */\n  private shouldTerminate(): boolean {\n    if (!this.currentState) return true;\n    \n    // Maximum iterations\n    if (this.currentState.iteration >= this.parameters.maxIterations) {\n      return true;\n    }\n    \n    // Gradient tolerance\n    if (this.currentState.gradientNorm < this.parameters.gradientTolerance) {\n      return true;\n    }\n    \n    // Function value convergence\n    if (this.history.length >= 10) {\n      const recentHistory = this.history.slice(-10);\n      const functionImprovement = recentHistory[0].bestFitness - recentHistory[recentHistory.length - 1].bestFitness;\n      \n      if (Math.abs(functionImprovement) < this.parameters.convergenceTolerance) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Update optimization history\n   */\n  private updateHistory(): void {\n    if (!this.currentState) return;\n    \n    const history: IterationHistory = {\n      iteration: this.currentState.iteration,\n      bestFitness: this.bestSolution?.fitness || this.currentState.functionValue,\n      averageFitness: this.currentState.functionValue,\n      worstFitness: this.currentState.functionValue,\n      diversity: 0, // Not applicable for single solution\n      constraintViolations: this.currentState.solution.feasible ? 0 : 1,\n      timestamp: new Date()\n    };\n    \n    this.history.push(history);\n  }\n\n  /**\n   * Create optimization result\n   */\n  private createOptimizationResult(problem: OptimizationProblem, startTime: number): OptimizationResult {\n    const executionTime = performance.now() - startTime;\n    \n    const statistics: OptimizationStatistics = {\n      totalIterations: this.currentState?.iteration || 0,\n      totalEvaluations: this.evaluationCount,\n      convergenceIteration: this.currentState?.iteration || 0,\n      executionTime,\n      bestFitnessHistory: this.history.map(h => h.bestFitness),\n      averageFitnessHistory: this.history.map(h => h.averageFitness),\n      diversityHistory: this.history.map(h => h.diversity),\n      constraintViolationHistory: this.history.map(h => h.constraintViolations),\n      algorithmSpecificStats: {\n        variant: this.parameters.variant,\n        finalLearningRate: this.currentState?.learningRate || 0,\n        finalGradientNorm: this.currentState?.gradientNorm || 0,\n        finalStepSize: this.currentState?.stepSize || 0\n      }\n    };\n    \n    const optimizationHistory: OptimizationHistory = {\n      iterations: this.history,\n      populationHistory: [],\n      parameterHistory: [],\n      convergenceMetrics: []\n    };\n    \n    return {\n      problemId: problem.id,\n      status: OptimizationStatus.CONVERGED,\n      bestSolution: this.bestSolution!,\n      statistics,\n      history: optimizationHistory,\n      analysis: {},\n      recommendations: [],\n      warnings: [],\n      errors: []\n    };\n  }\n\n  // Utility methods\n  private generateSolutionId(): string {\n    return `gd_sol_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private createSeededRandom(seed: number): () => number {\n    let state = seed;\n    return () => {\n      state = (state * 9301 + 49297) % 233280;\n      return state / 233280;\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}