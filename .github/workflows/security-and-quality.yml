name: Security & Quality Checks

on:
  push:
    branches: ["main", "security-patches-phase1"]
  pull_request:
    branches: ["main", "develop"]
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM
  workflow_dispatch:
    inputs:
      skip_build_test:
        description: "Skip build test (already covered in other workflows)"
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Standardized environment variables across all workflows
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  NODE_ENV: test

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety bandit semgrep

      - name: Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Python safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Run Python linting
        run: |
          flake8 . --format=json --output-file=flake8-report.json
          mypy . --json-report mypy-report
        continue-on-error: true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            frontend/eslint-report.json
            flake8-report.json
            mypy-report/
          retention-days: 30

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install frontend dependencies
        run: |
          cd frontend && npm ci --legacy-peer-deps

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety

      - name: Run npm audit (fail on high/critical)
        run: |
          cd frontend
          npm audit --audit-level=high
        continue-on-error: false

      - name: Run Python Safety check (fail on critical)
        run: |
          safety check --json --output safety-report.json || true
          safety check --exit-code --severity critical
        continue-on-error: false

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript", "python"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies (for JavaScript analysis)
        if: matrix.language == 'javascript'
        run: |
          cd frontend && npm ci --legacy-peer-deps

      - name: Setup Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install Python dependencies (for Python analysis)
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  semgrep-scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep --config=auto --sarif --output=semgrep-results.sarif .
        continue-on-error: true

      - name: Upload Semgrep scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

  gitleaks-scan:
    name: GitLeaks Secret Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          config-path: .gitleaks.toml

  build-test:
    name: Build & Deployment Test
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_build_test != 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test backend startup
        run: |
          timeout 30s python run_backend.py || exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "✅ Backend started successfully (timed out as expected)"
            exit 0
          else
            echo "❌ Backend failed to start"
            exit 1
          fi

      - name: Check build artifacts
        run: |
          ls -la frontend/.next/ || ls -la frontend/out/
          echo "✅ Frontend build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-build-artifacts
          path: |
            frontend/.next/
            frontend/out/
          retention-days: 7
