{"file":"/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/SMACNAValidator.ts","mappings":"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","names":[],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/SMACNAValidator.ts"],"sourcesContent":["/**\n * SMACNAValidator - Pure Validation Functions for SMACNA Standards\n * \n * MISSION-CRITICAL: Pure TypeScript functions for SMACNA, ASHRAE, and NFPA compliance validation\n * Extracted from UI components for reusability and tier enforcement integration\n * \n * @see docs/implementation/tier-system/tier-boundaries-specification.md\n * @see docs/developer-guide/tier-implementation-checklist.md section 2.4\n */\n\n/**\n * Validation result structure\n */\nexport interface ValidationResult {\n  isValid: boolean;\n  compliant: boolean;\n  errors: string[];\n  warnings: string[];\n  recommendations: string[];\n  standardReference: string;\n  score: number; // 0-100, higher is better\n}\n\n/**\n * Calculation data for validation\n */\nexport interface CalculationData {\n  velocity: number; // FPM\n  frictionRate: number; // inches w.g. per 100 feet\n  ductType: 'round' | 'rectangular';\n  airflow: number; // CFM\n  diameter?: number; // inches (for round ducts)\n  width?: number; // inches (for rectangular ducts)\n  height?: number; // inches (for rectangular ducts)\n  aspectRatio?: number;\n  area: number; // sq ft\n  material?: string;\n  location?: 'occupied' | 'unoccupied';\n  application?: 'supply' | 'return' | 'exhaust' | 'grease';\n  pressure?: number; // inches w.g.\n  temperature?: number; // °F\n}\n\n/**\n * SMACNA standards configuration\n */\ninterface SMACNAStandards {\n  velocity: {\n    supply: { min: number; max: number; optimal: number };\n    return: { min: number; max: number; optimal: number };\n    exhaust: { min: number; max: number; optimal: number };\n  };\n  friction: {\n    low: number; // inches w.g. per 100 feet\n    medium: number;\n    high: number;\n    maximum: number;\n  };\n  aspectRatio: {\n    maximum: number;\n    optimal: number;\n    minimum: number;\n  };\n  minimumArea: number; // sq ft\n}\n\n/**\n * ASHRAE standards configuration\n */\ninterface ASHRAEStandards {\n  comfortVelocity: {\n    occupiedZone: number; // FPM\n    unoccupiedZone: number; // FPM\n  };\n  noiseVelocity: {\n    quiet: number; // FPM\n    moderate: number; // FPM\n    loud: number; // FPM\n  };\n}\n\n/**\n * NFPA standards configuration\n */\ninterface NFPAStandards {\n  greaseVelocity: {\n    minimum: number; // FPM\n    recommended: number; // FPM\n  };\n  greasePressure: {\n    maximum: number; // inches w.g.\n  };\n}\n\n/**\n * SMACNAValidator - Pure validation functions for HVAC standards\n * CRITICAL: No dependencies on UI, storage, or external services\n */\nexport class SMACNAValidator {\n  // SMACNA standards (2012 edition)\n  private static readonly SMACNA_STANDARDS: SMACNAStandards = {\n    velocity: {\n      supply: { min: 400, max: 2500, optimal: 1500 },\n      return: { min: 300, max: 2000, optimal: 1200 },\n      exhaust: { min: 500, max: 3000, optimal: 1800 }\n    },\n    friction: {\n      low: 0.05,      // Low pressure systems\n      medium: 0.08,   // Medium pressure systems\n      high: 0.12,     // High pressure systems\n      maximum: 0.20   // Maximum recommended\n    },\n    aspectRatio: {\n      maximum: 4.0,   // SMACNA maximum\n      optimal: 2.5,   // Optimal for fabrication\n      minimum: 1.0    // Square duct\n    },\n    minimumArea: 0.1  // Minimum duct area (sq ft)\n  };\n\n  // ASHRAE standards (2021 Fundamentals)\n  private static readonly ASHRAE_STANDARDS: ASHRAEStandards = {\n    comfortVelocity: {\n      occupiedZone: 750,    // FPM for occupied spaces\n      unoccupiedZone: 1500  // FPM for unoccupied spaces\n    },\n    noiseVelocity: {\n      quiet: 1000,     // Libraries, bedrooms\n      moderate: 1500,  // Offices, classrooms\n      loud: 2000       // Factories, mechanical rooms\n    }\n  };\n\n  // NFPA 96 standards (2021 edition)\n  private static readonly NFPA_STANDARDS: NFPAStandards = {\n    greaseVelocity: {\n      minimum: 1500,      // Minimum for grease removal\n      recommended: 2000   // Recommended for effective cleaning\n    },\n    greasePressure: {\n      maximum: 2.0        // Maximum static pressure\n    }\n  };\n\n  /**\n   * Validate calculation against SMACNA standards\n   * CRITICAL: Pure function with comprehensive validation\n   */\n  public static validateSMACNACompliance(data: CalculationData): ValidationResult {\n    const result: ValidationResult = {\n      isValid: true,\n      compliant: true,\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      standardReference: 'SMACNA HVAC Duct Construction Standards 2012',\n      score: 100\n    };\n\n    try {\n      // Velocity validation\n      this.validateVelocity(data, result);\n      \n      // Friction rate validation\n      this.validateFrictionRate(data, result);\n      \n      // Aspect ratio validation (for rectangular ducts)\n      if (data.ductType === 'rectangular' && data.aspectRatio) {\n        this.validateAspectRatio(data, result);\n      }\n      \n      // Area validation\n      this.validateArea(data, result);\n      \n      // Material and construction validation\n      this.validateConstruction(data, result);\n\n      // Calculate overall score\n      result.score = this.calculateSMACNAScore(data, result);\n      \n    } catch (error) {\n      result.errors.push(`SMACNA validation error: ${error.message}`);\n      result.isValid = false;\n      result.compliant = false;\n      result.score = 0;\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate calculation against ASHRAE standards\n   */\n  public static validateASHRAECompliance(data: CalculationData): ValidationResult {\n    const result: ValidationResult = {\n      isValid: true,\n      compliant: true,\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      standardReference: 'ASHRAE Fundamentals 2021 Chapter 21',\n      score: 100\n    };\n\n    try {\n      const { velocity, location = 'unoccupied' } = data;\n      const standards = this.ASHRAE_STANDARDS;\n\n      // Comfort velocity validation\n      if (location === 'occupied') {\n        if (velocity > standards.comfortVelocity.occupiedZone) {\n          result.warnings.push(\n            `Velocity ${velocity} FPM in occupied zone exceeds ASHRAE comfort limit of ${standards.comfortVelocity.occupiedZone} FPM`\n          );\n          result.score -= 20;\n        }\n      } else {\n        if (velocity > standards.comfortVelocity.unoccupiedZone) {\n          result.warnings.push(\n            `Velocity ${velocity} FPM exceeds ASHRAE general limit of ${standards.comfortVelocity.unoccupiedZone} FPM`\n          );\n          result.score -= 10;\n        }\n      }\n\n      // Noise velocity validation\n      if (velocity > standards.noiseVelocity.loud) {\n        result.warnings.push(\n          `High velocity ${velocity} FPM may cause excessive noise`\n        );\n        result.recommendations.push('Consider noise attenuation measures');\n        result.score -= 15;\n      } else if (velocity > standards.noiseVelocity.moderate) {\n        result.recommendations.push('Monitor noise levels in occupied spaces');\n        result.score -= 5;\n      }\n\n    } catch (error) {\n      result.errors.push(`ASHRAE validation error: ${error.message}`);\n      result.isValid = false;\n      result.compliant = false;\n      result.score = 0;\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate calculation against NFPA 96 standards (for grease ducts)\n   */\n  public static validateNFPACompliance(data: CalculationData): ValidationResult {\n    const result: ValidationResult = {\n      isValid: true,\n      compliant: true,\n      errors: [],\n      warnings: [],\n      recommendations: [],\n      standardReference: 'NFPA 96 Standard for Ventilation Control and Fire Protection 2021',\n      score: 100\n    };\n\n    try {\n      if (data.application !== 'grease') {\n        result.warnings.push('NFPA 96 validation only applies to grease exhaust systems');\n        return result;\n      }\n\n      const { velocity, pressure = 0 } = data;\n      const standards = this.NFPA_STANDARDS;\n\n      // Velocity validation for grease removal\n      if (velocity < standards.greaseVelocity.minimum) {\n        result.errors.push(\n          `Velocity ${velocity} FPM is below NFPA 96 minimum of ${standards.greaseVelocity.minimum} FPM for grease removal`\n        );\n        result.compliant = false;\n        result.score -= 50;\n      } else if (velocity < standards.greaseVelocity.recommended) {\n        result.warnings.push(\n          `Velocity ${velocity} FPM is below NFPA 96 recommended minimum of ${standards.greaseVelocity.recommended} FPM`\n        );\n        result.score -= 20;\n      }\n\n      // Pressure validation\n      if (pressure > standards.greasePressure.maximum) {\n        result.warnings.push(\n          `Static pressure ${pressure} inches w.g. exceeds NFPA 96 recommended maximum of ${standards.greasePressure.maximum} inches w.g.`\n        );\n        result.score -= 15;\n      }\n\n      // Additional grease duct requirements\n      if (data.ductType !== 'round') {\n        result.warnings.push('NFPA 96 recommends round ducts for grease exhaust systems');\n        result.recommendations.push('Consider using round duct for easier cleaning and maintenance');\n        result.score -= 10;\n      }\n\n    } catch (error) {\n      result.errors.push(`NFPA validation error: ${error.message}`);\n      result.isValid = false;\n      result.compliant = false;\n      result.score = 0;\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate against all applicable standards\n   */\n  public static validateAllStandards(data: CalculationData): Record<string, ValidationResult> {\n    const results: Record<string, ValidationResult> = {};\n\n    // Always validate SMACNA for general ductwork\n    results.smacna = this.validateSMACNACompliance(data);\n\n    // Validate ASHRAE for comfort considerations\n    results.ashrae = this.validateASHRAECompliance(data);\n\n    // Validate NFPA if it's a grease duct\n    if (data.application === 'grease') {\n      results.nfpa = this.validateNFPACompliance(data);\n    }\n\n    return results;\n  }\n\n  /**\n   * Validate velocity against SMACNA standards\n   */\n  private static validateVelocity(data: CalculationData, result: ValidationResult): void {\n    const { velocity, application = 'supply' } = data;\n    const limits = this.SMACNA_STANDARDS.velocity[application] || this.SMACNA_STANDARDS.velocity.supply;\n\n    if (velocity < limits.min) {\n      result.warnings.push(\n        `Velocity ${velocity} FPM is below SMACNA minimum of ${limits.min} FPM for ${application} duct`\n      );\n      result.score -= 15;\n    } else if (velocity > limits.max) {\n      result.errors.push(\n        `Velocity ${velocity} FPM exceeds SMACNA maximum of ${limits.max} FPM for ${application} duct`\n      );\n      result.compliant = false;\n      result.score -= 30;\n    } else if (velocity > limits.optimal * 1.2) {\n      result.warnings.push(\n        `Velocity ${velocity} FPM is above optimal range (${limits.optimal} FPM ±20%) for ${application} duct`\n      );\n      result.score -= 10;\n    } else if (velocity < limits.optimal * 0.8) {\n      result.recommendations.push(\n        `Consider reducing duct size to achieve optimal velocity of ${limits.optimal} FPM`\n      );\n      result.score -= 5;\n    }\n  }\n\n  /**\n   * Validate friction rate against SMACNA standards\n   */\n  private static validateFrictionRate(data: CalculationData, result: ValidationResult): void {\n    const { frictionRate } = data;\n    const standards = this.SMACNA_STANDARDS.friction;\n\n    if (frictionRate > standards.maximum) {\n      result.errors.push(\n        `Friction rate ${frictionRate.toFixed(3)} inches w.g./100ft exceeds SMACNA maximum of ${standards.maximum} inches w.g./100ft`\n      );\n      result.compliant = false;\n      result.score -= 25;\n    } else if (frictionRate > standards.high) {\n      result.warnings.push(\n        `High friction rate ${frictionRate.toFixed(3)} inches w.g./100ft may cause excessive pressure loss`\n      );\n      result.score -= 15;\n    } else if (frictionRate < standards.low) {\n      result.recommendations.push(\n        'Low friction rate indicates oversized duct - consider optimization for cost savings'\n      );\n      result.score -= 5;\n    }\n  }\n\n  /**\n   * Validate aspect ratio for rectangular ducts\n   */\n  private static validateAspectRatio(data: CalculationData, result: ValidationResult): void {\n    const { aspectRatio } = data;\n    if (!aspectRatio) return;\n\n    const standards = this.SMACNA_STANDARDS.aspectRatio;\n\n    if (aspectRatio > standards.maximum) {\n      result.errors.push(\n        `Aspect ratio ${aspectRatio.toFixed(1)}:1 exceeds SMACNA maximum of ${standards.maximum}:1`\n      );\n      result.compliant = false;\n      result.score -= 20;\n      result.recommendations.push('Consider using round duct or reducing aspect ratio');\n    } else if (aspectRatio > standards.optimal) {\n      result.warnings.push(\n        `Aspect ratio ${aspectRatio.toFixed(1)}:1 is above optimal range for fabrication and performance`\n      );\n      result.score -= 10;\n      result.recommendations.push('Aspect ratios between 2:1 and 3:1 are optimal');\n    } else if (aspectRatio < standards.minimum + 0.5) {\n      result.recommendations.push(\n        'Very low aspect ratio may be inefficient - consider increasing for better material utilization'\n      );\n      result.score -= 3;\n    }\n  }\n\n  /**\n   * Validate duct area\n   */\n  private static validateArea(data: CalculationData, result: ValidationResult): void {\n    const { area } = data;\n\n    if (area < this.SMACNA_STANDARDS.minimumArea) {\n      result.warnings.push(\n        `Very small duct area ${area.toFixed(2)} sq ft. Consider minimum duct size requirements.`\n      );\n      result.score -= 10;\n    }\n\n    // Check for extremely large areas that might indicate calculation errors\n    if (area > 100) {\n      result.warnings.push(\n        `Very large duct area ${area.toFixed(2)} sq ft. Verify calculation inputs.`\n      );\n      result.score -= 5;\n    }\n  }\n\n  /**\n   * Validate construction and material considerations\n   */\n  private static validateConstruction(data: CalculationData, result: ValidationResult): void {\n    const { material, ductType, diameter, width, height } = data;\n\n    // Material-specific recommendations\n    if (material === 'fiberglass' && data.velocity > 2000) {\n      result.warnings.push('High velocity with fiberglass ductwork may cause erosion');\n      result.recommendations.push('Consider metallic ductwork for high-velocity applications');\n      result.score -= 10;\n    }\n\n    // Size-specific recommendations\n    if (ductType === 'round' && diameter && diameter < 6) {\n      result.recommendations.push('Small round ducts may be difficult to clean and maintain');\n    }\n\n    if (ductType === 'rectangular' && width && height) {\n      const minDimension = Math.min(width, height);\n      if (minDimension < 6) {\n        result.warnings.push('Small duct dimensions may restrict airflow and be difficult to clean');\n        result.score -= 5;\n      }\n    }\n  }\n\n  /**\n   * Calculate overall SMACNA compliance score\n   */\n  private static calculateSMACNAScore(data: CalculationData, result: ValidationResult): number {\n    let score = 100;\n\n    // Deduct points for errors and warnings (already done in individual validations)\n    // Additional scoring based on optimization\n    const { velocity, application = 'supply' } = data;\n    const optimalVelocity = this.SMACNA_STANDARDS.velocity[application]?.optimal || 1500;\n\n    // Bonus points for being close to optimal velocity\n    const velocityDeviation = Math.abs(velocity - optimalVelocity) / optimalVelocity;\n    if (velocityDeviation < 0.1) {\n      score += 5; // Bonus for being very close to optimal\n    }\n\n    // Ensure score doesn't go below 0 or above 100\n    return Math.max(0, Math.min(100, score));\n  }\n\n  /**\n   * Get SMACNA standards reference data\n   */\n  public static getSMACNAStandards(): SMACNAStandards {\n    return JSON.parse(JSON.stringify(this.SMACNA_STANDARDS));\n  }\n\n  /**\n   * Get ASHRAE standards reference data\n   */\n  public static getASHRAEStandards(): ASHRAEStandards {\n    return JSON.parse(JSON.stringify(this.ASHRAE_STANDARDS));\n  }\n\n  /**\n   * Get NFPA standards reference data\n   */\n  public static getNFPAStandards(): NFPAStandards {\n    return JSON.parse(JSON.stringify(this.NFPA_STANDARDS));\n  }\n\n  /**\n   * Validate input data completeness\n   */\n  public static validateInputData(data: CalculationData): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!data.velocity || data.velocity <= 0) {\n      errors.push('Velocity must be greater than 0');\n    }\n\n    if (!data.airflow || data.airflow <= 0) {\n      errors.push('Airflow must be greater than 0');\n    }\n\n    if (!data.area || data.area <= 0) {\n      errors.push('Area must be greater than 0');\n    }\n\n    if (!['round', 'rectangular'].includes(data.ductType)) {\n      errors.push('Duct type must be \"round\" or \"rectangular\"');\n    }\n\n    if (data.ductType === 'rectangular') {\n      if (!data.width || data.width <= 0) {\n        errors.push('Width must be greater than 0 for rectangular ducts');\n      }\n      if (!data.height || data.height <= 0) {\n        errors.push('Height must be greater than 0 for rectangular ducts');\n      }\n    }\n\n    if (data.ductType === 'round') {\n      if (!data.diameter || data.diameter <= 0) {\n        errors.push('Diameter must be greater than 0 for round ducts');\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n}\n\nexport default SMACNAValidator;\n"],"version":3}