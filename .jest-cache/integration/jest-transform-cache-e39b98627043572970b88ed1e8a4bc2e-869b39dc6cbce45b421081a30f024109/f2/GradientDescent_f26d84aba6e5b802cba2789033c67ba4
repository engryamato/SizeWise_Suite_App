663cd92938f46e934ad388cfead3e593
"use strict";

/**
 * Gradient Descent Algorithm Implementation for System Optimization
 *
 * Implements gradient descent optimization with:
 * - Multiple variants (standard, momentum, Adam, RMSprop)
 * - Numerical gradient computation with finite differences
 * - Adaptive learning rate and step size control
 * - Line search optimization
 * - Constraint handling with projected gradients
 *
 * @version 3.0.0
 * @author SizeWise Suite Development Team
 */
/* istanbul ignore next */
function cov_hr0h2ihfp() {
  var path = "C:\\Users\\johnr\\Downloads\\SizeWise_Suite_App\\backend\\services\\calculations\\algorithms\\GradientDescent.ts";
  var hash = "aada9f28fc0bbc24d3345be3f9f99b95b0b42bc9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\johnr\\Downloads\\SizeWise_Suite_App\\backend\\services\\calculations\\algorithms\\GradientDescent.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 62
        }
      },
      "1": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "2": {
        start: {
          line: 17,
          column: 34
        },
        end: {
          line: 17,
          column: 77
        }
      },
      "3": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 33
        }
      },
      "4": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "5": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "6": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 49,
          column: 10
        }
      },
      "8": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "9": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 77
        }
      },
      "10": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 38
        }
      },
      "11": {
        start: {
          line: 62,
          column: 26
        },
        end: {
          line: 62,
          column: 43
        }
      },
      "12": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "13": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 42
        }
      },
      "14": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 46
        }
      },
      "15": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 94
        }
      },
      "16": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "17": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 93
        }
      },
      "18": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 73,
          column: 37
        }
      },
      "19": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 76,
          column: 17
        }
      },
      "20": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 45
        }
      },
      "21": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 69
        }
      },
      "22": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 74
        }
      },
      "23": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "24": {
        start: {
          line: 91,
          column: 37
        },
        end: {
          line: 91,
          column: 113
        }
      },
      "25": {
        start: {
          line: 91,
          column: 65
        },
        end: {
          line: 91,
          column: 112
        }
      },
      "26": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "27": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 133
        }
      },
      "28": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 33
        }
      },
      "29": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 33
        }
      },
      "30": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 26
        }
      },
      "31": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 33
        }
      },
      "32": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 134
        }
      },
      "33": {
        start: {
          line: 111,
          column: 32
        },
        end: {
          line: 111,
          column: 66
        }
      },
      "34": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 102
        }
      },
      "35": {
        start: {
          line: 114,
          column: 29
        },
        end: {
          line: 114,
          column: 53
        }
      },
      "36": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 128,
          column: 10
        }
      },
      "37": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "38": {
        start: {
          line: 135,
          column: 26
        },
        end: {
          line: 135,
          column: 28
        }
      },
      "39": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "40": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "41": {
        start: {
          line: 139,
          column: 36
        },
        end: {
          line: 139,
          column: 94
        }
      },
      "42": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 78
        }
      },
      "43": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 144,
          column: 101
        }
      },
      "44": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 101
        }
      },
      "45": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 75
        }
      },
      "46": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 158,
          column: 10
        }
      },
      "47": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 202,
          column: 9
        }
      },
      "48": {
        start: {
          line: 166,
          column: 30
        },
        end: {
          line: 166,
          column: 83
        }
      },
      "49": {
        start: {
          line: 168,
          column: 35
        },
        end: {
          line: 168,
          column: 63
        }
      },
      "50": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 169,
          column: 46
        }
      },
      "51": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "52": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 95
        }
      },
      "53": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 47
        }
      },
      "54": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "55": {
        start: {
          line: 176,
          column: 25
        },
        end: {
          line: 176,
          column: 26
        }
      },
      "56": {
        start: {
          line: 177,
          column: 34
        },
        end: {
          line: 177,
          column: 67
        }
      },
      "57": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 185,
          column: 19
        }
      },
      "58": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 94
        }
      },
      "59": {
        start: {
          line: 188,
          column: 73
        },
        end: {
          line: 188,
          column: 92
        }
      },
      "60": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "61": {
        start: {
          line: 191,
          column: 37
        },
        end: {
          line: 193,
          column: 59
        }
      },
      "62": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 51
        }
      },
      "63": {
        start: {
          line: 193,
          column: 40
        },
        end: {
          line: 193,
          column: 55
        }
      },
      "64": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 49
        }
      },
      "65": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 35
        }
      },
      "66": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 63
        }
      },
      "67": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 48
        }
      },
      "68": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 38
        }
      },
      "69": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 211,
          column: 12
        }
      },
      "70": {
        start: {
          line: 208,
          column: 50
        },
        end: {
          line: 211,
          column: 9
        }
      },
      "71": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "72": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 19
        }
      },
      "73": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 84
        }
      },
      "74": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 83
        }
      },
      "75": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "76": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 42
        }
      },
      "77": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "78": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 66
        }
      },
      "79": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 38
        }
      },
      "80": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 238,
          column: 19
        }
      },
      "81": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 19
        }
      },
      "82": {
        start: {
          line: 239,
          column: 33
        },
        end: {
          line: 239,
          column: 104
        }
      },
      "83": {
        start: {
          line: 240,
          column: 18
        },
        end: {
          line: 240,
          column: 54
        }
      },
      "84": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "85": {
        start: {
          line: 241,
          column: 21
        },
        end: {
          line: 241,
          column: 22
        }
      },
      "86": {
        start: {
          line: 242,
          column: 29
        },
        end: {
          line: 242,
          column: 49
        }
      },
      "87": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "88": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 50
        }
      },
      "89": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 25
        }
      },
      "90": {
        start: {
          line: 248,
          column: 34
        },
        end: {
          line: 248,
          column: 66
        }
      },
      "91": {
        start: {
          line: 249,
          column: 27
        },
        end: {
          line: 249,
          column: 28
        }
      },
      "92": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "93": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 253,
          column: 73
        }
      },
      "94": {
        start: {
          line: 254,
          column: 41
        },
        end: {
          line: 254,
          column: 76
        }
      },
      "95": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 84
        }
      },
      "96": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 26
        }
      },
      "97": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 73
        }
      },
      "98": {
        start: {
          line: 260,
          column: 42
        },
        end: {
          line: 260,
          column: 77
        }
      },
      "99": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 261,
          column: 85
        }
      },
      "100": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 26
        }
      },
      "101": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 73
        }
      },
      "102": {
        start: {
          line: 266,
          column: 39
        },
        end: {
          line: 266,
          column: 74
        }
      },
      "103": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 73
        }
      },
      "104": {
        start: {
          line: 268,
          column: 40
        },
        end: {
          line: 268,
          column: 75
        }
      },
      "105": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 68
        }
      },
      "106": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 26
        }
      },
      "107": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 61
        }
      },
      "108": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 53
        }
      },
      "109": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 89
        }
      },
      "110": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 278,
          column: 114
        }
      },
      "111": {
        start: {
          line: 278,
          column: 97
        },
        end: {
          line: 278,
          column: 108
        }
      },
      "112": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 285,
          column: 19
        }
      },
      "113": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 285,
          column: 19
        }
      },
      "114": {
        start: {
          line: 286,
          column: 30
        },
        end: {
          line: 286,
          column: 57
        }
      },
      "115": {
        start: {
          line: 288,
          column: 23
        },
        end: {
          line: 288,
          column: 53
        }
      },
      "116": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "117": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 116
        }
      },
      "118": {
        start: {
          line: 293,
          column: 29
        },
        end: {
          line: 293,
          column: 31
        }
      },
      "119": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "120": {
        start: {
          line: 294,
          column: 21
        },
        end: {
          line: 294,
          column: 22
        }
      },
      "121": {
        start: {
          line: 295,
          column: 29
        },
        end: {
          line: 295,
          column: 49
        }
      },
      "122": {
        start: {
          line: 296,
          column: 33
        },
        end: {
          line: 296,
          column: 82
        }
      },
      "123": {
        start: {
          line: 297,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "124": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 57
        }
      },
      "125": {
        start: {
          line: 301,
          column: 17
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "126": {
        start: {
          line: 303,
          column: 33
        },
        end: {
          line: 303,
          column: 75
        }
      },
      "127": {
        start: {
          line: 305,
          column: 28
        },
        end: {
          line: 305,
          column: 109
        }
      },
      "128": {
        start: {
          line: 306,
          column: 28
        },
        end: {
          line: 306,
          column: 108
        }
      },
      "129": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 83
        }
      },
      "130": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 57
        }
      },
      "131": {
        start: {
          line: 314,
          column: 28
        },
        end: {
          line: 318,
          column: 9
        }
      },
      "132": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 98
        }
      },
      "133": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 49
        }
      },
      "134": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 46
        }
      },
      "135": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 62
        }
      },
      "136": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 331,
          column: 22
        }
      },
      "137": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 331,
          column: 22
        }
      },
      "138": {
        start: {
          line: 332,
          column: 25
        },
        end: {
          line: 332,
          column: 51
        }
      },
      "139": {
        start: {
          line: 333,
          column: 30
        },
        end: {
          line: 333,
          column: 56
        }
      },
      "140": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 389,
          column: 9
        }
      },
      "141": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 339,
          column: 17
        }
      },
      "142": {
        start: {
          line: 337,
          column: 29
        },
        end: {
          line: 337,
          column: 30
        }
      },
      "143": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 338,
          column: 51
        }
      },
      "144": {
        start: {
          line: 340,
          column: 16
        },
        end: {
          line: 340,
          column: 22
        }
      },
      "145": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 346,
          column: 17
        }
      },
      "146": {
        start: {
          line: 343,
          column: 29
        },
        end: {
          line: 343,
          column: 30
        }
      },
      "147": {
        start: {
          line: 344,
          column: 20
        },
        end: {
          line: 344,
          column: 134
        }
      },
      "148": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 345,
          column: 69
        }
      },
      "149": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 22
        }
      },
      "150": {
        start: {
          line: 350,
          column: 30
        },
        end: {
          line: 350,
          column: 55
        }
      },
      "151": {
        start: {
          line: 351,
          column: 30
        },
        end: {
          line: 351,
          column: 55
        }
      },
      "152": {
        start: {
          line: 352,
          column: 32
        },
        end: {
          line: 352,
          column: 59
        }
      },
      "153": {
        start: {
          line: 353,
          column: 26
        },
        end: {
          line: 353,
          column: 57
        }
      },
      "154": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 365,
          column: 17
        }
      },
      "155": {
        start: {
          line: 354,
          column: 29
        },
        end: {
          line: 354,
          column: 30
        }
      },
      "156": {
        start: {
          line: 356,
          column: 20
        },
        end: {
          line: 356,
          column: 112
        }
      },
      "157": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 358,
          column: 126
        }
      },
      "158": {
        start: {
          line: 360,
          column: 33
        },
        end: {
          line: 360,
          column: 86
        }
      },
      "159": {
        start: {
          line: 362,
          column: 33
        },
        end: {
          line: 362,
          column: 86
        }
      },
      "160": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 74
        }
      },
      "161": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 22
        }
      },
      "162": {
        start: {
          line: 369,
          column: 30
        },
        end: {
          line: 369,
          column: 62
        }
      },
      "163": {
        start: {
          line: 370,
          column: 28
        },
        end: {
          line: 370,
          column: 58
        }
      },
      "164": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 374,
          column: 17
        }
      },
      "165": {
        start: {
          line: 371,
          column: 29
        },
        end: {
          line: 371,
          column: 30
        }
      },
      "166": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 132
        }
      },
      "167": {
        start: {
          line: 373,
          column: 20
        },
        end: {
          line: 373,
          column: 102
        }
      },
      "168": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 22
        }
      },
      "169": {
        start: {
          line: 378,
          column: 35
        },
        end: {
          line: 378,
          column: 62
        }
      },
      "170": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 382,
          column: 17
        }
      },
      "171": {
        start: {
          line: 379,
          column: 29
        },
        end: {
          line: 379,
          column: 30
        }
      },
      "172": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 79
        }
      },
      "173": {
        start: {
          line: 381,
          column: 20
        },
        end: {
          line: 381,
          column: 109
        }
      },
      "174": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 22
        }
      },
      "175": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 388,
          column: 17
        }
      },
      "176": {
        start: {
          line: 386,
          column: 29
        },
        end: {
          line: 386,
          column: 30
        }
      },
      "177": {
        start: {
          line: 387,
          column: 20
        },
        end: {
          line: 387,
          column: 51
        }
      },
      "178": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 29
        }
      },
      "179": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 397,
          column: 48
        }
      },
      "180": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 48
        }
      },
      "181": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "182": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 109
        }
      },
      "183": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 108
        }
      },
      "184": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 116
        }
      },
      "185": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 52
        }
      },
      "186": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 414,
          column: 48
        }
      },
      "187": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 414,
          column: 48
        }
      },
      "188": {
        start: {
          line: 415,
          column: 19
        },
        end: {
          line: 415,
          column: 23
        }
      },
      "189": {
        start: {
          line: 416,
          column: 20
        },
        end: {
          line: 416,
          column: 48
        }
      },
      "190": {
        start: {
          line: 417,
          column: 29
        },
        end: {
          line: 417,
          column: 31
        }
      },
      "191": {
        start: {
          line: 418,
          column: 29
        },
        end: {
          line: 418,
          column: 60
        }
      },
      "192": {
        start: {
          line: 419,
          column: 37
        },
        end: {
          line: 419,
          column: 116
        }
      },
      "193": {
        start: {
          line: 419,
          column: 86
        },
        end: {
          line: 419,
          column: 112
        }
      },
      "194": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 430,
          column: 9
        }
      },
      "195": {
        start: {
          line: 420,
          column: 21
        },
        end: {
          line: 420,
          column: 22
        }
      },
      "196": {
        start: {
          line: 422,
          column: 34
        },
        end: {
          line: 422,
          column: 89
        }
      },
      "197": {
        start: {
          line: 423,
          column: 30
        },
        end: {
          line: 423,
          column: 62
        }
      },
      "198": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 35
        }
      },
      "199": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 428,
          column: 13
        }
      },
      "200": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 29
        }
      },
      "201": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 429,
          column: 25
        }
      },
      "202": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 21
        }
      },
      "203": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 101
        }
      },
      "204": {
        start: {
          line: 444,
          column: 20
        },
        end: {
          line: 444,
          column: 42
        }
      },
      "205": {
        start: {
          line: 445,
          column: 23
        },
        end: {
          line: 445,
          column: 30
        }
      },
      "206": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 17
        }
      },
      "207": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 48
        }
      },
      "208": {
        start: {
          line: 448,
          column: 20
        },
        end: {
          line: 448,
          column: 24
        }
      },
      "209": {
        start: {
          line: 450,
          column: 17
        },
        end: {
          line: 450,
          column: 37
        }
      },
      "210": {
        start: {
          line: 451,
          column: 17
        },
        end: {
          line: 451,
          column: 43
        }
      },
      "211": {
        start: {
          line: 452,
          column: 17
        },
        end: {
          line: 452,
          column: 83
        }
      },
      "212": {
        start: {
          line: 453,
          column: 17
        },
        end: {
          line: 453,
          column: 83
        }
      },
      "213": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 469,
          column: 9
        }
      },
      "214": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 468,
          column: 13
        }
      },
      "215": {
        start: {
          line: 456,
          column: 16
        },
        end: {
          line: 456,
          column: 23
        }
      },
      "216": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 24
        }
      },
      "217": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 458,
          column: 24
        }
      },
      "218": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 42
        }
      },
      "219": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 460,
          column: 88
        }
      },
      "220": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 23
        }
      },
      "221": {
        start: {
          line: 464,
          column: 16
        },
        end: {
          line: 464,
          column: 24
        }
      },
      "222": {
        start: {
          line: 465,
          column: 16
        },
        end: {
          line: 465,
          column: 24
        }
      },
      "223": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 48
        }
      },
      "224": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 88
        }
      },
      "225": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 470,
          column: 27
        }
      },
      "226": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 477,
          column: 22
        }
      },
      "227": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 22
        }
      },
      "228": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 495,
          column: 11
        }
      },
      "229": {
        start: {
          line: 479,
          column: 33
        },
        end: {
          line: 479,
          column: 82
        }
      },
      "230": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 494,
          column: 13
        }
      },
      "231": {
        start: {
          line: 481,
          column: 33
        },
        end: {
          line: 481,
          column: 72
        }
      },
      "232": {
        start: {
          line: 482,
          column: 28
        },
        end: {
          line: 482,
          column: 109
        }
      },
      "233": {
        start: {
          line: 483,
          column: 28
        },
        end: {
          line: 483,
          column: 108
        }
      },
      "234": {
        start: {
          line: 484,
          column: 16
        },
        end: {
          line: 487,
          column: 18
        }
      },
      "235": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 493,
          column: 18
        }
      },
      "236": {
        start: {
          line: 501,
          column: 30
        },
        end: {
          line: 501,
          column: 85
        }
      },
      "237": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 502,
          column: 31
        }
      },
      "238": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 503,
          column: 48
        }
      },
      "239": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 510,
          column: 19
        }
      },
      "240": {
        start: {
          line: 510,
          column: 12
        },
        end: {
          line: 510,
          column: 19
        }
      },
      "241": {
        start: {
          line: 512,
          column: 35
        },
        end: {
          line: 512,
          column: 37
        }
      },
      "242": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 523,
          column: 9
        }
      },
      "243": {
        start: {
          line: 514,
          column: 33
        },
        end: {
          line: 514,
          column: 82
        }
      },
      "244": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 522,
          column: 13
        }
      },
      "245": {
        start: {
          line: 516,
          column: 28
        },
        end: {
          line: 516,
          column: 109
        }
      },
      "246": {
        start: {
          line: 517,
          column: 28
        },
        end: {
          line: 517,
          column: 108
        }
      },
      "247": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 93
        }
      },
      "248": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 521,
          column: 63
        }
      },
      "249": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 524,
          column: 66
        }
      },
      "250": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 531,
          column: 19
        }
      },
      "251": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 531,
          column: 19
        }
      },
      "252": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "253": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 125
        }
      },
      "254": {
        start: {
          line: 537,
          column: 13
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "255": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 125
        }
      },
      "256": {
        start: {
          line: 546,
          column: 8
        },
        end: {
          line: 547,
          column: 24
        }
      },
      "257": {
        start: {
          line: 547,
          column: 12
        },
        end: {
          line: 547,
          column: 24
        }
      },
      "258": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 551,
          column: 9
        }
      },
      "259": {
        start: {
          line: 550,
          column: 12
        },
        end: {
          line: 550,
          column: 24
        }
      },
      "260": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 555,
          column: 9
        }
      },
      "261": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 554,
          column: 24
        }
      },
      "262": {
        start: {
          line: 557,
          column: 8
        },
        end: {
          line: 563,
          column: 9
        }
      },
      "263": {
        start: {
          line: 558,
          column: 34
        },
        end: {
          line: 558,
          column: 57
        }
      },
      "264": {
        start: {
          line: 559,
          column: 40
        },
        end: {
          line: 559,
          column: 122
        }
      },
      "265": {
        start: {
          line: 560,
          column: 12
        },
        end: {
          line: 562,
          column: 13
        }
      },
      "266": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 28
        }
      },
      "267": {
        start: {
          line: 564,
          column: 8
        },
        end: {
          line: 564,
          column: 21
        }
      },
      "268": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 571,
          column: 19
        }
      },
      "269": {
        start: {
          line: 571,
          column: 12
        },
        end: {
          line: 571,
          column: 19
        }
      },
      "270": {
        start: {
          line: 572,
          column: 24
        },
        end: {
          line: 580,
          column: 9
        }
      },
      "271": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 581,
          column: 35
        }
      },
      "272": {
        start: {
          line: 587,
          column: 30
        },
        end: {
          line: 587,
          column: 59
        }
      },
      "273": {
        start: {
          line: 588,
          column: 27
        },
        end: {
          line: 603,
          column: 9
        }
      },
      "274": {
        start: {
          line: 593,
          column: 54
        },
        end: {
          line: 593,
          column: 67
        }
      },
      "275": {
        start: {
          line: 594,
          column: 57
        },
        end: {
          line: 594,
          column: 73
        }
      },
      "276": {
        start: {
          line: 595,
          column: 52
        },
        end: {
          line: 595,
          column: 63
        }
      },
      "277": {
        start: {
          line: 596,
          column: 62
        },
        end: {
          line: 596,
          column: 84
        }
      },
      "278": {
        start: {
          line: 604,
          column: 36
        },
        end: {
          line: 609,
          column: 9
        }
      },
      "279": {
        start: {
          line: 610,
          column: 8
        },
        end: {
          line: 620,
          column: 10
        }
      },
      "280": {
        start: {
          line: 624,
          column: 8
        },
        end: {
          line: 624,
          column: 81
        }
      },
      "281": {
        start: {
          line: 627,
          column: 20
        },
        end: {
          line: 627,
          column: 24
        }
      },
      "282": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 631,
          column: 10
        }
      },
      "283": {
        start: {
          line: 629,
          column: 12
        },
        end: {
          line: 629,
          column: 52
        }
      },
      "284": {
        start: {
          line: 630,
          column: 12
        },
        end: {
          line: 630,
          column: 34
        }
      },
      "285": {
        start: {
          line: 634,
          column: 0
        },
        end: {
          line: 634,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 28
          },
          end: {
            line: 57,
            column: 5
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 68
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 61
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 29
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 89
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 60
          },
          end: {
            line: 91,
            column: 61
          }
        },
        loc: {
          start: {
            line: 91,
            column: 65
          },
          end: {
            line: 91,
            column: 112
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 33
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 99
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 109,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        loc: {
          start: {
            line: 109,
            column: 81
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 109
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 34
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 134
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 86
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 163
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 188,
            column: 68
          },
          end: {
            line: 188,
            column: 69
          }
        },
        loc: {
          start: {
            line: 188,
            column: 73
          },
          end: {
            line: 188,
            column: 92
          }
        },
        line: 188
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 192,
            column: 28
          },
          end: {
            line: 192,
            column: 29
          }
        },
        loc: {
          start: {
            line: 192,
            column: 33
          },
          end: {
            line: 192,
            column: 51
          }
        },
        line: 192
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 193,
            column: 28
          },
          end: {
            line: 193,
            column: 29
          }
        },
        loc: {
          start: {
            line: 193,
            column: 40
          },
          end: {
            line: 193,
            column: 55
          }
        },
        line: 193
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 207,
            column: 4
          },
          end: {
            line: 207,
            column: 5
          }
        },
        loc: {
          start: {
            line: 207,
            column: 53
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 207
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 208,
            column: 37
          },
          end: {
            line: 208,
            column: 38
          }
        },
        loc: {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 211,
            column: 9
          }
        },
        line: 208
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 76
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 216
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 75
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 236
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 278,
            column: 85
          },
          end: {
            line: 278,
            column: 86
          }
        },
        loc: {
          start: {
            line: 278,
            column: 97
          },
          end: {
            line: 278,
            column: 108
          }
        },
        line: 278
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 74
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 283
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 329,
            column: 4
          },
          end: {
            line: 329,
            column: 5
          }
        },
        loc: {
          start: {
            line: 329,
            column: 27
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 329
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 92
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 395
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 91
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 412
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 419,
            column: 71
          },
          end: {
            line: 419,
            column: 72
          }
        },
        loc: {
          start: {
            line: 419,
            column: 86
          },
          end: {
            line: 419,
            column: 112
          }
        },
        line: 419
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 436,
            column: 4
          },
          end: {
            line: 436,
            column: 5
          }
        },
        loc: {
          start: {
            line: 436,
            column: 90
          },
          end: {
            line: 439,
            column: 5
          }
        },
        line: 436
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 443,
            column: 4
          },
          end: {
            line: 443,
            column: 5
          }
        },
        loc: {
          start: {
            line: 443,
            column: 98
          },
          end: {
            line: 471,
            column: 5
          }
        },
        line: 443
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 475,
            column: 4
          },
          end: {
            line: 475,
            column: 5
          }
        },
        loc: {
          start: {
            line: 475,
            column: 55
          },
          end: {
            line: 496,
            column: 5
          }
        },
        line: 475
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 478,
            column: 37
          },
          end: {
            line: 478,
            column: 38
          }
        },
        loc: {
          start: {
            line: 478,
            column: 54
          },
          end: {
            line: 495,
            column: 9
          }
        },
        line: 478
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 69
          },
          end: {
            line: 504,
            column: 5
          }
        },
        line: 500
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 508,
            column: 4
          },
          end: {
            line: 508,
            column: 5
          }
        },
        loc: {
          start: {
            line: 508,
            column: 29
          },
          end: {
            line: 525,
            column: 5
          }
        },
        line: 508
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 529,
            column: 4
          },
          end: {
            line: 529,
            column: 5
          }
        },
        loc: {
          start: {
            line: 529,
            column: 24
          },
          end: {
            line: 541,
            column: 5
          }
        },
        line: 529
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 545,
            column: 4
          },
          end: {
            line: 545,
            column: 5
          }
        },
        loc: {
          start: {
            line: 545,
            column: 22
          },
          end: {
            line: 565,
            column: 5
          }
        },
        line: 545
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 569,
            column: 4
          },
          end: {
            line: 569,
            column: 5
          }
        },
        loc: {
          start: {
            line: 569,
            column: 20
          },
          end: {
            line: 582,
            column: 5
          }
        },
        line: 569
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 586,
            column: 4
          },
          end: {
            line: 586,
            column: 5
          }
        },
        loc: {
          start: {
            line: 586,
            column: 49
          },
          end: {
            line: 621,
            column: 5
          }
        },
        line: 586
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 593,
            column: 49
          },
          end: {
            line: 593,
            column: 50
          }
        },
        loc: {
          start: {
            line: 593,
            column: 54
          },
          end: {
            line: 593,
            column: 67
          }
        },
        line: 593
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 594,
            column: 52
          },
          end: {
            line: 594,
            column: 53
          }
        },
        loc: {
          start: {
            line: 594,
            column: 57
          },
          end: {
            line: 594,
            column: 73
          }
        },
        line: 594
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 595,
            column: 47
          },
          end: {
            line: 595,
            column: 48
          }
        },
        loc: {
          start: {
            line: 595,
            column: 52
          },
          end: {
            line: 595,
            column: 63
          }
        },
        line: 595
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 596,
            column: 57
          },
          end: {
            line: 596,
            column: 58
          }
        },
        loc: {
          start: {
            line: 596,
            column: 62
          },
          end: {
            line: 596,
            column: 84
          }
        },
        line: 596
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 623,
            column: 4
          },
          end: {
            line: 623,
            column: 5
          }
        },
        loc: {
          start: {
            line: 623,
            column: 25
          },
          end: {
            line: 625,
            column: 5
          }
        },
        line: 623
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 626,
            column: 4
          },
          end: {
            line: 626,
            column: 5
          }
        },
        loc: {
          start: {
            line: 626,
            column: 29
          },
          end: {
            line: 632,
            column: 5
          }
        },
        line: 626
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 628,
            column: 15
          },
          end: {
            line: 628,
            column: 16
          }
        },
        loc: {
          start: {
            line: 628,
            column: 21
          },
          end: {
            line: 631,
            column: 9
          }
        },
        line: 628
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: 54,
            column: 13
          },
          end: {
            line: 56,
            column: 9
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 76,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 91,
            column: 65
          },
          end: {
            line: 91,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 65
          },
          end: {
            line: 91,
            column: 81
          }
        }, {
          start: {
            line: 91,
            column: 85
          },
          end: {
            line: 91,
            column: 112
          }
        }],
        line: 91
      },
      "3": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "4": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: 142,
            column: 17
          },
          end: {
            line: 147,
            column: 13
          }
        }],
        line: 137
      },
      "5": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 39
          }
        }, {
          start: {
            line: 137,
            column: 43
          },
          end: {
            line: 137,
            column: 77
          }
        }],
        line: 137
      },
      "6": {
        loc: {
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 144,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 74
          },
          end: {
            line: 144,
            column: 97
          }
        }, {
          start: {
            line: 144,
            column: 100
          },
          end: {
            line: 144,
            column: 101
          }
        }],
        line: 144
      },
      "7": {
        loc: {
          start: {
            line: 145,
            column: 28
          },
          end: {
            line: 145,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 74
          },
          end: {
            line: 145,
            column: 97
          }
        }, {
          start: {
            line: 145,
            column: 100
          },
          end: {
            line: 145,
            column: 101
          }
        }],
        line: 145
      },
      "8": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "9": {
        loc: {
          start: {
            line: 180,
            column: 35
          },
          end: {
            line: 180,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 51
          },
          end: {
            line: 180,
            column: 63
          }
        }, {
          start: {
            line: 180,
            column: 66
          },
          end: {
            line: 180,
            column: 76
          }
        }],
        line: 180
      },
      "10": {
        loc: {
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 183,
            column: 63
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 46
          },
          end: {
            line: 183,
            column: 53
          }
        }, {
          start: {
            line: 183,
            column: 56
          },
          end: {
            line: 183,
            column: 63
          }
        }],
        line: 183
      },
      "11": {
        loc: {
          start: {
            line: 184,
            column: 29
          },
          end: {
            line: 184,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 184,
            column: 45
          },
          end: {
            line: 184,
            column: 91
          }
        }, {
          start: {
            line: 184,
            column: 94
          },
          end: {
            line: 184,
            column: 95
          }
        }],
        line: 184
      },
      "12": {
        loc: {
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "13": {
        loc: {
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 190,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 16
          },
          end: {
            line: 190,
            column: 34
          }
        }, {
          start: {
            line: 190,
            column: 38
          },
          end: {
            line: 190,
            column: 86
          }
        }],
        line: 190
      },
      "14": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 218,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 218,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "15": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "16": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "17": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 238,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 238,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 237
      },
      "18": {
        loc: {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "19": {
        loc: {
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 244,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 244,
            column: 16
          },
          end: {
            line: 244,
            column: 39
          }
        }, {
          start: {
            line: 244,
            column: 43
          },
          end: {
            line: 244,
            column: 77
          }
        }],
        line: 244
      },
      "20": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 251,
            column: 16
          },
          end: {
            line: 256,
            column: 26
          }
        }, {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 262,
            column: 26
          }
        }, {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 270,
            column: 26
          }
        }],
        line: 250
      },
      "21": {
        loc: {
          start: {
            line: 275,
            column: 36
          },
          end: {
            line: 275,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 275,
            column: 83
          },
          end: {
            line: 275,
            column: 84
          }
        }, {
          start: {
            line: 275,
            column: 87
          },
          end: {
            line: 275,
            column: 88
          }
        }],
        line: 275
      },
      "22": {
        loc: {
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 285,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 8
          },
          end: {
            line: 285,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "23": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "24": {
        loc: {
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 311,
            column: 13
          }
        }],
        line: 297
      },
      "25": {
        loc: {
          start: {
            line: 297,
            column: 16
          },
          end: {
            line: 297,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 16
          },
          end: {
            line: 297,
            column: 39
          }
        }, {
          start: {
            line: 297,
            column: 43
          },
          end: {
            line: 297,
            column: 77
          }
        }],
        line: 297
      },
      "26": {
        loc: {
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 17
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: 309,
            column: 17
          },
          end: {
            line: 311,
            column: 13
          }
        }],
        line: 301
      },
      "27": {
        loc: {
          start: {
            line: 305,
            column: 28
          },
          end: {
            line: 305,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 305,
            column: 74
          },
          end: {
            line: 305,
            column: 97
          }
        }, {
          start: {
            line: 305,
            column: 100
          },
          end: {
            line: 305,
            column: 109
          }
        }],
        line: 305
      },
      "28": {
        loc: {
          start: {
            line: 306,
            column: 28
          },
          end: {
            line: 306,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 74
          },
          end: {
            line: 306,
            column: 97
          }
        }, {
          start: {
            line: 306,
            column: 100
          },
          end: {
            line: 306,
            column: 108
          }
        }],
        line: 306
      },
      "29": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 331,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 331,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "30": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 389,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 340,
            column: 22
          }
        }, {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 347,
            column: 22
          }
        }, {
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 366,
            column: 22
          }
        }, {
          start: {
            line: 367,
            column: 12
          },
          end: {
            line: 375,
            column: 22
          }
        }, {
          start: {
            line: 376,
            column: 12
          },
          end: {
            line: 383,
            column: 22
          }
        }, {
          start: {
            line: 384,
            column: 12
          },
          end: {
            line: 388,
            column: 17
          }
        }],
        line: 334
      },
      "31": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 397,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 397,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "32": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 407,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 399,
            column: 12
          },
          end: {
            line: 400,
            column: 109
          }
        }, {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 402,
            column: 108
          }
        }, {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 404,
            column: 116
          }
        }, {
          start: {
            line: 405,
            column: 12
          },
          end: {
            line: 406,
            column: 52
          }
        }],
        line: 398
      },
      "33": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 414,
            column: 48
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 414,
            column: 48
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "34": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 428,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 428,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "35": {
        loc: {
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 468,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 12
          },
          end: {
            line: 468,
            column: 13
          }
        }, {
          start: {
            line: 462,
            column: 17
          },
          end: {
            line: 468,
            column: 13
          }
        }],
        line: 455
      },
      "36": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "37": {
        loc: {
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 494,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 12
          },
          end: {
            line: 494,
            column: 13
          }
        }, {
          start: {
            line: 489,
            column: 17
          },
          end: {
            line: 494,
            column: 13
          }
        }],
        line: 480
      },
      "38": {
        loc: {
          start: {
            line: 482,
            column: 28
          },
          end: {
            line: 482,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 482,
            column: 74
          },
          end: {
            line: 482,
            column: 97
          }
        }, {
          start: {
            line: 482,
            column: 100
          },
          end: {
            line: 482,
            column: 109
          }
        }],
        line: 482
      },
      "39": {
        loc: {
          start: {
            line: 483,
            column: 28
          },
          end: {
            line: 483,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 483,
            column: 74
          },
          end: {
            line: 483,
            column: 97
          }
        }, {
          start: {
            line: 483,
            column: 100
          },
          end: {
            line: 483,
            column: 108
          }
        }],
        line: 483
      },
      "40": {
        loc: {
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 510,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 8
          },
          end: {
            line: 510,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "41": {
        loc: {
          start: {
            line: 515,
            column: 12
          },
          end: {
            line: 522,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 12
          },
          end: {
            line: 522,
            column: 13
          }
        }, {
          start: {
            line: 520,
            column: 17
          },
          end: {
            line: 522,
            column: 13
          }
        }],
        line: 515
      },
      "42": {
        loc: {
          start: {
            line: 516,
            column: 28
          },
          end: {
            line: 516,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 516,
            column: 74
          },
          end: {
            line: 516,
            column: 97
          }
        }, {
          start: {
            line: 516,
            column: 100
          },
          end: {
            line: 516,
            column: 109
          }
        }],
        line: 516
      },
      "43": {
        loc: {
          start: {
            line: 517,
            column: 28
          },
          end: {
            line: 517,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 517,
            column: 74
          },
          end: {
            line: 517,
            column: 97
          }
        }, {
          start: {
            line: 517,
            column: 100
          },
          end: {
            line: 517,
            column: 108
          }
        }],
        line: 517
      },
      "44": {
        loc: {
          start: {
            line: 530,
            column: 8
          },
          end: {
            line: 531,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 530,
            column: 8
          },
          end: {
            line: 531,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 530
      },
      "45": {
        loc: {
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 540,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 540,
            column: 9
          }
        }, {
          start: {
            line: 537,
            column: 13
          },
          end: {
            line: 540,
            column: 9
          }
        }],
        line: 533
      },
      "46": {
        loc: {
          start: {
            line: 537,
            column: 13
          },
          end: {
            line: 540,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 13
          },
          end: {
            line: 540,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "47": {
        loc: {
          start: {
            line: 546,
            column: 8
          },
          end: {
            line: 547,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 546,
            column: 8
          },
          end: {
            line: 547,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 546
      },
      "48": {
        loc: {
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 551,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 549,
            column: 8
          },
          end: {
            line: 551,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 549
      },
      "49": {
        loc: {
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 555,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 8
          },
          end: {
            line: 555,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "50": {
        loc: {
          start: {
            line: 557,
            column: 8
          },
          end: {
            line: 563,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 8
          },
          end: {
            line: 563,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "51": {
        loc: {
          start: {
            line: 560,
            column: 12
          },
          end: {
            line: 562,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 560,
            column: 12
          },
          end: {
            line: 562,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 560
      },
      "52": {
        loc: {
          start: {
            line: 570,
            column: 8
          },
          end: {
            line: 571,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 570,
            column: 8
          },
          end: {
            line: 571,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 570
      },
      "53": {
        loc: {
          start: {
            line: 574,
            column: 25
          },
          end: {
            line: 574,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 574,
            column: 25
          },
          end: {
            line: 574,
            column: 51
          }
        }, {
          start: {
            line: 574,
            column: 55
          },
          end: {
            line: 574,
            column: 86
          }
        }],
        line: 574
      },
      "54": {
        loc: {
          start: {
            line: 578,
            column: 34
          },
          end: {
            line: 578,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 578,
            column: 72
          },
          end: {
            line: 578,
            column: 73
          }
        }, {
          start: {
            line: 578,
            column: 76
          },
          end: {
            line: 578,
            column: 77
          }
        }],
        line: 578
      },
      "55": {
        loc: {
          start: {
            line: 589,
            column: 29
          },
          end: {
            line: 589,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 589,
            column: 29
          },
          end: {
            line: 589,
            column: 57
          }
        }, {
          start: {
            line: 589,
            column: 61
          },
          end: {
            line: 589,
            column: 62
          }
        }],
        line: 589
      },
      "56": {
        loc: {
          start: {
            line: 591,
            column: 34
          },
          end: {
            line: 591,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 591,
            column: 34
          },
          end: {
            line: 591,
            column: 62
          }
        }, {
          start: {
            line: 591,
            column: 66
          },
          end: {
            line: 591,
            column: 67
          }
        }],
        line: 591
      },
      "57": {
        loc: {
          start: {
            line: 599,
            column: 35
          },
          end: {
            line: 599,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 599,
            column: 35
          },
          end: {
            line: 599,
            column: 66
          }
        }, {
          start: {
            line: 599,
            column: 70
          },
          end: {
            line: 599,
            column: 71
          }
        }],
        line: 599
      },
      "58": {
        loc: {
          start: {
            line: 600,
            column: 35
          },
          end: {
            line: 600,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 600,
            column: 35
          },
          end: {
            line: 600,
            column: 66
          }
        }, {
          start: {
            line: 600,
            column: 70
          },
          end: {
            line: 600,
            column: 71
          }
        }],
        line: 600
      },
      "59": {
        loc: {
          start: {
            line: 601,
            column: 31
          },
          end: {
            line: 601,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 601,
            column: 31
          },
          end: {
            line: 601,
            column: 58
          }
        }, {
          start: {
            line: 601,
            column: 62
          },
          end: {
            line: 601,
            column: 63
          }
        }],
        line: 601
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\johnr\\Downloads\\SizeWise_Suite_App\\backend\\services\\calculations\\algorithms\\GradientDescent.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\johnr\\Downloads\\SizeWise_Suite_App\\backend\\services\\calculations\\algorithms\\GradientDescent.ts"],
      sourcesContent: ["/**\r\n * Gradient Descent Algorithm Implementation for System Optimization\r\n * \r\n * Implements gradient descent optimization with:\r\n * - Multiple variants (standard, momentum, Adam, RMSprop)\r\n * - Numerical gradient computation with finite differences\r\n * - Adaptive learning rate and step size control\r\n * - Line search optimization\r\n * - Constraint handling with projected gradients\r\n * \r\n * @version 3.0.0\r\n * @author SizeWise Suite Development Team\r\n */\r\n\r\nimport {\r\n  OptimizationSolution,\r\n  OptimizationVariable,\r\n  OptimizationProblem,\r\n  OptimizationResult,\r\n  OptimizationStatus,\r\n  OptimizationStatistics,\r\n  OptimizationHistory,\r\n  IterationHistory,\r\n  SolutionPerformanceMetrics,\r\n  ObjectiveFunctionType,\r\n  ConstraintFunctionType\r\n} from '../types/SystemOptimizationTypes';\r\n\r\nexport interface GradientDescentParameters {\r\n  maxIterations: number;\r\n  learningRate: number;\r\n  learningRateMin: number;\r\n  learningRateMax: number;\r\n  variant: 'standard' | 'momentum' | 'adam' | 'rmsprop' | 'adagrad';\r\n  momentumCoefficient: number;\r\n  adamBeta1: number;\r\n  adamBeta2: number;\r\n  adamEpsilon: number;\r\n  rmspropDecayRate: number;\r\n  rmspropEpsilon: number;\r\n  gradientMethod: 'forward' | 'backward' | 'central';\r\n  finiteDifferenceStep: number;\r\n  adaptiveLearningRate: boolean;\r\n  lineSearch: boolean;\r\n  lineSearchMethod: 'armijo' | 'wolfe' | 'golden_section';\r\n  constraintHandling: 'penalty' | 'projection' | 'barrier';\r\n  penaltyCoefficient: number;\r\n  convergenceTolerance: number;\r\n  gradientTolerance: number;\r\n  seedValue?: number;\r\n}\r\n\r\nexport interface GradientState {\r\n  solution: OptimizationSolution;\r\n  gradient: number[];\r\n  momentum: number[];\r\n  adamM: number[];\r\n  adamV: number[];\r\n  rmspropV: number[];\r\n  adagradG: number[];\r\n  iteration: number;\r\n  learningRate: number;\r\n  gradientNorm: number;\r\n  stepSize: number;\r\n  functionValue: number;\r\n}\r\n\r\n/**\r\n * Gradient Descent optimizer for continuous optimization problems\r\n */\r\nexport class GradientDescent {\r\n  private parameters: GradientDescentParameters;\r\n  private currentState: GradientState | null = null;\r\n  private bestSolution: OptimizationSolution | null = null;\r\n  private history: IterationHistory[] = [];\r\n  private random: () => number;\r\n  private evaluationCount: number = 0;\r\n\r\n  constructor(parameters?: Partial<GradientDescentParameters>) {\r\n    this.parameters = {\r\n      maxIterations: 1000,\r\n      learningRate: 0.01,\r\n      learningRateMin: 1e-6,\r\n      learningRateMax: 1.0,\r\n      variant: 'adam',\r\n      momentumCoefficient: 0.9,\r\n      adamBeta1: 0.9,\r\n      adamBeta2: 0.999,\r\n      adamEpsilon: 1e-8,\r\n      rmspropDecayRate: 0.9,\r\n      rmspropEpsilon: 1e-8,\r\n      gradientMethod: 'central',\r\n      finiteDifferenceStep: 1e-6,\r\n      adaptiveLearningRate: true,\r\n      lineSearch: true,\r\n      lineSearchMethod: 'armijo',\r\n      constraintHandling: 'projection',\r\n      penaltyCoefficient: 1000,\r\n      convergenceTolerance: 1e-6,\r\n      gradientTolerance: 1e-6,\r\n      ...parameters\r\n    };\r\n\r\n    // Initialize random number generator\r\n    if (this.parameters.seedValue !== undefined) {\r\n      this.random = this.createSeededRandom(this.parameters.seedValue);\r\n    } else {\r\n      this.random = Math.random;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main optimization method\r\n   */\r\n  public async optimize(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<OptimizationResult> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Validate problem for gradient descent\r\n      this.validateProblem(problem);\r\n      \r\n      // Initialize algorithm\r\n      this.initializeAlgorithm(problem);\r\n      \r\n      // Create initial solution\r\n      await this.createInitialSolution(problem, objectiveFunction, constraintFunctions);\r\n      \r\n      // Main optimization loop\r\n      while (!this.shouldTerminate()) {\r\n        await this.performIteration(problem, objectiveFunction, constraintFunctions);\r\n        this.updateHistory();\r\n        \r\n        if (this.parameters.adaptiveLearningRate) {\r\n          this.adaptLearningRate();\r\n        }\r\n      }\r\n      \r\n      // Create final result\r\n      return this.createOptimizationResult(problem, startTime);\r\n      \r\n    } catch (error) {\r\n      console.error('Gradient descent optimization failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate problem for gradient descent\r\n   */\r\n  private validateProblem(problem: OptimizationProblem): void {\r\n    // Check for continuous variables only\r\n    const hasDiscreteVariables = problem.variables.some(v => v.discreteValues && v.discreteValues.length > 0);\r\n    if (hasDiscreteVariables) {\r\n      console.warn('Gradient descent works best with continuous variables. Discrete variables will be treated as continuous.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize algorithm state\r\n   */\r\n  private initializeAlgorithm(problem: OptimizationProblem): void {\r\n    this.currentState = null;\r\n    this.bestSolution = null;\r\n    this.history = [];\r\n    this.evaluationCount = 0;\r\n    \r\n    console.log(`Initializing Gradient Descent (${this.parameters.variant}) with learning rate: ${this.parameters.learningRate}`);\r\n  }\r\n\r\n  /**\r\n   * Create initial solution\r\n   */\r\n  private async createInitialSolution(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    // Generate initial solution\r\n    const initialSolution = this.createRandomSolution(problem);\r\n    await this.evaluateSolution(initialSolution, problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Initialize gradient state\r\n    const numVariables = problem.variables.length;\r\n    this.currentState = {\r\n      solution: initialSolution,\r\n      gradient: new Array(numVariables).fill(0),\r\n      momentum: new Array(numVariables).fill(0),\r\n      adamM: new Array(numVariables).fill(0),\r\n      adamV: new Array(numVariables).fill(0),\r\n      rmspropV: new Array(numVariables).fill(0),\r\n      adagradG: new Array(numVariables).fill(0),\r\n      iteration: 0,\r\n      learningRate: this.parameters.learningRate,\r\n      gradientNorm: 0,\r\n      stepSize: 0,\r\n      functionValue: initialSolution.fitness\r\n    };\r\n    \r\n    this.bestSolution = { ...initialSolution };\r\n  }\r\n\r\n  /**\r\n   * Create a random solution\r\n   */\r\n  private createRandomSolution(problem: OptimizationProblem): OptimizationSolution {\r\n    const variables: { [variableId: string]: number | string } = {};\r\n    \r\n    for (const variable of problem.variables) {\r\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\r\n        // Discrete variable - select random value\r\n        const randomIndex = Math.floor(this.random() * variable.discreteValues.length);\r\n        variables[variable.id] = variable.discreteValues[randomIndex];\r\n      } else {\r\n        // Continuous variable\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : 0;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : 1;\r\n        variables[variable.id] = min + this.random() * (max - min);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      id: this.generateSolutionId(),\r\n      variables,\r\n      objectiveValues: {},\r\n      constraintViolations: [],\r\n      feasible: true,\r\n      fitness: 0,\r\n      systemConfiguration: problem.systemConfiguration,\r\n      performanceMetrics: {} as SolutionPerformanceMetrics\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Evaluate solution fitness and constraints\r\n   */\r\n  private async evaluateSolution(\r\n    solution: OptimizationSolution,\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    try {\r\n      // Convert solution to optimization variables\r\n      const variables = this.solutionToVariables(solution, problem.variables);\r\n      \r\n      // Evaluate objective function\r\n      const objectiveValue = objectiveFunction(variables);\r\n      solution.fitness = objectiveValue;\r\n      \r\n      // Store objective values\r\n      if (problem.objectives.objectives.length > 0) {\r\n        solution.objectiveValues[problem.objectives.objectives[0].id] = objectiveValue;\r\n      }\r\n      \r\n      // Evaluate constraints\r\n      solution.constraintViolations = [];\r\n      for (let i = 0; i < constraintFunctions.length; i++) {\r\n        const violation = constraintFunctions[i](variables);\r\n        solution.constraintViolations.push({\r\n          constraintId: `constraint_${i}`,\r\n          violationType: violation > 0 ? 'inequality' : 'boundary',\r\n          currentValue: violation,\r\n          requiredValue: 0,\r\n          severity: violation > 0 ? 'major' : 'minor',\r\n          penalty: violation > 0 ? violation * this.parameters.penaltyCoefficient : 0\r\n        });\r\n      }\r\n      \r\n      // Check feasibility\r\n      solution.feasible = solution.constraintViolations.every(v => v.currentValue <= 0);\r\n      \r\n      // Apply constraint handling\r\n      if (!solution.feasible && this.parameters.constraintHandling === 'penalty') {\r\n        const totalPenalty = solution.constraintViolations\r\n          .filter(v => v.currentValue > 0)\r\n          .reduce((sum, v) => sum + v.penalty, 0);\r\n        solution.fitness += totalPenalty;\r\n      }\r\n      \r\n      this.evaluationCount++;\r\n      \r\n    } catch (error) {\r\n      console.error('Error evaluating solution:', error);\r\n      solution.fitness = Number.MAX_VALUE;\r\n      solution.feasible = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert solution to optimization variables\r\n   */\r\n  private solutionToVariables(solution: OptimizationSolution, variableTemplates: OptimizationVariable[]): OptimizationVariable[] {\r\n    return variableTemplates.map(template => ({\r\n      ...template,\r\n      currentValue: solution.variables[template.id]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Perform one iteration of gradient descent\r\n   */\r\n  private async performIteration(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    if (!this.currentState) return;\r\n    \r\n    // Compute gradient\r\n    await this.computeGradient(problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Update solution based on variant\r\n    await this.updateSolution(problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Apply constraints if using projection\r\n    if (this.parameters.constraintHandling === 'projection') {\r\n      this.projectSolution(problem);\r\n    }\r\n    \r\n    // Update best solution\r\n    if (this.currentState.solution.fitness < this.bestSolution!.fitness) {\r\n      this.bestSolution = { ...this.currentState.solution };\r\n    }\r\n    \r\n    this.currentState.iteration++;\r\n  }\r\n\r\n  /**\r\n   * Compute numerical gradient\r\n   */\r\n  private async computeGradient(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    if (!this.currentState) return;\r\n    \r\n    const currentVariables = this.solutionToVariables(this.currentState.solution, problem.variables);\r\n    const h = this.parameters.finiteDifferenceStep;\r\n    \r\n    for (let i = 0; i < problem.variables.length; i++) {\r\n      const variable = problem.variables[i];\r\n      \r\n      // Skip discrete variables\r\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\r\n        this.currentState.gradient[i] = 0;\r\n        continue;\r\n      }\r\n      \r\n      const originalValue = currentVariables[i].currentValue as number;\r\n      \r\n      let gradient = 0;\r\n      \r\n      switch (this.parameters.gradientMethod) {\r\n        case 'forward':\r\n          // f'(x) \u2248 (f(x+h) - f(x)) / h\r\n          currentVariables[i].currentValue = originalValue + h;\r\n          const forwardValue = objectiveFunction(currentVariables);\r\n          gradient = (forwardValue - this.currentState.functionValue) / h;\r\n          break;\r\n          \r\n        case 'backward':\r\n          // f'(x) \u2248 (f(x) - f(x-h)) / h\r\n          currentVariables[i].currentValue = originalValue - h;\r\n          const backwardValue = objectiveFunction(currentVariables);\r\n          gradient = (this.currentState.functionValue - backwardValue) / h;\r\n          break;\r\n          \r\n        case 'central':\r\n          // f'(x) \u2248 (f(x+h) - f(x-h)) / (2h)\r\n          currentVariables[i].currentValue = originalValue + h;\r\n          const forwardVal = objectiveFunction(currentVariables);\r\n          currentVariables[i].currentValue = originalValue - h;\r\n          const backwardVal = objectiveFunction(currentVariables);\r\n          gradient = (forwardVal - backwardVal) / (2 * h);\r\n          break;\r\n      }\r\n      \r\n      // Restore original value\r\n      currentVariables[i].currentValue = originalValue;\r\n      \r\n      this.currentState.gradient[i] = gradient;\r\n      this.evaluationCount += this.parameters.gradientMethod === 'central' ? 2 : 1;\r\n    }\r\n    \r\n    // Compute gradient norm\r\n    this.currentState.gradientNorm = Math.sqrt(\r\n      this.currentState.gradient.reduce((sum, g) => sum + g * g, 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update solution based on gradient descent variant\r\n   */\r\n  private async updateSolution(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    if (!this.currentState) return;\r\n    \r\n    const stepDirection = this.computeStepDirection();\r\n    \r\n    // Determine step size\r\n    let stepSize = this.currentState.learningRate;\r\n    if (this.parameters.lineSearch) {\r\n      stepSize = await this.performLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n    }\r\n    \r\n    // Update solution\r\n    const newVariables: { [variableId: string]: number | string } = {};\r\n    \r\n    for (let i = 0; i < problem.variables.length; i++) {\r\n      const variable = problem.variables[i];\r\n      const currentValue = this.currentState.solution.variables[variable.id];\r\n      \r\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\r\n        // Keep discrete variables unchanged\r\n        newVariables[variable.id] = currentValue;\r\n      } else if (typeof currentValue === 'number') {\r\n        // Update continuous variables\r\n        const newValue = currentValue - stepSize * stepDirection[i];\r\n        \r\n        // Apply bounds\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\r\n        newVariables[variable.id] = Math.max(min, Math.min(max, newValue));\r\n      } else {\r\n        newVariables[variable.id] = currentValue;\r\n      }\r\n    }\r\n    \r\n    // Create new solution\r\n    const newSolution: OptimizationSolution = {\r\n      ...this.currentState.solution,\r\n      id: this.generateSolutionId(),\r\n      variables: newVariables\r\n    };\r\n    \r\n    // Evaluate new solution\r\n    await this.evaluateSolution(newSolution, problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Update state\r\n    this.currentState.solution = newSolution;\r\n    this.currentState.stepSize = stepSize;\r\n    this.currentState.functionValue = newSolution.fitness;\r\n  }\r\n\r\n  /**\r\n   * Compute step direction based on variant\r\n   */\r\n  private computeStepDirection(): number[] {\r\n    if (!this.currentState) return [];\r\n    \r\n    const gradient = this.currentState.gradient;\r\n    const stepDirection = new Array(gradient.length);\r\n    \r\n    switch (this.parameters.variant) {\r\n      case 'standard':\r\n        // Standard gradient descent: d = -\u2207f\r\n        for (let i = 0; i < gradient.length; i++) {\r\n          stepDirection[i] = gradient[i];\r\n        }\r\n        break;\r\n        \r\n      case 'momentum':\r\n        // Momentum: v = \u03B2*v + \u2207f, d = v\r\n        for (let i = 0; i < gradient.length; i++) {\r\n          this.currentState.momentum[i] = this.parameters.momentumCoefficient * this.currentState.momentum[i] + gradient[i];\r\n          stepDirection[i] = this.currentState.momentum[i];\r\n        }\r\n        break;\r\n        \r\n      case 'adam':\r\n        // Adam optimizer\r\n        const beta1 = this.parameters.adamBeta1;\r\n        const beta2 = this.parameters.adamBeta2;\r\n        const epsilon = this.parameters.adamEpsilon;\r\n        const t = this.currentState.iteration + 1;\r\n        \r\n        for (let i = 0; i < gradient.length; i++) {\r\n          // Update biased first moment estimate\r\n          this.currentState.adamM[i] = beta1 * this.currentState.adamM[i] + (1 - beta1) * gradient[i];\r\n          \r\n          // Update biased second raw moment estimate\r\n          this.currentState.adamV[i] = beta2 * this.currentState.adamV[i] + (1 - beta2) * gradient[i] * gradient[i];\r\n          \r\n          // Compute bias-corrected first moment estimate\r\n          const mHat = this.currentState.adamM[i] / (1 - Math.pow(beta1, t));\r\n          \r\n          // Compute bias-corrected second raw moment estimate\r\n          const vHat = this.currentState.adamV[i] / (1 - Math.pow(beta2, t));\r\n          \r\n          // Update step direction\r\n          stepDirection[i] = mHat / (Math.sqrt(vHat) + epsilon);\r\n        }\r\n        break;\r\n        \r\n      case 'rmsprop':\r\n        // RMSprop\r\n        const decay = this.parameters.rmspropDecayRate;\r\n        const eps = this.parameters.rmspropEpsilon;\r\n        \r\n        for (let i = 0; i < gradient.length; i++) {\r\n          this.currentState.rmspropV[i] = decay * this.currentState.rmspropV[i] + (1 - decay) * gradient[i] * gradient[i];\r\n          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.rmspropV[i]) + eps);\r\n        }\r\n        break;\r\n        \r\n      case 'adagrad':\r\n        // Adagrad\r\n        const adagradEps = this.parameters.adamEpsilon;\r\n        \r\n        for (let i = 0; i < gradient.length; i++) {\r\n          this.currentState.adagradG[i] += gradient[i] * gradient[i];\r\n          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.adagradG[i]) + adagradEps);\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        // Default to standard gradient descent\r\n        for (let i = 0; i < gradient.length; i++) {\r\n          stepDirection[i] = gradient[i];\r\n        }\r\n    }\r\n    \r\n    return stepDirection;\r\n  }\r\n\r\n  /**\r\n   * Perform line search to find optimal step size\r\n   */\r\n  private async performLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    if (!this.currentState) return this.parameters.learningRate;\r\n    \r\n    switch (this.parameters.lineSearchMethod) {\r\n      case 'armijo':\r\n        return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n      case 'wolfe':\r\n        return this.wolfeLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n      case 'golden_section':\r\n        return this.goldenSectionLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n      default:\r\n        return this.parameters.learningRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Armijo line search\r\n   */\r\n  private async armijoLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    if (!this.currentState) return this.parameters.learningRate;\r\n    \r\n    const c1 = 1e-4; // Armijo constant\r\n    let alpha = this.parameters.learningRate;\r\n    const maxBacktrack = 20;\r\n    \r\n    const currentValue = this.currentState.functionValue;\r\n    const gradientDotDirection = this.currentState.gradient.reduce((sum, g, i) => sum + g * stepDirection[i], 0);\r\n    \r\n    for (let i = 0; i < maxBacktrack; i++) {\r\n      // Test step\r\n      const testVariables = this.createTestVariables(problem, stepDirection, alpha);\r\n      const testValue = objectiveFunction(testVariables);\r\n      this.evaluationCount++;\r\n      \r\n      // Armijo condition\r\n      if (testValue <= currentValue - c1 * alpha * gradientDotDirection) {\r\n        return alpha;\r\n      }\r\n      \r\n      alpha *= 0.5; // Backtrack\r\n    }\r\n    \r\n    return alpha;\r\n  }\r\n\r\n  /**\r\n   * Wolfe line search (simplified)\r\n   */\r\n  private async wolfeLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    // Simplified implementation - use Armijo for now\r\n    return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n  }\r\n\r\n  /**\r\n   * Golden section line search\r\n   */\r\n  private async goldenSectionLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    const phi = (1 + Math.sqrt(5)) / 2; // Golden ratio\r\n    const resphi = 2 - phi;\r\n    \r\n    let a = 0;\r\n    let b = this.parameters.learningRate * 2;\r\n    const tol = 1e-6;\r\n    \r\n    // Find initial bracket\r\n    let x1 = a + resphi * (b - a);\r\n    let x2 = a + (1 - resphi) * (b - a);\r\n    \r\n    let f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);\r\n    let f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);\r\n    \r\n    while (Math.abs(b - a) > tol) {\r\n      if (f1 < f2) {\r\n        b = x2;\r\n        x2 = x1;\r\n        f2 = f1;\r\n        x1 = a + resphi * (b - a);\r\n        f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);\r\n      } else {\r\n        a = x1;\r\n        x1 = x2;\r\n        f1 = f2;\r\n        x2 = a + (1 - resphi) * (b - a);\r\n        f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);\r\n      }\r\n    }\r\n    \r\n    return (a + b) / 2;\r\n  }\r\n\r\n  /**\r\n   * Create test variables for line search\r\n   */\r\n  private createTestVariables(problem: OptimizationProblem, stepDirection: number[], alpha: number): OptimizationVariable[] {\r\n    if (!this.currentState) return [];\r\n    \r\n    return problem.variables.map((variable, i) => {\r\n      const currentValue = this.currentState!.solution.variables[variable.id];\r\n      \r\n      if (typeof currentValue === 'number') {\r\n        const newValue = currentValue - alpha * stepDirection[i];\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\r\n        \r\n        return {\r\n          ...variable,\r\n          currentValue: Math.max(min, Math.min(max, newValue))\r\n        };\r\n      } else {\r\n        return {\r\n          ...variable,\r\n          currentValue\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Evaluate function at specific step size\r\n   */\r\n  private evaluateAtStep(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    stepDirection: number[],\r\n    alpha: number\r\n  ): number {\r\n    const testVariables = this.createTestVariables(problem, stepDirection, alpha);\r\n    this.evaluationCount++;\r\n    return objectiveFunction(testVariables);\r\n  }\r\n\r\n  /**\r\n   * Project solution onto feasible region\r\n   */\r\n  private projectSolution(problem: OptimizationProblem): void {\r\n    if (!this.currentState) return;\r\n    \r\n    // Simple box constraint projection\r\n    const projectedVariables: { [variableId: string]: number | string } = {};\r\n    \r\n    for (const variable of problem.variables) {\r\n      const currentValue = this.currentState.solution.variables[variable.id];\r\n      \r\n      if (typeof currentValue === 'number') {\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\r\n        projectedVariables[variable.id] = Math.max(min, Math.min(max, currentValue));\r\n      } else {\r\n        projectedVariables[variable.id] = currentValue;\r\n      }\r\n    }\r\n    \r\n    this.currentState.solution.variables = projectedVariables;\r\n  }\r\n\r\n  /**\r\n   * Adapt learning rate based on progress\r\n   */\r\n  private adaptLearningRate(): void {\r\n    if (!this.currentState) return;\r\n    \r\n    // Simple adaptive scheme based on gradient norm\r\n    if (this.currentState.gradientNorm > 1.0) {\r\n      // Large gradient - decrease learning rate\r\n      this.currentState.learningRate = Math.max(\r\n        this.parameters.learningRateMin,\r\n        this.currentState.learningRate * 0.9\r\n      );\r\n    } else if (this.currentState.gradientNorm < 0.1) {\r\n      // Small gradient - increase learning rate\r\n      this.currentState.learningRate = Math.min(\r\n        this.parameters.learningRateMax,\r\n        this.currentState.learningRate * 1.1\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check termination criteria\r\n   */\r\n  private shouldTerminate(): boolean {\r\n    if (!this.currentState) return true;\r\n    \r\n    // Maximum iterations\r\n    if (this.currentState.iteration >= this.parameters.maxIterations) {\r\n      return true;\r\n    }\r\n    \r\n    // Gradient tolerance\r\n    if (this.currentState.gradientNorm < this.parameters.gradientTolerance) {\r\n      return true;\r\n    }\r\n    \r\n    // Function value convergence\r\n    if (this.history.length >= 10) {\r\n      const recentHistory = this.history.slice(-10);\r\n      const functionImprovement = recentHistory[0].bestFitness - recentHistory[recentHistory.length - 1].bestFitness;\r\n      \r\n      if (Math.abs(functionImprovement) < this.parameters.convergenceTolerance) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Update optimization history\r\n   */\r\n  private updateHistory(): void {\r\n    if (!this.currentState) return;\r\n    \r\n    const history: IterationHistory = {\r\n      iteration: this.currentState.iteration,\r\n      bestFitness: this.bestSolution?.fitness || this.currentState.functionValue,\r\n      averageFitness: this.currentState.functionValue,\r\n      worstFitness: this.currentState.functionValue,\r\n      diversity: 0, // Not applicable for single solution\r\n      constraintViolations: this.currentState.solution.feasible ? 0 : 1,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    this.history.push(history);\r\n  }\r\n\r\n  /**\r\n   * Create optimization result\r\n   */\r\n  private createOptimizationResult(problem: OptimizationProblem, startTime: number): OptimizationResult {\r\n    const executionTime = performance.now() - startTime;\r\n    \r\n    const statistics: OptimizationStatistics = {\r\n      totalIterations: this.currentState?.iteration || 0,\r\n      totalEvaluations: this.evaluationCount,\r\n      convergenceIteration: this.currentState?.iteration || 0,\r\n      executionTime,\r\n      bestFitnessHistory: this.history.map(h => h.bestFitness),\r\n      averageFitnessHistory: this.history.map(h => h.averageFitness),\r\n      diversityHistory: this.history.map(h => h.diversity),\r\n      constraintViolationHistory: this.history.map(h => h.constraintViolations),\r\n      algorithmSpecificStats: {\r\n        variant: this.parameters.variant,\r\n        finalLearningRate: this.currentState?.learningRate || 0,\r\n        finalGradientNorm: this.currentState?.gradientNorm || 0,\r\n        finalStepSize: this.currentState?.stepSize || 0\r\n      }\r\n    };\r\n    \r\n    const optimizationHistory: OptimizationHistory = {\r\n      iterations: this.history,\r\n      populationHistory: [],\r\n      parameterHistory: [],\r\n      convergenceMetrics: []\r\n    };\r\n    \r\n    return {\r\n      problemId: problem.id,\r\n      status: OptimizationStatus.CONVERGED,\r\n      bestSolution: this.bestSolution!,\r\n      statistics,\r\n      history: optimizationHistory,\r\n      analysis: {},\r\n      recommendations: [],\r\n      warnings: [],\r\n      errors: []\r\n    };\r\n  }\r\n\r\n  // Utility methods\r\n  private generateSolutionId(): string {\r\n    return `gd_sol_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private createSeededRandom(seed: number): () => number {\r\n    let state = seed;\r\n    return () => {\r\n      state = (state * 9301 + 49297) % 233280;\r\n      return state / 233280;\r\n    };\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aada9f28fc0bbc24d3345be3f9f99b95b0b42bc9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_hr0h2ihfp = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_hr0h2ihfp();
cov_hr0h2ihfp().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_hr0h2ihfp().s[1]++;
exports.GradientDescent = void 0;
const SystemOptimizationTypes_1 =
/* istanbul ignore next */
(cov_hr0h2ihfp().s[2]++, require("../types/SystemOptimizationTypes"));
/**
 * Gradient Descent optimizer for continuous optimization problems
 */
class GradientDescent {
  constructor(parameters) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[0]++;
    cov_hr0h2ihfp().s[3]++;
    this.currentState = null;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[4]++;
    this.bestSolution = null;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[5]++;
    this.history = [];
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[6]++;
    this.evaluationCount = 0;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[7]++;
    this.parameters = {
      maxIterations: 1000,
      learningRate: 0.01,
      learningRateMin: 1e-6,
      learningRateMax: 1.0,
      variant: 'adam',
      momentumCoefficient: 0.9,
      adamBeta1: 0.9,
      adamBeta2: 0.999,
      adamEpsilon: 1e-8,
      rmspropDecayRate: 0.9,
      rmspropEpsilon: 1e-8,
      gradientMethod: 'central',
      finiteDifferenceStep: 1e-6,
      adaptiveLearningRate: true,
      lineSearch: true,
      lineSearchMethod: 'armijo',
      constraintHandling: 'projection',
      penaltyCoefficient: 1000,
      convergenceTolerance: 1e-6,
      gradientTolerance: 1e-6,
      ...parameters
    };
    // Initialize random number generator
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[8]++;
    if (this.parameters.seedValue !== undefined) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[0][0]++;
      cov_hr0h2ihfp().s[9]++;
      this.random = this.createSeededRandom(this.parameters.seedValue);
    } else {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[0][1]++;
      cov_hr0h2ihfp().s[10]++;
      this.random = Math.random;
    }
  }
  /**
   * Main optimization method
   */
  async optimize(problem, objectiveFunction, constraintFunctions) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[11]++, performance.now());
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[12]++;
    try {
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[13]++;
      // Validate problem for gradient descent
      this.validateProblem(problem);
      // Initialize algorithm
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[14]++;
      this.initializeAlgorithm(problem);
      // Create initial solution
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[15]++;
      await this.createInitialSolution(problem, objectiveFunction, constraintFunctions);
      // Main optimization loop
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[16]++;
      while (!this.shouldTerminate()) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[17]++;
        await this.performIteration(problem, objectiveFunction, constraintFunctions);
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[18]++;
        this.updateHistory();
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[19]++;
        if (this.parameters.adaptiveLearningRate) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().b[1][0]++;
          cov_hr0h2ihfp().s[20]++;
          this.adaptLearningRate();
        } else
        /* istanbul ignore next */
        {
          cov_hr0h2ihfp().b[1][1]++;
        }
      }
      // Create final result
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[21]++;
      return this.createOptimizationResult(problem, startTime);
    } catch (error) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[22]++;
      console.error('Gradient descent optimization failed:', error);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[23]++;
      throw error;
    }
  }
  /**
   * Validate problem for gradient descent
   */
  validateProblem(problem) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[2]++;
    // Check for continuous variables only
    const hasDiscreteVariables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[24]++, problem.variables.some(v => {
      /* istanbul ignore next */
      cov_hr0h2ihfp().f[3]++;
      cov_hr0h2ihfp().s[25]++;
      return /* istanbul ignore next */(cov_hr0h2ihfp().b[2][0]++, v.discreteValues) &&
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[2][1]++, v.discreteValues.length > 0);
    }));
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[26]++;
    if (hasDiscreteVariables) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[3][0]++;
      cov_hr0h2ihfp().s[27]++;
      console.warn('Gradient descent works best with continuous variables. Discrete variables will be treated as continuous.');
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[3][1]++;
    }
  }
  /**
   * Initialize algorithm state
   */
  initializeAlgorithm(problem) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[4]++;
    cov_hr0h2ihfp().s[28]++;
    this.currentState = null;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[29]++;
    this.bestSolution = null;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[30]++;
    this.history = [];
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[31]++;
    this.evaluationCount = 0;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[32]++;
    console.log(`Initializing Gradient Descent (${this.parameters.variant}) with learning rate: ${this.parameters.learningRate}`);
  }
  /**
   * Create initial solution
   */
  async createInitialSolution(problem, objectiveFunction, constraintFunctions) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[5]++;
    // Generate initial solution
    const initialSolution =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[33]++, this.createRandomSolution(problem));
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[34]++;
    await this.evaluateSolution(initialSolution, problem, objectiveFunction, constraintFunctions);
    // Initialize gradient state
    const numVariables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[35]++, problem.variables.length);
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[36]++;
    this.currentState = {
      solution: initialSolution,
      gradient: new Array(numVariables).fill(0),
      momentum: new Array(numVariables).fill(0),
      adamM: new Array(numVariables).fill(0),
      adamV: new Array(numVariables).fill(0),
      rmspropV: new Array(numVariables).fill(0),
      adagradG: new Array(numVariables).fill(0),
      iteration: 0,
      learningRate: this.parameters.learningRate,
      gradientNorm: 0,
      stepSize: 0,
      functionValue: initialSolution.fitness
    };
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[37]++;
    this.bestSolution = {
      ...initialSolution
    };
  }
  /**
   * Create a random solution
   */
  createRandomSolution(problem) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[6]++;
    const variables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[38]++, {});
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[39]++;
    for (const variable of problem.variables) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[40]++;
      if (
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[5][0]++, variable.discreteValues) &&
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[5][1]++, variable.discreteValues.length > 0)) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[4][0]++;
        // Discrete variable - select random value
        const randomIndex =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[41]++, Math.floor(this.random() * variable.discreteValues.length));
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[42]++;
        variables[variable.id] = variable.discreteValues[randomIndex];
      } else {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[4][1]++;
        // Continuous variable
        const min =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[43]++, typeof variable.bounds.minimum === 'number' ?
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[6][0]++, variable.bounds.minimum) :
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[6][1]++, 0));
        const max =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[44]++, typeof variable.bounds.maximum === 'number' ?
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[7][0]++, variable.bounds.maximum) :
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[7][1]++, 1));
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[45]++;
        variables[variable.id] = min + this.random() * (max - min);
      }
    }
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[46]++;
    return {
      id: this.generateSolutionId(),
      variables,
      objectiveValues: {},
      constraintViolations: [],
      feasible: true,
      fitness: 0,
      systemConfiguration: problem.systemConfiguration,
      performanceMetrics: {}
    };
  }
  /**
   * Evaluate solution fitness and constraints
   */
  async evaluateSolution(solution, problem, objectiveFunction, constraintFunctions) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[7]++;
    cov_hr0h2ihfp().s[47]++;
    try {
      // Convert solution to optimization variables
      const variables =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[48]++, this.solutionToVariables(solution, problem.variables));
      // Evaluate objective function
      const objectiveValue =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[49]++, objectiveFunction(variables));
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[50]++;
      solution.fitness = objectiveValue;
      // Store objective values
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[51]++;
      if (problem.objectives.objectives.length > 0) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[8][0]++;
        cov_hr0h2ihfp().s[52]++;
        solution.objectiveValues[problem.objectives.objectives[0].id] = objectiveValue;
      } else
      /* istanbul ignore next */
      {
        cov_hr0h2ihfp().b[8][1]++;
      }
      // Evaluate constraints
      cov_hr0h2ihfp().s[53]++;
      solution.constraintViolations = [];
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[54]++;
      for (let i =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[55]++, 0); i < constraintFunctions.length; i++) {
        const violation =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[56]++, constraintFunctions[i](variables));
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[57]++;
        solution.constraintViolations.push({
          constraintId: `constraint_${i}`,
          violationType: violation > 0 ?
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[9][0]++, 'inequality') :
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[9][1]++, 'boundary'),
          currentValue: violation,
          requiredValue: 0,
          severity: violation > 0 ?
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[10][0]++, 'major') :
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[10][1]++, 'minor'),
          penalty: violation > 0 ?
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[11][0]++, violation * this.parameters.penaltyCoefficient) :
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[11][1]++, 0)
        });
      }
      // Check feasibility
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[58]++;
      solution.feasible = solution.constraintViolations.every(v => {
        /* istanbul ignore next */
        cov_hr0h2ihfp().f[8]++;
        cov_hr0h2ihfp().s[59]++;
        return v.currentValue <= 0;
      });
      // Apply constraint handling
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[60]++;
      if (
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[13][0]++, !solution.feasible) &&
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[13][1]++, this.parameters.constraintHandling === 'penalty')) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[12][0]++;
        const totalPenalty =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[61]++, solution.constraintViolations.filter(v => {
          /* istanbul ignore next */
          cov_hr0h2ihfp().f[9]++;
          cov_hr0h2ihfp().s[62]++;
          return v.currentValue > 0;
        }).reduce((sum, v) => {
          /* istanbul ignore next */
          cov_hr0h2ihfp().f[10]++;
          cov_hr0h2ihfp().s[63]++;
          return sum + v.penalty;
        }, 0));
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[64]++;
        solution.fitness += totalPenalty;
      } else
      /* istanbul ignore next */
      {
        cov_hr0h2ihfp().b[12][1]++;
      }
      cov_hr0h2ihfp().s[65]++;
      this.evaluationCount++;
    } catch (error) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[66]++;
      console.error('Error evaluating solution:', error);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[67]++;
      solution.fitness = Number.MAX_VALUE;
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[68]++;
      solution.feasible = false;
    }
  }
  /**
   * Convert solution to optimization variables
   */
  solutionToVariables(solution, variableTemplates) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[11]++;
    cov_hr0h2ihfp().s[69]++;
    return variableTemplates.map(template => {
      /* istanbul ignore next */
      cov_hr0h2ihfp().f[12]++;
      cov_hr0h2ihfp().s[70]++;
      return {
        ...template,
        currentValue: solution.variables[template.id]
      };
    });
  }
  /**
   * Perform one iteration of gradient descent
   */
  async performIteration(problem, objectiveFunction, constraintFunctions) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[13]++;
    cov_hr0h2ihfp().s[71]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[14][0]++;
      cov_hr0h2ihfp().s[72]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[14][1]++;
    }
    // Compute gradient
    cov_hr0h2ihfp().s[73]++;
    await this.computeGradient(problem, objectiveFunction, constraintFunctions);
    // Update solution based on variant
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[74]++;
    await this.updateSolution(problem, objectiveFunction, constraintFunctions);
    // Apply constraints if using projection
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[75]++;
    if (this.parameters.constraintHandling === 'projection') {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[15][0]++;
      cov_hr0h2ihfp().s[76]++;
      this.projectSolution(problem);
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[15][1]++;
    }
    // Update best solution
    cov_hr0h2ihfp().s[77]++;
    if (this.currentState.solution.fitness < this.bestSolution.fitness) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[16][0]++;
      cov_hr0h2ihfp().s[78]++;
      this.bestSolution = {
        ...this.currentState.solution
      };
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[16][1]++;
    }
    cov_hr0h2ihfp().s[79]++;
    this.currentState.iteration++;
  }
  /**
   * Compute numerical gradient
   */
  async computeGradient(problem, objectiveFunction, constraintFunctions) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[14]++;
    cov_hr0h2ihfp().s[80]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[17][0]++;
      cov_hr0h2ihfp().s[81]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[17][1]++;
    }
    const currentVariables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[82]++, this.solutionToVariables(this.currentState.solution, problem.variables));
    const h =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[83]++, this.parameters.finiteDifferenceStep);
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[84]++;
    for (let i =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[85]++, 0); i < problem.variables.length; i++) {
      const variable =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[86]++, problem.variables[i]);
      // Skip discrete variables
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[87]++;
      if (
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[19][0]++, variable.discreteValues) &&
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[19][1]++, variable.discreteValues.length > 0)) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[18][0]++;
        cov_hr0h2ihfp().s[88]++;
        this.currentState.gradient[i] = 0;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[89]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_hr0h2ihfp().b[18][1]++;
      }
      const originalValue =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[90]++, currentVariables[i].currentValue);
      let gradient =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[91]++, 0);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[92]++;
      switch (this.parameters.gradientMethod) {
        case 'forward':
          /* istanbul ignore next */
          cov_hr0h2ihfp().b[20][0]++;
          cov_hr0h2ihfp().s[93]++;
          // f'(x) ≈ (f(x+h) - f(x)) / h
          currentVariables[i].currentValue = originalValue + h;
          const forwardValue =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[94]++, objectiveFunction(currentVariables));
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[95]++;
          gradient = (forwardValue - this.currentState.functionValue) / h;
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[96]++;
          break;
        case 'backward':
          /* istanbul ignore next */
          cov_hr0h2ihfp().b[20][1]++;
          cov_hr0h2ihfp().s[97]++;
          // f'(x) ≈ (f(x) - f(x-h)) / h
          currentVariables[i].currentValue = originalValue - h;
          const backwardValue =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[98]++, objectiveFunction(currentVariables));
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[99]++;
          gradient = (this.currentState.functionValue - backwardValue) / h;
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[100]++;
          break;
        case 'central':
          /* istanbul ignore next */
          cov_hr0h2ihfp().b[20][2]++;
          cov_hr0h2ihfp().s[101]++;
          // f'(x) ≈ (f(x+h) - f(x-h)) / (2h)
          currentVariables[i].currentValue = originalValue + h;
          const forwardVal =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[102]++, objectiveFunction(currentVariables));
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[103]++;
          currentVariables[i].currentValue = originalValue - h;
          const backwardVal =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[104]++, objectiveFunction(currentVariables));
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[105]++;
          gradient = (forwardVal - backwardVal) / (2 * h);
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[106]++;
          break;
      }
      // Restore original value
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[107]++;
      currentVariables[i].currentValue = originalValue;
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[108]++;
      this.currentState.gradient[i] = gradient;
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[109]++;
      this.evaluationCount += this.parameters.gradientMethod === 'central' ?
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[21][0]++, 2) :
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[21][1]++, 1);
    }
    // Compute gradient norm
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[110]++;
    this.currentState.gradientNorm = Math.sqrt(this.currentState.gradient.reduce((sum, g) => {
      /* istanbul ignore next */
      cov_hr0h2ihfp().f[15]++;
      cov_hr0h2ihfp().s[111]++;
      return sum + g * g;
    }, 0));
  }
  /**
   * Update solution based on gradient descent variant
   */
  async updateSolution(problem, objectiveFunction, constraintFunctions) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[16]++;
    cov_hr0h2ihfp().s[112]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[22][0]++;
      cov_hr0h2ihfp().s[113]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[22][1]++;
    }
    const stepDirection =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[114]++, this.computeStepDirection());
    // Determine step size
    let stepSize =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[115]++, this.currentState.learningRate);
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[116]++;
    if (this.parameters.lineSearch) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[23][0]++;
      cov_hr0h2ihfp().s[117]++;
      stepSize = await this.performLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[23][1]++;
    }
    // Update solution
    const newVariables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[118]++, {});
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[119]++;
    for (let i =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[120]++, 0); i < problem.variables.length; i++) {
      const variable =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[121]++, problem.variables[i]);
      const currentValue =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[122]++, this.currentState.solution.variables[variable.id]);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[123]++;
      if (
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[25][0]++, variable.discreteValues) &&
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[25][1]++, variable.discreteValues.length > 0)) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[24][0]++;
        cov_hr0h2ihfp().s[124]++;
        // Keep discrete variables unchanged
        newVariables[variable.id] = currentValue;
      } else {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[24][1]++;
        cov_hr0h2ihfp().s[125]++;
        if (typeof currentValue === 'number') {
          /* istanbul ignore next */
          cov_hr0h2ihfp().b[26][0]++;
          // Update continuous variables
          const newValue =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[126]++, currentValue - stepSize * stepDirection[i]);
          // Apply bounds
          const min =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[127]++, typeof variable.bounds.minimum === 'number' ?
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[27][0]++, variable.bounds.minimum) :
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[27][1]++, -Infinity));
          const max =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[128]++, typeof variable.bounds.maximum === 'number' ?
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[28][0]++, variable.bounds.maximum) :
          /* istanbul ignore next */
          (cov_hr0h2ihfp().b[28][1]++, Infinity));
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[129]++;
          newVariables[variable.id] = Math.max(min, Math.min(max, newValue));
        } else {
          /* istanbul ignore next */
          cov_hr0h2ihfp().b[26][1]++;
          cov_hr0h2ihfp().s[130]++;
          newVariables[variable.id] = currentValue;
        }
      }
    }
    // Create new solution
    const newSolution =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[131]++, {
      ...this.currentState.solution,
      id: this.generateSolutionId(),
      variables: newVariables
    });
    // Evaluate new solution
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[132]++;
    await this.evaluateSolution(newSolution, problem, objectiveFunction, constraintFunctions);
    // Update state
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[133]++;
    this.currentState.solution = newSolution;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[134]++;
    this.currentState.stepSize = stepSize;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[135]++;
    this.currentState.functionValue = newSolution.fitness;
  }
  /**
   * Compute step direction based on variant
   */
  computeStepDirection() {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[17]++;
    cov_hr0h2ihfp().s[136]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[29][0]++;
      cov_hr0h2ihfp().s[137]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[29][1]++;
    }
    const gradient =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[138]++, this.currentState.gradient);
    const stepDirection =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[139]++, new Array(gradient.length));
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[140]++;
    switch (this.parameters.variant) {
      case 'standard':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[30][0]++;
        cov_hr0h2ihfp().s[141]++;
        // Standard gradient descent: d = -∇f
        for (let i =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[142]++, 0); i < gradient.length; i++) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[143]++;
          stepDirection[i] = gradient[i];
        }
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[144]++;
        break;
      case 'momentum':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[30][1]++;
        cov_hr0h2ihfp().s[145]++;
        // Momentum: v = β*v + ∇f, d = v
        for (let i =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[146]++, 0); i < gradient.length; i++) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[147]++;
          this.currentState.momentum[i] = this.parameters.momentumCoefficient * this.currentState.momentum[i] + gradient[i];
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[148]++;
          stepDirection[i] = this.currentState.momentum[i];
        }
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[149]++;
        break;
      case 'adam':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[30][2]++;
        // Adam optimizer
        const beta1 =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[150]++, this.parameters.adamBeta1);
        const beta2 =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[151]++, this.parameters.adamBeta2);
        const epsilon =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[152]++, this.parameters.adamEpsilon);
        const t =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[153]++, this.currentState.iteration + 1);
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[154]++;
        for (let i =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[155]++, 0); i < gradient.length; i++) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[156]++;
          // Update biased first moment estimate
          this.currentState.adamM[i] = beta1 * this.currentState.adamM[i] + (1 - beta1) * gradient[i];
          // Update biased second raw moment estimate
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[157]++;
          this.currentState.adamV[i] = beta2 * this.currentState.adamV[i] + (1 - beta2) * gradient[i] * gradient[i];
          // Compute bias-corrected first moment estimate
          const mHat =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[158]++, this.currentState.adamM[i] / (1 - Math.pow(beta1, t)));
          // Compute bias-corrected second raw moment estimate
          const vHat =
          /* istanbul ignore next */
          (cov_hr0h2ihfp().s[159]++, this.currentState.adamV[i] / (1 - Math.pow(beta2, t)));
          // Update step direction
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[160]++;
          stepDirection[i] = mHat / (Math.sqrt(vHat) + epsilon);
        }
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[161]++;
        break;
      case 'rmsprop':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[30][3]++;
        // RMSprop
        const decay =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[162]++, this.parameters.rmspropDecayRate);
        const eps =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[163]++, this.parameters.rmspropEpsilon);
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[164]++;
        for (let i =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[165]++, 0); i < gradient.length; i++) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[166]++;
          this.currentState.rmspropV[i] = decay * this.currentState.rmspropV[i] + (1 - decay) * gradient[i] * gradient[i];
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[167]++;
          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.rmspropV[i]) + eps);
        }
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[168]++;
        break;
      case 'adagrad':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[30][4]++;
        // Adagrad
        const adagradEps =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[169]++, this.parameters.adamEpsilon);
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[170]++;
        for (let i =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[171]++, 0); i < gradient.length; i++) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[172]++;
          this.currentState.adagradG[i] += gradient[i] * gradient[i];
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[173]++;
          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.adagradG[i]) + adagradEps);
        }
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[174]++;
        break;
      default:
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[30][5]++;
        cov_hr0h2ihfp().s[175]++;
        // Default to standard gradient descent
        for (let i =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[176]++, 0); i < gradient.length; i++) {
          /* istanbul ignore next */
          cov_hr0h2ihfp().s[177]++;
          stepDirection[i] = gradient[i];
        }
    }
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[178]++;
    return stepDirection;
  }
  /**
   * Perform line search to find optimal step size
   */
  async performLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[18]++;
    cov_hr0h2ihfp().s[179]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[31][0]++;
      cov_hr0h2ihfp().s[180]++;
      return this.parameters.learningRate;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[31][1]++;
    }
    cov_hr0h2ihfp().s[181]++;
    switch (this.parameters.lineSearchMethod) {
      case 'armijo':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[32][0]++;
        cov_hr0h2ihfp().s[182]++;
        return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);
      case 'wolfe':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[32][1]++;
        cov_hr0h2ihfp().s[183]++;
        return this.wolfeLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);
      case 'golden_section':
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[32][2]++;
        cov_hr0h2ihfp().s[184]++;
        return this.goldenSectionLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);
      default:
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[32][3]++;
        cov_hr0h2ihfp().s[185]++;
        return this.parameters.learningRate;
    }
  }
  /**
   * Armijo line search
   */
  async armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[19]++;
    cov_hr0h2ihfp().s[186]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[33][0]++;
      cov_hr0h2ihfp().s[187]++;
      return this.parameters.learningRate;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[33][1]++;
    }
    const c1 =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[188]++, 1e-4); // Armijo constant
    let alpha =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[189]++, this.parameters.learningRate);
    const maxBacktrack =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[190]++, 20);
    const currentValue =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[191]++, this.currentState.functionValue);
    const gradientDotDirection =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[192]++, this.currentState.gradient.reduce((sum, g, i) => {
      /* istanbul ignore next */
      cov_hr0h2ihfp().f[20]++;
      cov_hr0h2ihfp().s[193]++;
      return sum + g * stepDirection[i];
    }, 0));
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[194]++;
    for (let i =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[195]++, 0); i < maxBacktrack; i++) {
      // Test step
      const testVariables =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[196]++, this.createTestVariables(problem, stepDirection, alpha));
      const testValue =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[197]++, objectiveFunction(testVariables));
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[198]++;
      this.evaluationCount++;
      // Armijo condition
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[199]++;
      if (testValue <= currentValue - c1 * alpha * gradientDotDirection) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[34][0]++;
        cov_hr0h2ihfp().s[200]++;
        return alpha;
      } else
      /* istanbul ignore next */
      {
        cov_hr0h2ihfp().b[34][1]++;
      }
      cov_hr0h2ihfp().s[201]++;
      alpha *= 0.5; // Backtrack
    }
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[202]++;
    return alpha;
  }
  /**
   * Wolfe line search (simplified)
   */
  async wolfeLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[21]++;
    cov_hr0h2ihfp().s[203]++;
    // Simplified implementation - use Armijo for now
    return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);
  }
  /**
   * Golden section line search
   */
  async goldenSectionLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[22]++;
    const phi =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[204]++, (1 + Math.sqrt(5)) / 2); // Golden ratio
    const resphi =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[205]++, 2 - phi);
    let a =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[206]++, 0);
    let b =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[207]++, this.parameters.learningRate * 2);
    const tol =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[208]++, 1e-6);
    // Find initial bracket
    let x1 =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[209]++, a + resphi * (b - a));
    let x2 =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[210]++, a + (1 - resphi) * (b - a));
    let f1 =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[211]++, this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1));
    let f2 =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[212]++, this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2));
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[213]++;
    while (Math.abs(b - a) > tol) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[214]++;
      if (f1 < f2) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[35][0]++;
        cov_hr0h2ihfp().s[215]++;
        b = x2;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[216]++;
        x2 = x1;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[217]++;
        f2 = f1;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[218]++;
        x1 = a + resphi * (b - a);
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[219]++;
        f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);
      } else {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[35][1]++;
        cov_hr0h2ihfp().s[220]++;
        a = x1;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[221]++;
        x1 = x2;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[222]++;
        f1 = f2;
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[223]++;
        x2 = a + (1 - resphi) * (b - a);
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[224]++;
        f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);
      }
    }
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[225]++;
    return (a + b) / 2;
  }
  /**
   * Create test variables for line search
   */
  createTestVariables(problem, stepDirection, alpha) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[23]++;
    cov_hr0h2ihfp().s[226]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[36][0]++;
      cov_hr0h2ihfp().s[227]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[36][1]++;
    }
    cov_hr0h2ihfp().s[228]++;
    return problem.variables.map((variable, i) => {
      /* istanbul ignore next */
      cov_hr0h2ihfp().f[24]++;
      const currentValue =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[229]++, this.currentState.solution.variables[variable.id]);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[230]++;
      if (typeof currentValue === 'number') {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[37][0]++;
        const newValue =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[231]++, currentValue - alpha * stepDirection[i]);
        const min =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[232]++, typeof variable.bounds.minimum === 'number' ?
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[38][0]++, variable.bounds.minimum) :
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[38][1]++, -Infinity));
        const max =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[233]++, typeof variable.bounds.maximum === 'number' ?
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[39][0]++, variable.bounds.maximum) :
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[39][1]++, Infinity));
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[234]++;
        return {
          ...variable,
          currentValue: Math.max(min, Math.min(max, newValue))
        };
      } else {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[37][1]++;
        cov_hr0h2ihfp().s[235]++;
        return {
          ...variable,
          currentValue
        };
      }
    });
  }
  /**
   * Evaluate function at specific step size
   */
  evaluateAtStep(problem, objectiveFunction, stepDirection, alpha) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[25]++;
    const testVariables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[236]++, this.createTestVariables(problem, stepDirection, alpha));
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[237]++;
    this.evaluationCount++;
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[238]++;
    return objectiveFunction(testVariables);
  }
  /**
   * Project solution onto feasible region
   */
  projectSolution(problem) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[26]++;
    cov_hr0h2ihfp().s[239]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[40][0]++;
      cov_hr0h2ihfp().s[240]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[40][1]++;
    }
    // Simple box constraint projection
    const projectedVariables =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[241]++, {});
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[242]++;
    for (const variable of problem.variables) {
      const currentValue =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[243]++, this.currentState.solution.variables[variable.id]);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[244]++;
      if (typeof currentValue === 'number') {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[41][0]++;
        const min =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[245]++, typeof variable.bounds.minimum === 'number' ?
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[42][0]++, variable.bounds.minimum) :
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[42][1]++, -Infinity));
        const max =
        /* istanbul ignore next */
        (cov_hr0h2ihfp().s[246]++, typeof variable.bounds.maximum === 'number' ?
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[43][0]++, variable.bounds.maximum) :
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[43][1]++, Infinity));
        /* istanbul ignore next */
        cov_hr0h2ihfp().s[247]++;
        projectedVariables[variable.id] = Math.max(min, Math.min(max, currentValue));
      } else {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[41][1]++;
        cov_hr0h2ihfp().s[248]++;
        projectedVariables[variable.id] = currentValue;
      }
    }
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[249]++;
    this.currentState.solution.variables = projectedVariables;
  }
  /**
   * Adapt learning rate based on progress
   */
  adaptLearningRate() {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[27]++;
    cov_hr0h2ihfp().s[250]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[44][0]++;
      cov_hr0h2ihfp().s[251]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[44][1]++;
    }
    // Simple adaptive scheme based on gradient norm
    cov_hr0h2ihfp().s[252]++;
    if (this.currentState.gradientNorm > 1.0) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[45][0]++;
      cov_hr0h2ihfp().s[253]++;
      // Large gradient - decrease learning rate
      this.currentState.learningRate = Math.max(this.parameters.learningRateMin, this.currentState.learningRate * 0.9);
    } else {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[45][1]++;
      cov_hr0h2ihfp().s[254]++;
      if (this.currentState.gradientNorm < 0.1) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[46][0]++;
        cov_hr0h2ihfp().s[255]++;
        // Small gradient - increase learning rate
        this.currentState.learningRate = Math.min(this.parameters.learningRateMax, this.currentState.learningRate * 1.1);
      } else
      /* istanbul ignore next */
      {
        cov_hr0h2ihfp().b[46][1]++;
      }
    }
  }
  /**
   * Check termination criteria
   */
  shouldTerminate() {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[28]++;
    cov_hr0h2ihfp().s[256]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[47][0]++;
      cov_hr0h2ihfp().s[257]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[47][1]++;
    }
    // Maximum iterations
    cov_hr0h2ihfp().s[258]++;
    if (this.currentState.iteration >= this.parameters.maxIterations) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[48][0]++;
      cov_hr0h2ihfp().s[259]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[48][1]++;
    }
    // Gradient tolerance
    cov_hr0h2ihfp().s[260]++;
    if (this.currentState.gradientNorm < this.parameters.gradientTolerance) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[49][0]++;
      cov_hr0h2ihfp().s[261]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[49][1]++;
    }
    // Function value convergence
    cov_hr0h2ihfp().s[262]++;
    if (this.history.length >= 10) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[50][0]++;
      const recentHistory =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[263]++, this.history.slice(-10));
      const functionImprovement =
      /* istanbul ignore next */
      (cov_hr0h2ihfp().s[264]++, recentHistory[0].bestFitness - recentHistory[recentHistory.length - 1].bestFitness);
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[265]++;
      if (Math.abs(functionImprovement) < this.parameters.convergenceTolerance) {
        /* istanbul ignore next */
        cov_hr0h2ihfp().b[51][0]++;
        cov_hr0h2ihfp().s[266]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_hr0h2ihfp().b[51][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[50][1]++;
    }
    cov_hr0h2ihfp().s[267]++;
    return false;
  }
  /**
   * Update optimization history
   */
  updateHistory() {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[29]++;
    cov_hr0h2ihfp().s[268]++;
    if (!this.currentState) {
      /* istanbul ignore next */
      cov_hr0h2ihfp().b[52][0]++;
      cov_hr0h2ihfp().s[269]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_hr0h2ihfp().b[52][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[270]++, {
      iteration: this.currentState.iteration,
      bestFitness:
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[53][0]++, this.bestSolution?.fitness) ||
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[53][1]++, this.currentState.functionValue),
      averageFitness: this.currentState.functionValue,
      worstFitness: this.currentState.functionValue,
      diversity: 0,
      // Not applicable for single solution
      constraintViolations: this.currentState.solution.feasible ?
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[54][0]++, 0) :
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[54][1]++, 1),
      timestamp: new Date()
    });
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[271]++;
    this.history.push(history);
  }
  /**
   * Create optimization result
   */
  createOptimizationResult(problem, startTime) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[30]++;
    const executionTime =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[272]++, performance.now() - startTime);
    const statistics =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[273]++, {
      totalIterations:
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[55][0]++, this.currentState?.iteration) ||
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[55][1]++, 0),
      totalEvaluations: this.evaluationCount,
      convergenceIteration:
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[56][0]++, this.currentState?.iteration) ||
      /* istanbul ignore next */
      (cov_hr0h2ihfp().b[56][1]++, 0),
      executionTime,
      bestFitnessHistory: this.history.map(h => {
        /* istanbul ignore next */
        cov_hr0h2ihfp().f[31]++;
        cov_hr0h2ihfp().s[274]++;
        return h.bestFitness;
      }),
      averageFitnessHistory: this.history.map(h => {
        /* istanbul ignore next */
        cov_hr0h2ihfp().f[32]++;
        cov_hr0h2ihfp().s[275]++;
        return h.averageFitness;
      }),
      diversityHistory: this.history.map(h => {
        /* istanbul ignore next */
        cov_hr0h2ihfp().f[33]++;
        cov_hr0h2ihfp().s[276]++;
        return h.diversity;
      }),
      constraintViolationHistory: this.history.map(h => {
        /* istanbul ignore next */
        cov_hr0h2ihfp().f[34]++;
        cov_hr0h2ihfp().s[277]++;
        return h.constraintViolations;
      }),
      algorithmSpecificStats: {
        variant: this.parameters.variant,
        finalLearningRate:
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[57][0]++, this.currentState?.learningRate) ||
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[57][1]++, 0),
        finalGradientNorm:
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[58][0]++, this.currentState?.gradientNorm) ||
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[58][1]++, 0),
        finalStepSize:
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[59][0]++, this.currentState?.stepSize) ||
        /* istanbul ignore next */
        (cov_hr0h2ihfp().b[59][1]++, 0)
      }
    });
    const optimizationHistory =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[278]++, {
      iterations: this.history,
      populationHistory: [],
      parameterHistory: [],
      convergenceMetrics: []
    });
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[279]++;
    return {
      problemId: problem.id,
      status: SystemOptimizationTypes_1.OptimizationStatus.CONVERGED,
      bestSolution: this.bestSolution,
      statistics,
      history: optimizationHistory,
      analysis: {},
      recommendations: [],
      warnings: [],
      errors: []
    };
  }
  // Utility methods
  generateSolutionId() {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[35]++;
    cov_hr0h2ihfp().s[280]++;
    return `gd_sol_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  createSeededRandom(seed) {
    /* istanbul ignore next */
    cov_hr0h2ihfp().f[36]++;
    let state =
    /* istanbul ignore next */
    (cov_hr0h2ihfp().s[281]++, seed);
    /* istanbul ignore next */
    cov_hr0h2ihfp().s[282]++;
    return () => {
      /* istanbul ignore next */
      cov_hr0h2ihfp().f[37]++;
      cov_hr0h2ihfp().s[283]++;
      state = (state * 9301 + 49297) % 233280;
      /* istanbul ignore next */
      cov_hr0h2ihfp().s[284]++;
      return state / 233280;
    };
  }
}
/* istanbul ignore next */
cov_hr0h2ihfp().s[285]++;
exports.GradientDescent = GradientDescent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,