name: Quick CI Tests

on:
  push:
    branches: ["main", "develop", "security-patches-phase1"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  # Quick smoke tests for fast feedback
  quick-checks:
    name: Quick Checks (Lint & Type)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy

      - name: Frontend type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Frontend lint check
        working-directory: ./frontend
        run: npm run lint

      - name: Python lint check
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          mypy . --ignore-missing-imports

  frontend-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: npm run test:coverage

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage-quick
          path: frontend/coverage
          retention-days: 7

  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    strategy:
      matrix:
        python-version: ["3.11"] # Only test primary version for quick CI
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            backend/requirements.txt
            auth-server/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi
          if [ -f auth-server/requirements.txt ]; then
            pip install -r auth-server/requirements.txt
          fi

      - name: Run Python tests
        run: |
          python -m pytest --cov=. --cov-report=xml -v --tb=short

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-quick
          path: coverage.xml
          retention-days: 7

  # Basic smoke test only - comprehensive integration tests run in comprehensive-testing.yml
  smoke-test:
    name: Basic Smoke Test
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test backend startup
        run: |
          timeout 15s python run_backend.py || exit_code=$?
          if [ $exit_code -eq 124 ]; then
            echo "‚úÖ Backend started successfully (timed out as expected)"
            exit 0
          else
            echo "‚ùå Backend failed to start"
            exit 1
          fi

      - name: Check build artifacts
        run: |
          ls -la frontend/.next/ || ls -la frontend/out/
          echo "‚úÖ Frontend build completed successfully"

  # Summary for quick CI
  quick-ci-summary:
    name: Quick CI Summary
    runs-on: ubuntu-latest
    needs: [quick-checks, frontend-tests, backend-tests, smoke-test]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# üöÄ Quick CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Quick Checks**: ${{ needs.quick-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Tests**: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Tests**: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Smoke Test**: ${{ needs.smoke-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.quick-checks.result }}" == "success" && \
                "${{ needs.frontend-tests.result }}" == "success" && \
                "${{ needs.backend-tests.result }}" == "success" && \
                "${{ needs.smoke-test.result }}" == "success" ]]; then
            echo "## ‚úÖ Status: **PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "Quick CI checks completed successfully! üéâ" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Note**: For comprehensive testing including E2E, performance, and security tests, check the 'Comprehensive Testing Pipeline' workflow." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Status: **FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Some quick CI checks failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check results
        if: needs.quick-checks.result != 'success' || needs.frontend-tests.result != 'success' || needs.backend-tests.result != 'success' || needs.smoke-test.result != 'success'
        run: |
          echo "‚ùå Quick CI failed!"
          exit 1
