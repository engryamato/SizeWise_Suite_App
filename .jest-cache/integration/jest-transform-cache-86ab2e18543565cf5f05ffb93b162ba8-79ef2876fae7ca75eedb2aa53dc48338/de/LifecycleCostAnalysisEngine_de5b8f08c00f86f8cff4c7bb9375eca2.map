{"version":3,"names":["cov_15xuv0q0fc","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SystemAnalysisTypes_1","require","LifecycleCostAnalysisEngine","analyzeLifecycleCosts","systemConfiguration","energyAnalysis","analysisParameters","analysisId","generateAnalysisId","id","timestamp","Date","parameters","setDefaultParameters","initialCosts","calculateInitialCosts","operatingCosts","calculateOperatingCosts","maintenanceCosts","calculateMaintenanceCosts","replacementCosts","calculateReplacementCosts","totalCostOfOwnership","calculateTotalCostOfOwnership","costComparison","performCostComparison","sensitivityAnalysis","performSensitivityAnalysis","recommendations","generateCostRecommendations","analysis","systemId","analysisTimestamp","COST_CACHE","set","error","Error","message","provided","analysisHorizon","discountRate","inflationRate","energyEscalationRate","DEFAULT_ESCALATION_RATES","ENERGY","currency","analysisMethod","CostAnalysisMethod","NET_PRESENT_VALUE","uncertaintyLevel","UncertaintyLevel","MEDIUM","designAirflow","designParameters","systemType","equipmentCosts","calculateEquipmentCosts","installationCosts","calculateInstallationCosts","designCosts","calculateDesignCosts","permitsCosts","calculatePermitsCosts","totalInitialCost","total","costPerCFM","costPerSquareFoot","designPressure","fanCostFactor","getFanCostFactor","ductworkCostFactor","fittingsCostFactor","dampersCostFactor","controlsCostFactor","accessoriesCostFactor","fans","ductwork","fittings","dampers","controls","accessories","airflow","pressure","costFactor","factors","laborCosts","materialsCosts","equipmentRental","testing","projectCost","engineeringDesign","drawings","calculations","projectManagement","buildingPermits","inspectionFees","utilityConnections","environmentalFees","annualEnergyCosts","energyCosts","currentCosts","totalCost","totalEnergyPV","yearlyEnergyCosts","year","yearlyEnergyCost","Math","pow","presentValue","push","annualInsurance","annualUtilities","annualCompliance","insurancePV","calculatePresentValue","utilitiesPV","compliancePV","totalOperatingPV","annual","yearlyProjection","escalationRate","MAINTENANCE","insuranceCosts","utilityCosts","complianceCosts","totalAnnual","totalPresentValue","annualCost","years","yearlyValue","maintenanceEscalationRate","preventiveMaintenanceFactor","correctiveMaintenanceFactor","filterReplacementFactor","annualPreventive","annualCorrective","annualFilters","preventivePV","correctivePV","filtersPV","majorOverhaulCost","overhaulYears","filter","overhaulsPV","forEach","overhaulCostInflated","preventiveMaintenance","description","correctiveMaintenance","filterReplacement","majorOverhauls","cost","schedule","materialEscalationRate","MATERIALS","equipmentReplacements","totalReplacementPV","equipmentTypes","life","EQUIPMENT_LIFE","FANS","MOTORS","VFD","DAMPERS","CONTROLS","equipment","replacementYears","length","replacementCost","equipmentPV","inflatedCost","equipmentType","unitCost","salvageValue","calculateSalvageValue","salvagePV","value","totalReplacementCost","netReplacementCost","ductworkRemainingLife","max","DUCTWORK","fansRemainingLife","dampersRemainingLife","ductworkSalvage","fansSalvage","dampersSalvage","totalAnnualizedCost","calculateAnnualizedCost","costBreakdown","amount","percentage","financialMetrics","calculateFinancialMetrics","paybackPeriod","calculateSimplePaybackPeriod","crf","initialCost","annualSavings","npv","calculateNPV","irr","calculateIRR","discountedPayback","calculateDiscountedPayback","profitabilityIndex","netPresentValue","internalRateOfReturn","discountedPaybackPeriod","returnOnInvestment","annualCashFlow","totalCashFlow","Infinity","cumulativePV","alternatives","initialCostMultiplier","operatingCostMultiplier","comparisonResults","map","alt","alternativeName","costDifference","percentageDifference","baselineSystem","recommendedAlternative","reduce","min","current","costRankings","sort","a","baselineCost","sensitivityFactors","parameter","baseValue","variations","sensitivityResults","factor","impacts","variation","adjustedCost","newRate","adjustedValue","resultingCost","costChange","percentageChange","sensitivity","i","abs","v","rankedSensitivities","result","index","impact","rank","keyFindings","flatMap","r","toLocaleString","category","priority","title","potentialSavings","implementationCost","actions","riskLevel","bestAlternative","now","random","toString","substring","exports","VERSION","Map","LABOR","FILTERS"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/LifecycleCostAnalysisEngine.ts"],"sourcesContent":["/**\n * Lifecycle Cost Analysis Engine\n * \n * Comprehensive lifecycle cost analysis service for Phase 3 Priority 3: Advanced System Analysis Tools\n * Provides initial costs, operating costs, maintenance costs, energy costs, and total cost of ownership\n * calculations for HVAC duct systems.\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\nimport {\n  LifecycleCostAnalysis,\n  CostAnalysisParameters,\n  InitialCosts,\n  OperatingCosts,\n  MaintenanceCosts,\n  ReplacementCosts,\n  TotalCostOfOwnership,\n  CostComparison,\n  CostSensitivityAnalysis,\n  CostRecommendation,\n  CostAnalysisMethod,\n  UncertaintyLevel,\n  EquipmentCosts,\n  SystemConfiguration,\n  EnergyAnalysis,\n  TimeFrame\n} from './types/SystemAnalysisTypes';\n\nimport { EnergyEfficiencyAnalysisEngine } from './EnergyEfficiencyAnalysisEngine';\n\n/**\n * Lifecycle Cost Analysis Engine\n * \n * Provides comprehensive lifecycle cost analysis capabilities including:\n * - Initial capital cost analysis\n * - Operating cost projections\n * - Maintenance cost modeling\n * - Replacement cost planning\n * - Total cost of ownership calculations\n * - Cost comparison and sensitivity analysis\n * - Financial metrics (NPV, IRR, Payback)\n */\nexport class LifecycleCostAnalysisEngine {\n  private static readonly VERSION = '3.0.0';\n  private static readonly COST_CACHE = new Map<string, LifecycleCostAnalysis>();\n  \n  // Cost escalation rates (annual)\n  private static readonly DEFAULT_ESCALATION_RATES = {\n    ENERGY: 0.03, // 3% annual energy cost escalation\n    MAINTENANCE: 0.025, // 2.5% annual maintenance cost escalation\n    LABOR: 0.035, // 3.5% annual labor cost escalation\n    MATERIALS: 0.028 // 2.8% annual materials cost escalation\n  };\n\n  // Equipment life expectancy (years)\n  private static readonly EQUIPMENT_LIFE = {\n    FANS: 20,\n    MOTORS: 15,\n    VFD: 12,\n    DUCTWORK: 30,\n    DAMPERS: 20,\n    CONTROLS: 10,\n    FILTERS: 0.25 // 3 months\n  };\n\n  /**\n   * Perform comprehensive lifecycle cost analysis\n   */\n  public static async analyzeLifecycleCosts(\n    systemConfiguration: SystemConfiguration,\n    energyAnalysis: EnergyAnalysis,\n    analysisParameters?: Partial<CostAnalysisParameters>\n  ): Promise<LifecycleCostAnalysis> {\n    try {\n      const analysisId = this.generateAnalysisId(systemConfiguration.id);\n      const timestamp = new Date();\n\n      // Set default analysis parameters\n      const parameters = this.setDefaultParameters(analysisParameters);\n\n      // Calculate initial costs\n      const initialCosts = await this.calculateInitialCosts(systemConfiguration);\n\n      // Calculate operating costs\n      const operatingCosts = await this.calculateOperatingCosts(\n        systemConfiguration,\n        energyAnalysis,\n        parameters\n      );\n\n      // Calculate maintenance costs\n      const maintenanceCosts = await this.calculateMaintenanceCosts(\n        systemConfiguration,\n        parameters\n      );\n\n      // Calculate replacement costs\n      const replacementCosts = await this.calculateReplacementCosts(\n        systemConfiguration,\n        parameters\n      );\n\n      // Calculate total cost of ownership\n      const totalCostOfOwnership = await this.calculateTotalCostOfOwnership(\n        initialCosts,\n        operatingCosts,\n        maintenanceCosts,\n        replacementCosts,\n        parameters\n      );\n\n      // Perform cost comparison\n      const costComparison = await this.performCostComparison(\n        systemConfiguration,\n        totalCostOfOwnership\n      );\n\n      // Perform sensitivity analysis\n      const sensitivityAnalysis = await this.performSensitivityAnalysis(\n        systemConfiguration,\n        parameters,\n        totalCostOfOwnership\n      );\n\n      // Generate cost recommendations\n      const recommendations = await this.generateCostRecommendations(\n        totalCostOfOwnership,\n        sensitivityAnalysis,\n        costComparison\n      );\n\n      const analysis: LifecycleCostAnalysis = {\n        id: analysisId,\n        systemId: systemConfiguration.id,\n        analysisTimestamp: timestamp,\n        analysisParameters: parameters,\n        initialCosts,\n        operatingCosts,\n        maintenanceCosts,\n        replacementCosts,\n        totalCostOfOwnership,\n        costComparison,\n        sensitivityAnalysis,\n        recommendations\n      };\n\n      // Cache the analysis\n      this.COST_CACHE.set(analysisId, analysis);\n\n      return analysis;\n\n    } catch (error) {\n      throw new Error(`Lifecycle cost analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Set default analysis parameters\n   */\n  private static setDefaultParameters(\n    provided?: Partial<CostAnalysisParameters>\n  ): CostAnalysisParameters {\n    return {\n      analysisHorizon: provided?.analysisHorizon || 20, // 20 years\n      discountRate: provided?.discountRate || 0.06, // 6% discount rate\n      inflationRate: provided?.inflationRate || 0.025, // 2.5% inflation\n      energyEscalationRate: provided?.energyEscalationRate || this.DEFAULT_ESCALATION_RATES.ENERGY,\n      currency: provided?.currency || 'USD',\n      analysisMethod: provided?.analysisMethod || CostAnalysisMethod.NET_PRESENT_VALUE,\n      uncertaintyLevel: provided?.uncertaintyLevel || UncertaintyLevel.MEDIUM\n    };\n  }\n\n  /**\n   * Calculate initial system costs\n   */\n  private static async calculateInitialCosts(\n    systemConfiguration: SystemConfiguration\n  ): Promise<InitialCosts> {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const systemType = systemConfiguration.systemType;\n\n    // Equipment costs based on system size and type\n    const equipmentCosts = this.calculateEquipmentCosts(systemConfiguration);\n\n    // Installation costs (typically 40-60% of equipment costs)\n    const installationCosts = this.calculateInstallationCosts(equipmentCosts);\n\n    // Design costs (typically 8-12% of total project cost)\n    const designCosts = this.calculateDesignCosts(equipmentCosts, installationCosts);\n\n    // Permits and fees (typically 2-5% of total project cost)\n    const permitsCosts = this.calculatePermitsCosts(equipmentCosts, installationCosts);\n\n    const totalInitialCost = equipmentCosts.total + installationCosts.total + \n                           designCosts.total + permitsCosts.total;\n\n    return {\n      equipmentCosts,\n      installationCosts,\n      designCosts,\n      permitsCosts,\n      totalInitialCost,\n      costPerCFM: totalInitialCost / designAirflow,\n      costPerSquareFoot: totalInitialCost / 10000 // Assumed building area\n    };\n  }\n\n  /**\n   * Calculate equipment costs breakdown\n   */\n  private static calculateEquipmentCosts(systemConfiguration: SystemConfiguration): EquipmentCosts {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const designPressure = systemConfiguration.designParameters.designPressure;\n\n    // Cost factors based on system size ($/CFM)\n    const fanCostFactor = this.getFanCostFactor(designAirflow, designPressure);\n    const ductworkCostFactor = 8.5; // $/CFM for ductwork\n    const fittingsCostFactor = 2.2; // $/CFM for fittings\n    const dampersCostFactor = 1.8; // $/CFM for dampers\n    const controlsCostFactor = 3.5; // $/CFM for controls\n    const accessoriesCostFactor = 1.2; // $/CFM for accessories\n\n    const fans = designAirflow * fanCostFactor;\n    const ductwork = designAirflow * ductworkCostFactor;\n    const fittings = designAirflow * fittingsCostFactor;\n    const dampers = designAirflow * dampersCostFactor;\n    const controls = designAirflow * controlsCostFactor;\n    const accessories = designAirflow * accessoriesCostFactor;\n\n    return {\n      fans,\n      ductwork,\n      fittings,\n      dampers,\n      controls,\n      accessories,\n      total: fans + ductwork + fittings + dampers + controls + accessories\n    };\n  }\n\n  /**\n   * Get fan cost factor based on size and pressure\n   */\n  private static getFanCostFactor(airflow: number, pressure: number): number {\n    // Base cost factor\n    let costFactor = 12.0; // $/CFM base\n\n    // Size adjustments\n    if (airflow > 50000) costFactor *= 0.85; // Economies of scale\n    else if (airflow < 5000) costFactor *= 1.25; // Small system premium\n\n    // Pressure adjustments\n    if (pressure > 4.0) costFactor *= 1.3; // High pressure premium\n    else if (pressure < 2.0) costFactor *= 0.9; // Low pressure discount\n\n    return costFactor;\n  }\n\n  /**\n   * Calculate installation costs\n   */\n  private static calculateInstallationCosts(equipmentCosts: EquipmentCosts): InstallationCosts {\n    // Installation cost factors (as percentage of equipment cost)\n    const factors = {\n      fans: 0.4, // 40% of fan cost\n      ductwork: 0.6, // 60% of ductwork cost\n      fittings: 0.5, // 50% of fittings cost\n      dampers: 0.3, // 30% of dampers cost\n      controls: 0.8, // 80% of controls cost (complex installation)\n      accessories: 0.4 // 40% of accessories cost\n    };\n\n    const fans = equipmentCosts.fans * factors.fans;\n    const ductwork = equipmentCosts.ductwork * factors.ductwork;\n    const fittings = equipmentCosts.fittings * factors.fittings;\n    const dampers = equipmentCosts.dampers * factors.dampers;\n    const controls = equipmentCosts.controls * factors.controls;\n    const accessories = equipmentCosts.accessories * factors.accessories;\n\n    // Additional installation costs\n    const laborCosts = (fans + ductwork + fittings + dampers + controls + accessories) * 0.6;\n    const materialsCosts = equipmentCosts.total * 0.15; // 15% for installation materials\n    const equipmentRental = equipmentCosts.total * 0.05; // 5% for equipment rental\n    const testing = equipmentCosts.total * 0.03; // 3% for testing and commissioning\n\n    const total = fans + ductwork + fittings + dampers + controls + accessories + \n                 laborCosts + materialsCosts + equipmentRental + testing;\n\n    return {\n      fans,\n      ductwork,\n      fittings,\n      dampers,\n      controls,\n      accessories,\n      laborCosts,\n      materialsCosts,\n      equipmentRental,\n      testing,\n      total\n    };\n  }\n\n  /**\n   * Calculate design costs\n   */\n  private static calculateDesignCosts(\n    equipmentCosts: EquipmentCosts,\n    installationCosts: InstallationCosts\n  ): DesignCosts {\n    const projectCost = equipmentCosts.total + installationCosts.total;\n\n    const engineeringDesign = projectCost * 0.08; // 8% for engineering design\n    const drawings = projectCost * 0.02; // 2% for drawings and specifications\n    const calculations = projectCost * 0.015; // 1.5% for calculations\n    const projectManagement = projectCost * 0.025; // 2.5% for project management\n\n    return {\n      engineeringDesign,\n      drawings,\n      calculations,\n      projectManagement,\n      total: engineeringDesign + drawings + calculations + projectManagement\n    };\n  }\n\n  /**\n   * Calculate permits and fees\n   */\n  private static calculatePermitsCosts(\n    equipmentCosts: EquipmentCosts,\n    installationCosts: InstallationCosts\n  ): PermitsCosts {\n    const projectCost = equipmentCosts.total + installationCosts.total;\n\n    const buildingPermits = projectCost * 0.015; // 1.5% for building permits\n    const inspectionFees = projectCost * 0.008; // 0.8% for inspection fees\n    const utilityConnections = 2500; // Fixed cost for utility connections\n    const environmentalFees = projectCost * 0.005; // 0.5% for environmental fees\n\n    return {\n      buildingPermits,\n      inspectionFees,\n      utilityConnections,\n      environmentalFees,\n      total: buildingPermits + inspectionFees + utilityConnections + environmentalFees\n    };\n  }\n\n  /**\n   * Calculate operating costs over analysis horizon\n   */\n  private static async calculateOperatingCosts(\n    systemConfiguration: SystemConfiguration,\n    energyAnalysis: EnergyAnalysis,\n    parameters: CostAnalysisParameters\n  ): Promise<OperatingCosts> {\n    const analysisHorizon = parameters.analysisHorizon;\n    const energyEscalationRate = parameters.energyEscalationRate;\n    const discountRate = parameters.discountRate;\n\n    // Annual energy costs\n    const annualEnergyCosts = energyAnalysis.energyCosts.currentCosts.totalCost;\n\n    // Calculate present value of energy costs over analysis horizon\n    let totalEnergyPV = 0;\n    const yearlyEnergyCosts: number[] = [];\n\n    for (let year = 1; year <= analysisHorizon; year++) {\n      const yearlyEnergyCost = annualEnergyCosts * Math.pow(1 + energyEscalationRate, year - 1);\n      const presentValue = yearlyEnergyCost / Math.pow(1 + discountRate, year);\n      totalEnergyPV += presentValue;\n      yearlyEnergyCosts.push(yearlyEnergyCost);\n    }\n\n    // Other operating costs\n    const annualInsurance = annualEnergyCosts * 0.02; // 2% of energy costs\n    const annualUtilities = 1200; // Fixed annual utilities\n    const annualCompliance = 800; // Annual compliance and reporting costs\n\n    // Calculate present values for other operating costs\n    const insurancePV = this.calculatePresentValue(annualInsurance, parameters.inflationRate, discountRate, analysisHorizon);\n    const utilitiesPV = this.calculatePresentValue(annualUtilities, parameters.inflationRate, discountRate, analysisHorizon);\n    const compliancePV = this.calculatePresentValue(annualCompliance, parameters.inflationRate, discountRate, analysisHorizon);\n\n    const totalOperatingPV = totalEnergyPV + insurancePV + utilitiesPV + compliancePV;\n\n    return {\n      energyCosts: {\n        annual: annualEnergyCosts,\n        presentValue: totalEnergyPV,\n        yearlyProjection: yearlyEnergyCosts,\n        escalationRate: energyEscalationRate\n      },\n      maintenanceCosts: {\n        annual: 0, // Calculated separately\n        presentValue: 0,\n        yearlyProjection: [],\n        escalationRate: this.DEFAULT_ESCALATION_RATES.MAINTENANCE\n      },\n      insuranceCosts: {\n        annual: annualInsurance,\n        presentValue: insurancePV,\n        escalationRate: parameters.inflationRate\n      },\n      utilityCosts: {\n        annual: annualUtilities,\n        presentValue: utilitiesPV,\n        escalationRate: parameters.inflationRate\n      },\n      complianceCosts: {\n        annual: annualCompliance,\n        presentValue: compliancePV,\n        escalationRate: parameters.inflationRate\n      },\n      totalAnnual: annualEnergyCosts + annualInsurance + annualUtilities + annualCompliance,\n      totalPresentValue: totalOperatingPV\n    };\n  }\n\n  /**\n   * Calculate present value of annual costs\n   */\n  private static calculatePresentValue(\n    annualCost: number,\n    escalationRate: number,\n    discountRate: number,\n    years: number\n  ): number {\n    let presentValue = 0;\n    \n    for (let year = 1; year <= years; year++) {\n      const yearlyValue = annualCost * Math.pow(1 + escalationRate, year - 1);\n      presentValue += yearlyValue / Math.pow(1 + discountRate, year);\n    }\n    \n    return presentValue;\n  }\n\n  /**\n   * Calculate maintenance costs over analysis horizon\n   */\n  private static async calculateMaintenanceCosts(\n    systemConfiguration: SystemConfiguration,\n    parameters: CostAnalysisParameters\n  ): Promise<MaintenanceCosts> {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const analysisHorizon = parameters.analysisHorizon;\n    const discountRate = parameters.discountRate;\n    const maintenanceEscalationRate = this.DEFAULT_ESCALATION_RATES.MAINTENANCE;\n\n    // Annual maintenance costs ($/CFM/year)\n    const preventiveMaintenanceFactor = 0.8; // $/CFM/year\n    const correctiveMaintenanceFactor = 0.4; // $/CFM/year\n    const filterReplacementFactor = 0.6; // $/CFM/year\n\n    const annualPreventive = designAirflow * preventiveMaintenanceFactor;\n    const annualCorrective = designAirflow * correctiveMaintenanceFactor;\n    const annualFilters = designAirflow * filterReplacementFactor;\n\n    // Calculate present values\n    const preventivePV = this.calculatePresentValue(annualPreventive, maintenanceEscalationRate, discountRate, analysisHorizon);\n    const correctivePV = this.calculatePresentValue(annualCorrective, maintenanceEscalationRate, discountRate, analysisHorizon);\n    const filtersPV = this.calculatePresentValue(annualFilters, maintenanceEscalationRate, discountRate, analysisHorizon);\n\n    // Major overhauls (every 10 years)\n    const majorOverhaulCost = designAirflow * 5.0; // $5/CFM\n    const overhaulYears = [10, 20].filter(year => year <= analysisHorizon);\n    let overhaulsPV = 0;\n    \n    overhaulYears.forEach(year => {\n      const overhaulCostInflated = majorOverhaulCost * Math.pow(1 + maintenanceEscalationRate, year - 1);\n      overhaulsPV += overhaulCostInflated / Math.pow(1 + discountRate, year);\n    });\n\n    const totalAnnual = annualPreventive + annualCorrective + annualFilters;\n    const totalPresentValue = preventivePV + correctivePV + filtersPV + overhaulsPV;\n\n    return {\n      preventiveMaintenance: {\n        annual: annualPreventive,\n        presentValue: preventivePV,\n        description: 'Regular inspections, cleaning, and adjustments'\n      },\n      correctiveMaintenance: {\n        annual: annualCorrective,\n        presentValue: correctivePV,\n        description: 'Repairs and component replacements'\n      },\n      filterReplacement: {\n        annual: annualFilters,\n        presentValue: filtersPV,\n        description: 'Regular filter replacements'\n      },\n      majorOverhauls: {\n        cost: majorOverhaulCost,\n        presentValue: overhaulsPV,\n        schedule: overhaulYears,\n        description: 'Major system overhauls and upgrades'\n      },\n      totalAnnual,\n      totalPresentValue,\n      escalationRate: maintenanceEscalationRate\n    };\n  }\n\n  /**\n   * Calculate replacement costs over analysis horizon\n   */\n  private static async calculateReplacementCosts(\n    systemConfiguration: SystemConfiguration,\n    parameters: CostAnalysisParameters\n  ): Promise<ReplacementCosts> {\n    const analysisHorizon = parameters.analysisHorizon;\n    const discountRate = parameters.discountRate;\n    const materialEscalationRate = this.DEFAULT_ESCALATION_RATES.MATERIALS;\n\n    const equipmentReplacements: EquipmentReplacement[] = [];\n    let totalReplacementPV = 0;\n\n    // Calculate replacement costs for each equipment type\n    const equipmentTypes = [\n      { type: 'fans', life: this.EQUIPMENT_LIFE.FANS, costFactor: 12.0 },\n      { type: 'motors', life: this.EQUIPMENT_LIFE.MOTORS, costFactor: 3.5 },\n      { type: 'vfd', life: this.EQUIPMENT_LIFE.VFD, costFactor: 2.8 },\n      { type: 'dampers', life: this.EQUIPMENT_LIFE.DAMPERS, costFactor: 1.8 },\n      { type: 'controls', life: this.EQUIPMENT_LIFE.CONTROLS, costFactor: 3.5 }\n    ];\n\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n\n    equipmentTypes.forEach(equipment => {\n      const replacementYears = [];\n      for (let year = equipment.life; year <= analysisHorizon; year += equipment.life) {\n        replacementYears.push(year);\n      }\n\n      if (replacementYears.length > 0) {\n        const replacementCost = designAirflow * equipment.costFactor;\n        let equipmentPV = 0;\n\n        replacementYears.forEach(year => {\n          const inflatedCost = replacementCost * Math.pow(1 + materialEscalationRate, year - 1);\n          const presentValue = inflatedCost / Math.pow(1 + discountRate, year);\n          equipmentPV += presentValue;\n        });\n\n        equipmentReplacements.push({\n          equipmentType: equipment.type,\n          replacementYears,\n          unitCost: replacementCost,\n          totalPresentValue: equipmentPV,\n          description: `${equipment.type} replacement based on ${equipment.life}-year life expectancy`\n        });\n\n        totalReplacementPV += equipmentPV;\n      }\n    });\n\n    // Salvage value at end of analysis period\n    const salvageValue = this.calculateSalvageValue(systemConfiguration, parameters);\n    const salvagePV = salvageValue / Math.pow(1 + discountRate, analysisHorizon);\n\n    return {\n      equipmentReplacements,\n      salvageValue: {\n        value: salvageValue,\n        presentValue: salvagePV,\n        description: 'Estimated salvage value at end of analysis period'\n      },\n      totalReplacementCost: totalReplacementPV,\n      netReplacementCost: totalReplacementPV - salvagePV\n    };\n  }\n\n  /**\n   * Calculate salvage value at end of analysis period\n   */\n  private static calculateSalvageValue(\n    systemConfiguration: SystemConfiguration,\n    parameters: CostAnalysisParameters\n  ): number {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const analysisHorizon = parameters.analysisHorizon;\n\n    // Calculate remaining life for each equipment type\n    const ductworkRemainingLife = Math.max(0, this.EQUIPMENT_LIFE.DUCTWORK - analysisHorizon);\n    const fansRemainingLife = Math.max(0, this.EQUIPMENT_LIFE.FANS - (analysisHorizon % this.EQUIPMENT_LIFE.FANS));\n    const dampersRemainingLife = Math.max(0, this.EQUIPMENT_LIFE.DAMPERS - (analysisHorizon % this.EQUIPMENT_LIFE.DAMPERS));\n\n    // Calculate salvage value based on remaining useful life\n    const ductworkSalvage = (designAirflow * 8.5) * (ductworkRemainingLife / this.EQUIPMENT_LIFE.DUCTWORK);\n    const fansSalvage = (designAirflow * 12.0) * (fansRemainingLife / this.EQUIPMENT_LIFE.FANS);\n    const dampersSalvage = (designAirflow * 1.8) * (dampersRemainingLife / this.EQUIPMENT_LIFE.DAMPERS);\n\n    return ductworkSalvage + fansSalvage + dampersSalvage;\n  }\n\n  /**\n   * Calculate total cost of ownership\n   */\n  private static async calculateTotalCostOfOwnership(\n    initialCosts: InitialCosts,\n    operatingCosts: OperatingCosts,\n    maintenanceCosts: MaintenanceCosts,\n    replacementCosts: ReplacementCosts,\n    parameters: CostAnalysisParameters\n  ): Promise<TotalCostOfOwnership> {\n    const totalPresentValue = initialCosts.totalInitialCost +\n                             operatingCosts.totalPresentValue +\n                             maintenanceCosts.totalPresentValue +\n                             replacementCosts.netReplacementCost;\n\n    const totalAnnualizedCost = this.calculateAnnualizedCost(totalPresentValue, parameters);\n\n    // Cost breakdown by category\n    const costBreakdown = {\n      initialCosts: {\n        amount: initialCosts.totalInitialCost,\n        percentage: (initialCosts.totalInitialCost / totalPresentValue) * 100\n      },\n      operatingCosts: {\n        amount: operatingCosts.totalPresentValue,\n        percentage: (operatingCosts.totalPresentValue / totalPresentValue) * 100\n      },\n      maintenanceCosts: {\n        amount: maintenanceCosts.totalPresentValue,\n        percentage: (maintenanceCosts.totalPresentValue / totalPresentValue) * 100\n      },\n      replacementCosts: {\n        amount: replacementCosts.netReplacementCost,\n        percentage: (replacementCosts.netReplacementCost / totalPresentValue) * 100\n      }\n    };\n\n    // Financial metrics\n    const financialMetrics = this.calculateFinancialMetrics(\n      initialCosts.totalInitialCost,\n      operatingCosts.energyCosts.annual + maintenanceCosts.totalAnnual,\n      parameters\n    );\n\n    return {\n      totalPresentValue,\n      totalAnnualizedCost,\n      costBreakdown,\n      financialMetrics,\n      analysisParameters: parameters,\n      costPerCFM: totalPresentValue / 10000, // Assuming 10,000 CFM system\n      costPerSquareFoot: totalPresentValue / 10000, // Assuming 10,000 sq ft building\n      paybackPeriod: this.calculateSimplePaybackPeriod(initialCosts.totalInitialCost, operatingCosts.energyCosts.annual)\n    };\n  }\n\n  /**\n   * Calculate annualized cost\n   */\n  private static calculateAnnualizedCost(\n    presentValue: number,\n    parameters: CostAnalysisParameters\n  ): number {\n    const discountRate = parameters.discountRate;\n    const analysisHorizon = parameters.analysisHorizon;\n\n    // Capital recovery factor\n    const crf = (discountRate * Math.pow(1 + discountRate, analysisHorizon)) /\n                (Math.pow(1 + discountRate, analysisHorizon) - 1);\n\n    return presentValue * crf;\n  }\n\n  /**\n   * Calculate financial metrics\n   */\n  private static calculateFinancialMetrics(\n    initialCost: number,\n    annualSavings: number,\n    parameters: CostAnalysisParameters\n  ): FinancialMetrics {\n    const discountRate = parameters.discountRate;\n    const analysisHorizon = parameters.analysisHorizon;\n\n    // Net Present Value (assuming savings compared to baseline)\n    const npv = this.calculateNPV(initialCost, annualSavings, discountRate, analysisHorizon);\n\n    // Internal Rate of Return (simplified calculation)\n    const irr = this.calculateIRR(initialCost, annualSavings, analysisHorizon);\n\n    // Discounted Payback Period\n    const discountedPayback = this.calculateDiscountedPayback(initialCost, annualSavings, discountRate);\n\n    // Profitability Index\n    const profitabilityIndex = (npv + initialCost) / initialCost;\n\n    return {\n      netPresentValue: npv,\n      internalRateOfReturn: irr,\n      paybackPeriod: this.calculateSimplePaybackPeriod(initialCost, annualSavings),\n      discountedPaybackPeriod: discountedPayback,\n      profitabilityIndex,\n      returnOnInvestment: (annualSavings * analysisHorizon - initialCost) / initialCost * 100\n    };\n  }\n\n  /**\n   * Calculate Net Present Value\n   */\n  private static calculateNPV(\n    initialCost: number,\n    annualCashFlow: number,\n    discountRate: number,\n    years: number\n  ): number {\n    let npv = -initialCost;\n\n    for (let year = 1; year <= years; year++) {\n      npv += annualCashFlow / Math.pow(1 + discountRate, year);\n    }\n\n    return npv;\n  }\n\n  /**\n   * Calculate Internal Rate of Return (simplified)\n   */\n  private static calculateIRR(\n    initialCost: number,\n    annualCashFlow: number,\n    years: number\n  ): number {\n    // Simplified IRR calculation using approximation\n    if (annualCashFlow <= 0) return 0;\n\n    const totalCashFlow = annualCashFlow * years;\n    if (totalCashFlow <= initialCost) return 0;\n\n    // Approximation: IRR ≈ (Total Cash Flow / Initial Cost)^(1/years) - 1\n    return Math.pow(totalCashFlow / initialCost, 1 / years) - 1;\n  }\n\n  /**\n   * Calculate simple payback period\n   */\n  private static calculateSimplePaybackPeriod(\n    initialCost: number,\n    annualSavings: number\n  ): number {\n    if (annualSavings <= 0) return Infinity;\n    return initialCost / annualSavings;\n  }\n\n  /**\n   * Calculate discounted payback period\n   */\n  private static calculateDiscountedPayback(\n    initialCost: number,\n    annualCashFlow: number,\n    discountRate: number\n  ): number {\n    let cumulativePV = 0;\n    let year = 0;\n\n    while (cumulativePV < initialCost && year < 50) { // Max 50 years\n      year++;\n      cumulativePV += annualCashFlow / Math.pow(1 + discountRate, year);\n    }\n\n    return year;\n  }\n\n  /**\n   * Perform cost comparison with alternatives\n   */\n  private static async performCostComparison(\n    systemConfiguration: SystemConfiguration,\n    totalCostOfOwnership: TotalCostOfOwnership\n  ): Promise<CostComparison> {\n    // Simplified cost comparison with typical alternatives\n    const alternatives = [\n      {\n        name: 'High Efficiency System',\n        initialCostMultiplier: 1.25,\n        operatingCostMultiplier: 0.8,\n        description: 'Premium efficiency equipment with advanced controls'\n      },\n      {\n        name: 'Standard System',\n        initialCostMultiplier: 1.0,\n        operatingCostMultiplier: 1.0,\n        description: 'Standard efficiency equipment (baseline)'\n      },\n      {\n        name: 'Budget System',\n        initialCostMultiplier: 0.8,\n        operatingCostMultiplier: 1.2,\n        description: 'Lower cost equipment with higher operating costs'\n      }\n    ];\n\n    const comparisonResults = alternatives.map(alt => ({\n      alternativeName: alt.name,\n      description: alt.description,\n      totalCost: totalCostOfOwnership.totalPresentValue *\n                 ((alt.initialCostMultiplier * 0.3) + (alt.operatingCostMultiplier * 0.7)),\n      costDifference: (totalCostOfOwnership.totalPresentValue *\n                      ((alt.initialCostMultiplier * 0.3) + (alt.operatingCostMultiplier * 0.7))) -\n                     totalCostOfOwnership.totalPresentValue,\n      percentageDifference: (((alt.initialCostMultiplier * 0.3) + (alt.operatingCostMultiplier * 0.7)) - 1) * 100\n    }));\n\n    return {\n      baselineSystem: {\n        name: 'Current System Configuration',\n        totalCost: totalCostOfOwnership.totalPresentValue,\n        description: 'System as currently configured'\n      },\n      alternatives: comparisonResults,\n      recommendedAlternative: comparisonResults.reduce((min, current) =>\n        current.totalCost < min.totalCost ? current : min\n      ),\n      costRankings: comparisonResults.sort((a, b) => a.totalCost - b.totalCost)\n    };\n  }\n\n  /**\n   * Perform sensitivity analysis\n   */\n  private static async performSensitivityAnalysis(\n    systemConfiguration: SystemConfiguration,\n    parameters: CostAnalysisParameters,\n    totalCostOfOwnership: TotalCostOfOwnership\n  ): Promise<CostSensitivityAnalysis> {\n    const baselineCost = totalCostOfOwnership.totalPresentValue;\n    const sensitivityFactors = [\n      { parameter: 'discountRate', baseValue: parameters.discountRate, variations: [-0.02, -0.01, 0.01, 0.02] },\n      { parameter: 'energyEscalationRate', baseValue: parameters.energyEscalationRate, variations: [-0.01, -0.005, 0.005, 0.01] },\n      { parameter: 'analysisHorizon', baseValue: parameters.analysisHorizon, variations: [-5, -2, 2, 5] },\n      { parameter: 'initialCost', baseValue: 1.0, variations: [-0.2, -0.1, 0.1, 0.2] }\n    ];\n\n    const sensitivityResults = sensitivityFactors.map(factor => {\n      const impacts = factor.variations.map(variation => {\n        let adjustedCost = baselineCost;\n\n        // Simplified sensitivity calculation\n        if (factor.parameter === 'discountRate') {\n          const newRate = factor.baseValue + variation;\n          adjustedCost = baselineCost * (parameters.discountRate / newRate);\n        } else if (factor.parameter === 'energyEscalationRate') {\n          adjustedCost = baselineCost * (1 + variation * 2); // Simplified impact\n        } else if (factor.parameter === 'analysisHorizon') {\n          adjustedCost = baselineCost * (1 + variation * 0.02); // Simplified impact\n        } else if (factor.parameter === 'initialCost') {\n          adjustedCost = baselineCost * (1 + variation * 0.3); // 30% of total is initial cost\n        }\n\n        return {\n          variation,\n          adjustedValue: factor.baseValue + variation,\n          resultingCost: adjustedCost,\n          costChange: adjustedCost - baselineCost,\n          percentageChange: ((adjustedCost - baselineCost) / baselineCost) * 100\n        };\n      });\n\n      return {\n        parameter: factor.parameter,\n        baseValue: factor.baseValue,\n        impacts,\n        sensitivity: Math.max(...impacts.map(i => Math.abs(i.percentageChange))) /\n                    Math.max(...factor.variations.map(v => Math.abs(v)))\n      };\n    });\n\n    // Identify most sensitive parameters\n    const rankedSensitivities = sensitivityResults\n      .sort((a, b) => b.sensitivity - a.sensitivity)\n      .map((result, index) => {\n        let impact: string;\n        if (result.sensitivity > 2) {\n          impact = 'High';\n        } else if (result.sensitivity > 1) {\n          impact = 'Medium';\n        } else {\n          impact = 'Low';\n        }\n\n        return {\n          rank: index + 1,\n          parameter: result.parameter,\n          sensitivity: result.sensitivity,\n          impact\n        };\n      });\n\n    return {\n      baselineCost,\n      sensitivityResults,\n      rankedSensitivities,\n      keyFindings: [\n        `Most sensitive parameter: ${rankedSensitivities[0].parameter}`,\n        `Cost range: $${Math.min(...sensitivityResults.flatMap(r => r.impacts.map(i => i.resultingCost))).toLocaleString()} - $${Math.max(...sensitivityResults.flatMap(r => r.impacts.map(i => i.resultingCost))).toLocaleString()}`,\n        `Sensitivity analysis shows ${rankedSensitivities.filter(r => r.impact === 'High').length} high-impact parameters`\n      ]\n    };\n  }\n\n  /**\n   * Generate cost recommendations\n   */\n  private static async generateCostRecommendations(\n    totalCostOfOwnership: TotalCostOfOwnership,\n    sensitivityAnalysis: CostSensitivityAnalysis,\n    costComparison: CostComparison\n  ): Promise<CostRecommendation[]> {\n    const recommendations: CostRecommendation[] = [];\n\n    // Operating cost optimization\n    if (totalCostOfOwnership.costBreakdown.operatingCosts.percentage > 60) {\n      recommendations.push({\n        id: 'operating_cost_optimization',\n        category: 'Operating Cost Reduction',\n        priority: 'High',\n        title: 'Focus on Operating Cost Reduction',\n        description: 'Operating costs represent a significant portion of total lifecycle costs. Focus on energy efficiency improvements.',\n        potentialSavings: totalCostOfOwnership.totalPresentValue * 0.15,\n        implementationCost: totalCostOfOwnership.costBreakdown.initialCosts.amount * 0.1,\n        paybackPeriod: 3.5,\n        actions: [\n          'Implement advanced control strategies',\n          'Upgrade to high-efficiency equipment',\n          'Optimize system operation schedules',\n          'Consider demand response programs'\n        ],\n        riskLevel: 'Low'\n      });\n    }\n\n    // Maintenance cost optimization\n    if (totalCostOfOwnership.costBreakdown.maintenanceCosts.percentage > 25) {\n      recommendations.push({\n        id: 'maintenance_optimization',\n        category: 'Maintenance Cost Reduction',\n        priority: 'Medium',\n        title: 'Optimize Maintenance Strategy',\n        description: 'Maintenance costs are higher than typical. Consider predictive maintenance and equipment upgrades.',\n        potentialSavings: totalCostOfOwnership.totalPresentValue * 0.08,\n        implementationCost: 15000,\n        paybackPeriod: 4.2,\n        actions: [\n          'Implement predictive maintenance program',\n          'Upgrade to more reliable equipment',\n          'Train maintenance staff',\n          'Establish preventive maintenance schedules'\n        ],\n        riskLevel: 'Medium'\n      });\n    }\n\n    // Alternative system recommendation\n    const bestAlternative = costComparison.recommendedAlternative;\n    if (bestAlternative.costDifference < -10000) {\n      recommendations.push({\n        id: 'alternative_system',\n        category: 'System Alternative',\n        priority: 'High',\n        title: `Consider ${bestAlternative.alternativeName}`,\n        description: bestAlternative.description,\n        potentialSavings: Math.abs(bestAlternative.costDifference),\n        implementationCost: 0, // Alternative, not additional cost\n        paybackPeriod: 0,\n        actions: [\n          'Evaluate alternative system configuration',\n          'Perform detailed feasibility study',\n          'Consider phased implementation'\n        ],\n        riskLevel: 'Medium'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Generate unique analysis ID\n   */\n  private static generateAnalysisId(systemId: string): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `cost_analysis_${systemId}_${timestamp}_${random}`;\n  }\n}\n\n// Supporting interfaces\ninterface EquipmentReplacement {\n  equipmentType: string;\n  replacementYears: number[];\n  unitCost: number;\n  totalPresentValue: number;\n  description: string;\n}\n\ninterface InstallationCosts {\n  fans: number;\n  ductwork: number;\n  fittings: number;\n  dampers: number;\n  controls: number;\n  accessories: number;\n  laborCosts: number;\n  materialsCosts: number;\n  equipmentRental: number;\n  testing: number;\n  total: number;\n}\n\ninterface DesignCosts {\n  engineeringDesign: number;\n  drawings: number;\n  calculations: number;\n  projectManagement: number;\n  total: number;\n}\n\ninterface PermitsCosts {\n  buildingPermits: number;\n  inspectionFees: number;\n  utilityConnections: number;\n  environmentalFees: number;\n  total: number;\n}\n\ninterface FinancialMetrics {\n  netPresentValue: number;\n  internalRateOfReturn: number;\n  paybackPeriod: number;\n  discountedPaybackPeriod: number;\n  profitabilityIndex: number;\n  returnOnInvestment: number;\n}\n"],"mappings":"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","ignoreList":[]}