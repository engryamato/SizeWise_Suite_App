{"version":3,"names":["cov_1jwpr91tww","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SystemAnalysisTypes_1","require","EnergyEfficiencyAnalysisEngine","analyzeEnergyEfficiency","systemConfiguration","performanceMetrics","operatingSchedule","energyRates","analysisId","generateAnalysisId","id","timestamp","Date","energyConsumption","calculateEnergyConsumption","efficiencyMetrics","calculateEnergyEfficiencyMetrics","energyCosts","calculateEnergyCosts","carbonFootprint","calculateCarbonFootprint","benchmarkComparison","performEnergyBenchmarking","optimizationOpportunities","identifyOptimizationOpportunities","seasonalAnalysis","performSeasonalEnergyAnalysis","analysis","systemId","analysisTimestamp","ENERGY_CACHE","set","error","Error","message","fanPowerKW","fanPower","value","designAirflow","designParameters","schedule","hoursPerDay","daysPerWeek","weeksPerYear","loadProfile","annualOperatingHours","fanConsumption","createEnergyMeasurement","EnergyUnits","KWH","TimeFrame","ANNUALLY","MeasurementSource","CALCULATED","auxiliaryConsumption","ESTIMATED","totalConsumption","timeOfDayConsumption","calculateTimeOfDayConsumption","calculateLoadProfile","peakDemand","calculatePeakDemand","consumptionByTimeOfDay","units","timeFrame","source","accuracy","consumption","hourlyProfile","hour","loadFactor","forEach","profile","push","timeOfDay","powerDemand","baseLoad","peakLoad","averageLoad","diversityFactor","demandProfile","period","demand","peakPower","peakTime","peakDuration","peakFrequency","coincidentFactor","demandCharges","peakShavingPotential","systemEfficiency","specificFanPower","buildingArea","energyUtilizationIndex","KWH_TO_BTU","powerDensity","efficiencyTrend","calculateEfficiencyTrend","calculateEfficiencyBenchmark","overallEfficiency","fanEfficiency","transportEfficiency","currentEfficiency","trendDirection","trendRate","projectedEfficiency","timeHorizon","confidenceLevel","ashraeSFPLimit","industryAverageSFP","bestPracticeSFP","benchmarkType","benchmarkSource","currentValue","benchmarkValue","industryAverage","bestPractice","percentile","calculateSFPPercentile","complianceStatus","improvementPotential","Math","max","sfp","rates","energyRate","demandRate","fixedRate","timeOfUseRates","peak","offPeak","shoulder","energyCost","demandCost","fixedCost","totalCost","currentCosts","currency","projectedCosts","calculateCostProjections","costSavingOpportunities","identifyCostSavingOpportunities","utilityRateStructure","createUtilityRateStructure","currentDemand","annualDemandCost","potentialSavings","timeOfUsePricing","enabled","peakRate","offPeakRate","shoulderRate","peakHours","offPeakHours","calculateTOUSavings","escalationRate","projections","year","escalationFactor","pow","cumulativeCost","opportunities","description","implementationCost","paybackPeriod","savingsType","confidence","rateSchedule","energyCharges","flatRate","tieredRates","tier","threshold","rate","Infinity","ratchetClause","seasonalRates","summer","winter","fixedCharges","customerCharge","facilityCharge","minimumBill","touRates","totalEnergy","peakEnergyPercent","offPeakEnergyPercent","shoulderEnergyPercent","currentCost","touCost","totalEnergyKWh","operationalEmissions","createEmissionMeasurement","EMISSION_FACTORS","GRID_AVERAGE","EmissionUnits","KG_CO2E","EmissionScope","SCOPE_2","embodiedEmissions","SCOPE_3","totalEmissions","emissionsBySource","emissions","percentage","emissionFactor","emissionsTrend","currentEmissions","projectedEmissions","reductionPotential","offsetOpportunities","potential","cost","implementation","currentIntensity","benchmarkIntensity","scope","energyIntensity","current","benchmark","efficiencyRating","grade","calculateEfficiencyGrade","ashrae901","energyStar","leed","calculateLEEDPoints","energySavings","costSavings","emissionReduction","efficiency","points","min","category","energySavingsPotential","costSavingsPotential","complexity","priority","requiredActions","expectedResults","energyReduction","demandReduction","totalSystemPressure","baseConsumption","seasonalBreakdown","season","operatingHours","costs","peakSeasons","opportunity","savings","weatherSensitivity","temperatureCoefficient","humidityCoefficient","baselineTemperature","heatingThreshold","coolingThreshold","now","random","toString","substring","exports","VERSION","Map","HP_TO_KW","CFM_TO_M3S","COAL","NATURAL_GAS","RENEWABLE"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/EnergyEfficiencyAnalysisEngine.ts"],"sourcesContent":["/**\n * Energy Efficiency Analysis Engine\n * \n * Comprehensive energy efficiency analysis service for Phase 3 Priority 3: Advanced System Analysis Tools\n * Provides energy consumption analysis, fan power optimization, lifecycle energy calculations,\n * and carbon footprint assessment tools for HVAC duct systems.\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\nimport {\n  EnergyAnalysis,\n  EnergyConsumption,\n  EnergyEfficiencyMetrics,\n  EnergyCosts,\n  CarbonFootprint,\n  EnergyBenchmark,\n  EnergyOptimizationOpportunity,\n  SeasonalEnergyAnalysis,\n  EnergyMeasurement,\n  EnergyUnits,\n  TimeFrame,\n  SystemConfiguration,\n  PerformanceMetrics,\n  EmissionMeasurement,\n  EmissionUnits,\n  EmissionScope,\n  MeasurementSource\n} from './types/SystemAnalysisTypes';\n\nimport { SystemPerformanceAnalysisEngine } from './SystemPerformanceAnalysisEngine';\nimport { AirPropertiesCalculator } from './AirPropertiesCalculator';\n\n/**\n * Energy Efficiency Analysis Engine\n * \n * Provides comprehensive energy efficiency analysis capabilities including:\n * - Energy consumption breakdown and analysis\n * - Fan power optimization calculations\n * - Lifecycle energy cost projections\n * - Carbon footprint assessment\n * - Energy benchmarking and comparison\n * - Seasonal energy analysis\n */\nexport class EnergyEfficiencyAnalysisEngine {\n  private static readonly VERSION = '3.0.0';\n  private static readonly ENERGY_CACHE = new Map<string, EnergyAnalysis>();\n  \n  // Energy conversion constants\n  private static readonly KWH_TO_BTU = 3412.14;\n  private static readonly HP_TO_KW = 0.746;\n  private static readonly CFM_TO_M3S = 0.000471947;\n  \n  // Carbon emission factors (kg CO2e per kWh)\n  private static readonly EMISSION_FACTORS = {\n    GRID_AVERAGE: 0.4, // US grid average\n    COAL: 0.82,\n    NATURAL_GAS: 0.35,\n    RENEWABLE: 0.02\n  };\n\n  /**\n   * Perform comprehensive energy efficiency analysis\n   */\n  public static async analyzeEnergyEfficiency(\n    systemConfiguration: SystemConfiguration,\n    performanceMetrics: PerformanceMetrics,\n    operatingSchedule?: OperatingSchedule,\n    energyRates?: EnergyRates\n  ): Promise<EnergyAnalysis> {\n    try {\n      const analysisId = this.generateAnalysisId(systemConfiguration.id);\n      const timestamp = new Date();\n\n      // Calculate energy consumption breakdown\n      const energyConsumption = await this.calculateEnergyConsumption(\n        systemConfiguration,\n        performanceMetrics,\n        operatingSchedule\n      );\n\n      // Calculate efficiency metrics\n      const efficiencyMetrics = await this.calculateEnergyEfficiencyMetrics(\n        systemConfiguration,\n        performanceMetrics,\n        energyConsumption\n      );\n\n      // Calculate energy costs\n      const energyCosts = await this.calculateEnergyCosts(\n        energyConsumption,\n        energyRates\n      );\n\n      // Calculate carbon footprint\n      const carbonFootprint = await this.calculateCarbonFootprint(\n        energyConsumption,\n        systemConfiguration\n      );\n\n      // Perform benchmark comparison\n      const benchmarkComparison = await this.performEnergyBenchmarking(\n        systemConfiguration,\n        efficiencyMetrics\n      );\n\n      // Identify optimization opportunities\n      const optimizationOpportunities = await this.identifyOptimizationOpportunities(\n        systemConfiguration,\n        performanceMetrics,\n        efficiencyMetrics,\n        energyCosts\n      );\n\n      // Perform seasonal analysis\n      const seasonalAnalysis = await this.performSeasonalEnergyAnalysis(\n        systemConfiguration,\n        energyConsumption\n      );\n\n      const analysis: EnergyAnalysis = {\n        id: analysisId,\n        systemId: systemConfiguration.id,\n        analysisTimestamp: timestamp,\n        energyConsumption,\n        efficiencyMetrics,\n        energyCosts,\n        carbonFootprint,\n        benchmarkComparison,\n        optimizationOpportunities,\n        seasonalAnalysis\n      };\n\n      // Cache the analysis\n      this.ENERGY_CACHE.set(analysisId, analysis);\n\n      return analysis;\n\n    } catch (error) {\n      throw new Error(`Energy efficiency analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Calculate comprehensive energy consumption breakdown\n   */\n  private static async calculateEnergyConsumption(\n    systemConfiguration: SystemConfiguration,\n    performanceMetrics: PerformanceMetrics,\n    operatingSchedule?: OperatingSchedule\n  ): Promise<EnergyConsumption> {\n    const fanPowerKW = performanceMetrics.fanPower.value;\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    \n    // Default operating schedule if not provided\n    const schedule = operatingSchedule || {\n      hoursPerDay: 12,\n      daysPerWeek: 5,\n      weeksPerYear: 50,\n      loadProfile: 'constant' as const\n    };\n\n    const annualOperatingHours = schedule.hoursPerDay * schedule.daysPerWeek * schedule.weeksPerYear;\n\n    // Calculate fan energy consumption\n    const fanConsumption = this.createEnergyMeasurement(\n      fanPowerKW * annualOperatingHours,\n      EnergyUnits.KWH,\n      TimeFrame.ANNUALLY,\n      MeasurementSource.CALCULATED\n    );\n\n    // Calculate auxiliary equipment consumption (10% of fan power typically)\n    const auxiliaryConsumption = this.createEnergyMeasurement(\n      fanPowerKW * 0.1 * annualOperatingHours,\n      EnergyUnits.KWH,\n      TimeFrame.ANNUALLY,\n      MeasurementSource.ESTIMATED\n    );\n\n    // Total consumption\n    const totalConsumption = this.createEnergyMeasurement(\n      fanConsumption.value + auxiliaryConsumption.value,\n      EnergyUnits.KWH,\n      TimeFrame.ANNUALLY,\n      MeasurementSource.CALCULATED\n    );\n\n    // Calculate time-of-day consumption profile\n    const timeOfDayConsumption = this.calculateTimeOfDayConsumption(\n      fanPowerKW,\n      schedule\n    );\n\n    // Calculate load profile\n    const loadProfile = this.calculateLoadProfile(fanPowerKW, schedule);\n\n    // Calculate peak demand\n    const peakDemand = this.calculatePeakDemand(fanPowerKW, schedule);\n\n    return {\n      totalConsumption,\n      fanConsumption,\n      auxiliaryConsumption,\n      consumptionByTimeOfDay: timeOfDayConsumption,\n      loadProfile,\n      peakDemand\n    };\n  }\n\n  /**\n   * Create standardized energy measurement\n   */\n  private static createEnergyMeasurement(\n    value: number,\n    units: EnergyUnits,\n    timeFrame: TimeFrame,\n    source: MeasurementSource,\n    accuracy: number = 0.9\n  ): EnergyMeasurement {\n    return {\n      value,\n      units,\n      timeFrame,\n      accuracy,\n      source\n    };\n  }\n\n  /**\n   * Calculate time-of-day energy consumption\n   */\n  private static calculateTimeOfDayConsumption(\n    fanPowerKW: number,\n    schedule: OperatingSchedule\n  ): TimeOfDayConsumption[] {\n    const consumption: TimeOfDayConsumption[] = [];\n    \n    // Simplified time-of-day profile\n    const hourlyProfile = [\n      { hour: 6, loadFactor: 0.8 },\n      { hour: 8, loadFactor: 1.0 },\n      { hour: 12, loadFactor: 0.9 },\n      { hour: 17, loadFactor: 1.0 },\n      { hour: 20, loadFactor: 0.6 },\n      { hour: 22, loadFactor: 0.3 }\n    ];\n\n    hourlyProfile.forEach(profile => {\n      consumption.push({\n        timeOfDay: `${profile.hour}:00`,\n        powerDemand: fanPowerKW * profile.loadFactor,\n        energyConsumption: fanPowerKW * profile.loadFactor * 1, // 1 hour\n        loadFactor: profile.loadFactor\n      });\n    });\n\n    return consumption;\n  }\n\n  /**\n   * Calculate system load profile\n   */\n  private static calculateLoadProfile(\n    fanPowerKW: number,\n    schedule: OperatingSchedule\n  ): LoadProfile {\n    return {\n      baseLoad: fanPowerKW * 0.3, // 30% base load\n      peakLoad: fanPowerKW * 1.0, // 100% peak load\n      averageLoad: fanPowerKW * 0.75, // 75% average load\n      loadFactor: 0.75, // Average/Peak\n      diversityFactor: 0.85, // Accounting for non-coincident peaks\n      demandProfile: [\n        { period: 'morning', demand: fanPowerKW * 0.8 },\n        { period: 'midday', demand: fanPowerKW * 1.0 },\n        { period: 'afternoon', demand: fanPowerKW * 0.9 },\n        { period: 'evening', demand: fanPowerKW * 0.6 }\n      ]\n    };\n  }\n\n  /**\n   * Calculate peak demand characteristics\n   */\n  private static calculatePeakDemand(\n    fanPowerKW: number,\n    schedule: OperatingSchedule\n  ): PeakDemand {\n    return {\n      peakPower: fanPowerKW,\n      peakTime: '14:00', // 2 PM typical peak\n      peakDuration: 2, // 2 hours\n      peakFrequency: 'daily' as const,\n      coincidentFactor: 0.9, // 90% coincident with utility peak\n      demandCharges: fanPowerKW * 15, // $15/kW typical demand charge\n      peakShavingPotential: fanPowerKW * 0.2 // 20% potential reduction\n    };\n  }\n\n  /**\n   * Calculate energy efficiency metrics\n   */\n  private static async calculateEnergyEfficiencyMetrics(\n    systemConfiguration: SystemConfiguration,\n    performanceMetrics: PerformanceMetrics,\n    energyConsumption: EnergyConsumption\n  ): Promise<EnergyEfficiencyMetrics> {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const fanPowerKW = performanceMetrics.fanPower.value;\n    const systemEfficiency = performanceMetrics.systemEfficiency.value;\n\n    // Calculate Specific Fan Power (SFP)\n    const specificFanPower = (fanPowerKW * 1000) / designAirflow; // W/CFM\n\n    // Calculate Energy Utilization Index (EUI)\n    const buildingArea = 10000; // Assumed building area in sq ft\n    const energyUtilizationIndex = (energyConsumption.totalConsumption.value * this.KWH_TO_BTU) / buildingArea;\n\n    // Calculate power density\n    const powerDensity = (fanPowerKW * 1000) / buildingArea; // W/sq ft\n\n    // Calculate efficiency trend (simplified)\n    const efficiencyTrend = this.calculateEfficiencyTrend(systemEfficiency);\n\n    // Benchmark comparison\n    const benchmarkComparison = this.calculateEfficiencyBenchmark(\n      specificFanPower,\n      systemEfficiency\n    );\n\n    return {\n      overallEfficiency: systemEfficiency,\n      fanEfficiency: performanceMetrics.fanEfficiency.value,\n      systemEfficiency: systemEfficiency,\n      transportEfficiency: performanceMetrics.transportEfficiency.value,\n      specificFanPower,\n      energyUtilizationIndex,\n      powerDensity,\n      efficiencyTrend,\n      benchmarkComparison\n    };\n  }\n\n  /**\n   * Calculate efficiency trend\n   */\n  private static calculateEfficiencyTrend(currentEfficiency: number): EfficiencyTrend {\n    return {\n      currentEfficiency,\n      trendDirection: 'stable' as const,\n      trendRate: 0, // % per year\n      projectedEfficiency: currentEfficiency,\n      timeHorizon: 12, // months\n      confidenceLevel: 80\n    };\n  }\n\n  /**\n   * Calculate efficiency benchmark\n   */\n  private static calculateEfficiencyBenchmark(\n    specificFanPower: number,\n    systemEfficiency: number\n  ): EfficiencyBenchmark {\n    // ASHRAE 90.1 SFP limits\n    const ashraeSFPLimit = 1.25; // W/CFM for VAV systems\n    const industryAverageSFP = 1.1; // W/CFM\n    const bestPracticeSFP = 0.8; // W/CFM\n\n    return {\n      benchmarkType: 'industry_standard' as const,\n      benchmarkSource: 'ASHRAE 90.1',\n      currentValue: specificFanPower,\n      benchmarkValue: ashraeSFPLimit,\n      industryAverage: industryAverageSFP,\n      bestPractice: bestPracticeSFP,\n      percentile: this.calculateSFPPercentile(specificFanPower),\n      complianceStatus: specificFanPower <= ashraeSFPLimit ? 'compliant' : 'non_compliant',\n      improvementPotential: Math.max(0, specificFanPower - bestPracticeSFP)\n    };\n  }\n\n  /**\n   * Calculate SFP percentile ranking\n   */\n  private static calculateSFPPercentile(sfp: number): number {\n    // Simplified percentile calculation based on typical SFP distribution\n    if (sfp <= 0.8) return 95;\n    if (sfp <= 1.0) return 80;\n    if (sfp <= 1.1) return 60;\n    if (sfp <= 1.25) return 40;\n    if (sfp <= 1.5) return 20;\n    return 5;\n  }\n\n  /**\n   * Calculate energy costs\n   */\n  private static async calculateEnergyCosts(\n    energyConsumption: EnergyConsumption,\n    energyRates?: EnergyRates\n  ): Promise<EnergyCosts> {\n    // Default energy rates if not provided\n    const rates = energyRates || {\n      energyRate: 0.12, // $/kWh\n      demandRate: 15.0, // $/kW\n      fixedRate: 25.0, // $/month\n      timeOfUseRates: {\n        peak: 0.18,\n        offPeak: 0.08,\n        shoulder: 0.12\n      }\n    };\n\n    // Calculate current costs\n    const energyCost = energyConsumption.totalConsumption.value * rates.energyRate;\n    const demandCost = energyConsumption.peakDemand.peakPower * rates.demandRate * 12; // Annual\n    const fixedCost = rates.fixedRate * 12; // Annual\n    const totalCost = energyCost + demandCost + fixedCost;\n\n    const currentCosts = {\n      totalCost,\n      energyCost,\n      demandCost,\n      fixedCost,\n      currency: 'USD',\n      timeFrame: TimeFrame.ANNUALLY\n    };\n\n    // Calculate projected costs (5-year projection)\n    const projectedCosts = this.calculateCostProjections(currentCosts, 0.03); // 3% annual escalation\n\n    // Identify cost saving opportunities\n    const costSavingOpportunities = this.identifyCostSavingOpportunities(\n      energyConsumption,\n      currentCosts\n    );\n\n    // Create utility rate structure\n    const utilityRateStructure = this.createUtilityRateStructure(rates);\n\n    return {\n      currentCosts,\n      projectedCosts,\n      costSavingOpportunities,\n      utilityRateStructure,\n      demandCharges: {\n        currentDemand: energyConsumption.peakDemand.peakPower,\n        demandRate: rates.demandRate,\n        annualDemandCost: demandCost,\n        peakShavingPotential: energyConsumption.peakDemand.peakShavingPotential,\n        potentialSavings: energyConsumption.peakDemand.peakShavingPotential * rates.demandRate * 12\n      },\n      timeOfUsePricing: {\n        enabled: true,\n        peakRate: rates.timeOfUseRates.peak,\n        offPeakRate: rates.timeOfUseRates.offPeak,\n        shoulderRate: rates.timeOfUseRates.shoulder,\n        peakHours: '12:00-18:00',\n        offPeakHours: '22:00-06:00',\n        potentialSavings: this.calculateTOUSavings(energyConsumption, rates.timeOfUseRates)\n      }\n    };\n  }\n\n  /**\n   * Calculate cost projections\n   */\n  private static calculateCostProjections(\n    currentCosts: any,\n    escalationRate: number\n  ): CostProjection[] {\n    const projections: CostProjection[] = [];\n    \n    for (let year = 1; year <= 5; year++) {\n      const escalationFactor = Math.pow(1 + escalationRate, year);\n      projections.push({\n        year,\n        totalCost: currentCosts.totalCost * escalationFactor,\n        energyCost: currentCosts.energyCost * escalationFactor,\n        demandCost: currentCosts.demandCost * escalationFactor,\n        fixedCost: currentCosts.fixedCost * escalationFactor,\n        escalationRate,\n        cumulativeCost: currentCosts.totalCost * ((Math.pow(1 + escalationRate, year) - 1) / escalationRate)\n      });\n    }\n\n    return projections;\n  }\n\n  /**\n   * Identify cost saving opportunities\n   */\n  private static identifyCostSavingOpportunities(\n    energyConsumption: EnergyConsumption,\n    currentCosts: any\n  ): CostSavingOpportunity[] {\n    const opportunities: CostSavingOpportunity[] = [];\n\n    // Peak demand reduction opportunity\n    if (energyConsumption.peakDemand.peakShavingPotential > 0) {\n      opportunities.push({\n        id: 'peak_demand_reduction',\n        name: 'Peak Demand Reduction',\n        description: 'Reduce peak demand through load scheduling and control optimization',\n        potentialSavings: energyConsumption.peakDemand.peakShavingPotential * 15 * 12, // $15/kW * 12 months\n        implementationCost: 5000,\n        paybackPeriod: 18, // months\n        savingsType: 'demand_reduction' as const,\n        confidence: 0.8\n      });\n    }\n\n    // Energy efficiency improvement\n    opportunities.push({\n      id: 'efficiency_improvement',\n      name: 'System Efficiency Improvement',\n      description: 'Improve overall system efficiency through equipment upgrades and optimization',\n      potentialSavings: currentCosts.energyCost * 0.15, // 15% energy savings\n      implementationCost: 15000,\n      paybackPeriod: 36, // months\n      savingsType: 'energy_reduction' as const,\n      confidence: 0.7\n    });\n\n    return opportunities;\n  }\n\n  /**\n   * Create utility rate structure\n   */\n  private static createUtilityRateStructure(rates: EnergyRates): UtilityRateStructure {\n    return {\n      rateSchedule: 'Commercial General Service',\n      energyCharges: {\n        flatRate: rates.energyRate,\n        tieredRates: [\n          { tier: 1, threshold: 1000, rate: rates.energyRate * 0.9 },\n          { tier: 2, threshold: 5000, rate: rates.energyRate },\n          { tier: 3, threshold: Infinity, rate: rates.energyRate * 1.1 }\n        ]\n      },\n      demandCharges: {\n        rate: rates.demandRate,\n        ratchetClause: true,\n        seasonalRates: {\n          summer: rates.demandRate * 1.2,\n          winter: rates.demandRate * 0.8\n        }\n      },\n      fixedCharges: {\n        customerCharge: rates.fixedRate,\n        facilityCharge: 0,\n        minimumBill: rates.fixedRate\n      },\n      timeOfUseRates: rates.timeOfUseRates\n    };\n  }\n\n  /**\n   * Calculate time-of-use savings potential\n   */\n  private static calculateTOUSavings(\n    energyConsumption: EnergyConsumption,\n    touRates: any\n  ): number {\n    // Simplified TOU savings calculation\n    const totalEnergy = energyConsumption.totalConsumption.value;\n    const peakEnergyPercent = 0.3; // 30% during peak hours\n    const offPeakEnergyPercent = 0.4; // 40% during off-peak hours\n    const shoulderEnergyPercent = 0.3; // 30% during shoulder hours\n\n    const currentCost = totalEnergy * 0.12; // Flat rate\n    const touCost = (totalEnergy * peakEnergyPercent * touRates.peak) +\n                   (totalEnergy * offPeakEnergyPercent * touRates.offPeak) +\n                   (totalEnergy * shoulderEnergyPercent * touRates.shoulder);\n\n    return Math.max(0, currentCost - touCost);\n  }\n\n  /**\n   * Calculate carbon footprint\n   */\n  private static async calculateCarbonFootprint(\n    energyConsumption: EnergyConsumption,\n    systemConfiguration: SystemConfiguration\n  ): Promise<CarbonFootprint> {\n    const totalEnergyKWh = energyConsumption.totalConsumption.value;\n\n    // Calculate operational emissions\n    const operationalEmissions = this.createEmissionMeasurement(\n      totalEnergyKWh * this.EMISSION_FACTORS.GRID_AVERAGE,\n      EmissionUnits.KG_CO2E,\n      TimeFrame.ANNUALLY,\n      EmissionScope.SCOPE_2\n    );\n\n    // Calculate embodied emissions (simplified)\n    const embodiedEmissions = this.createEmissionMeasurement(\n      500, // Simplified embodied carbon for HVAC system\n      EmissionUnits.KG_CO2E,\n      TimeFrame.ANNUALLY,\n      EmissionScope.SCOPE_3\n    );\n\n    // Total emissions\n    const totalEmissions = this.createEmissionMeasurement(\n      operationalEmissions.value + embodiedEmissions.value,\n      EmissionUnits.KG_CO2E,\n      TimeFrame.ANNUALLY,\n      EmissionScope.SCOPE_2\n    );\n\n    // Emissions by source\n    const emissionsBySource = [\n      {\n        source: 'Electricity Grid',\n        emissions: operationalEmissions.value,\n        percentage: (operationalEmissions.value / totalEmissions.value) * 100,\n        emissionFactor: this.EMISSION_FACTORS.GRID_AVERAGE\n      },\n      {\n        source: 'Embodied Carbon',\n        emissions: embodiedEmissions.value,\n        percentage: (embodiedEmissions.value / totalEmissions.value) * 100,\n        emissionFactor: 0\n      }\n    ];\n\n    // Emissions trend (simplified)\n    const emissionsTrend = {\n      currentEmissions: totalEmissions.value,\n      trendDirection: 'stable' as const,\n      projectedEmissions: totalEmissions.value,\n      reductionPotential: totalEmissions.value * 0.3, // 30% reduction potential\n      timeHorizon: 10 // years\n    };\n\n    // Offset opportunities\n    const offsetOpportunities = [\n      {\n        type: 'Renewable Energy',\n        potential: operationalEmissions.value * 0.8, // 80% offset potential\n        cost: operationalEmissions.value * 0.02, // $0.02/kg CO2e\n        implementation: 'On-site solar or renewable energy credits'\n      },\n      {\n        type: 'Energy Efficiency',\n        potential: operationalEmissions.value * 0.2, // 20% reduction potential\n        cost: 0, // Cost savings\n        implementation: 'System optimization and efficiency improvements'\n      }\n    ];\n\n    // Benchmark comparison\n    const benchmarkComparison = {\n      benchmarkType: 'Industry Average',\n      currentIntensity: totalEmissions.value / systemConfiguration.designParameters.designAirflow, // kg CO2e/CFM\n      benchmarkIntensity: 0.15, // Industry average\n      percentile: 60,\n      improvementPotential: totalEmissions.value * 0.25\n    };\n\n    return {\n      totalEmissions,\n      operationalEmissions,\n      embodiedEmissions,\n      emissionsBySource,\n      emissionsTrend,\n      offsetOpportunities,\n      benchmarkComparison\n    };\n  }\n\n  /**\n   * Create standardized emission measurement\n   */\n  private static createEmissionMeasurement(\n    value: number,\n    units: EmissionUnits,\n    timeFrame: TimeFrame,\n    scope: EmissionScope,\n    accuracy: number = 0.8\n  ): EmissionMeasurement {\n    return {\n      value,\n      units,\n      timeFrame,\n      scope,\n      accuracy\n    };\n  }\n\n  /**\n   * Perform energy benchmarking\n   */\n  private static async performEnergyBenchmarking(\n    systemConfiguration: SystemConfiguration,\n    efficiencyMetrics: EnergyEfficiencyMetrics\n  ): Promise<EnergyBenchmark> {\n    const sfp = efficiencyMetrics.specificFanPower;\n    const systemEfficiency = efficiencyMetrics.systemEfficiency;\n\n    return {\n      benchmarkType: 'Industry Standard',\n      benchmarkSource: 'ASHRAE 90.1 and Industry Data',\n      energyIntensity: {\n        current: sfp,\n        benchmark: 1.25, // ASHRAE 90.1 limit\n        industryAverage: 1.1,\n        bestPractice: 0.8,\n        percentile: this.calculateSFPPercentile(sfp)\n      },\n      efficiencyRating: {\n        current: systemEfficiency,\n        benchmark: 80,\n        industryAverage: 82,\n        bestPractice: 90,\n        grade: this.calculateEfficiencyGrade(systemEfficiency)\n      },\n      complianceStatus: {\n        ashrae901: sfp <= 1.25 ? 'compliant' : 'non_compliant',\n        energyStar: systemEfficiency >= 85 ? 'qualified' : 'not_qualified',\n        leed: this.calculateLEEDPoints(sfp, systemEfficiency)\n      },\n      improvementPotential: {\n        energySavings: Math.max(0, (sfp - 0.8) / sfp * 100), // % savings potential\n        costSavings: 0, // Would be calculated based on energy costs\n        emissionReduction: 0 // Would be calculated based on carbon intensity\n      }\n    };\n  }\n\n  /**\n   * Calculate efficiency grade\n   */\n  private static calculateEfficiencyGrade(efficiency: number): string {\n    if (efficiency >= 90) return 'A+';\n    if (efficiency >= 85) return 'A';\n    if (efficiency >= 80) return 'B';\n    if (efficiency >= 75) return 'C';\n    if (efficiency >= 70) return 'D';\n    return 'F';\n  }\n\n  /**\n   * Calculate LEED points\n   */\n  private static calculateLEEDPoints(sfp: number, efficiency: number): number {\n    let points = 0;\n\n    // LEED points for fan power efficiency\n    if (sfp <= 0.8) points += 2;\n    else if (sfp <= 1.0) points += 1;\n\n    // LEED points for system efficiency\n    if (efficiency >= 85) points += 1;\n\n    return Math.min(points, 3); // Maximum 3 points\n  }\n\n  /**\n   * Identify optimization opportunities\n   */\n  private static async identifyOptimizationOpportunities(\n    systemConfiguration: SystemConfiguration,\n    performanceMetrics: PerformanceMetrics,\n    efficiencyMetrics: EnergyEfficiencyMetrics,\n    energyCosts: EnergyCosts\n  ): Promise<EnergyOptimizationOpportunity[]> {\n    const opportunities: EnergyOptimizationOpportunity[] = [];\n\n    // Fan speed optimization\n    if (efficiencyMetrics.specificFanPower > 1.0) {\n      opportunities.push({\n        id: 'fan_speed_optimization',\n        name: 'Fan Speed Optimization',\n        description: 'Optimize fan speed control to reduce energy consumption while maintaining comfort',\n        category: 'Control Optimization',\n        energySavingsPotential: 15, // %\n        costSavingsPotential: energyCosts.currentCosts.energyCost * 0.15,\n        implementationCost: 3000,\n        paybackPeriod: 12, // months\n        complexity: 'Low',\n        priority: 'High',\n        requiredActions: [\n          'Install VFD if not present',\n          'Implement demand-based control',\n          'Optimize control sequences'\n        ],\n        expectedResults: {\n          energyReduction: 15,\n          demandReduction: 10,\n          emissionReduction: 12,\n          costSavings: energyCosts.currentCosts.energyCost * 0.15\n        }\n      });\n    }\n\n    // Duct system optimization\n    if (performanceMetrics.totalSystemPressure.value > 3.0) {\n      opportunities.push({\n        id: 'duct_optimization',\n        name: 'Duct System Optimization',\n        description: 'Reduce system pressure losses through duct sizing and layout optimization',\n        category: 'System Design',\n        energySavingsPotential: 20, // %\n        costSavingsPotential: energyCosts.currentCosts.energyCost * 0.20,\n        implementationCost: 15000,\n        paybackPeriod: 36, // months\n        complexity: 'High',\n        priority: 'Medium',\n        requiredActions: [\n          'Analyze duct sizing',\n          'Identify pressure loss sources',\n          'Redesign critical sections',\n          'Seal ductwork leaks'\n        ],\n        expectedResults: {\n          energyReduction: 20,\n          demandReduction: 18,\n          emissionReduction: 20,\n          costSavings: energyCosts.currentCosts.energyCost * 0.20\n        }\n      });\n    }\n\n    // Filter optimization\n    opportunities.push({\n      id: 'filter_optimization',\n      name: 'Filter System Optimization',\n      description: 'Optimize filter selection and maintenance to reduce pressure drop',\n      category: 'Maintenance',\n      energySavingsPotential: 8, // %\n      costSavingsPotential: energyCosts.currentCosts.energyCost * 0.08,\n      implementationCost: 2000,\n      paybackPeriod: 18, // months\n      complexity: 'Low',\n      priority: 'Medium',\n      requiredActions: [\n        'Evaluate filter efficiency vs pressure drop',\n        'Implement pressure monitoring',\n        'Optimize replacement schedule'\n      ],\n      expectedResults: {\n        energyReduction: 8,\n        demandReduction: 5,\n        emissionReduction: 8,\n        costSavings: energyCosts.currentCosts.energyCost * 0.08\n      }\n    });\n\n    return opportunities;\n  }\n\n  /**\n   * Perform seasonal energy analysis\n   */\n  private static async performSeasonalEnergyAnalysis(\n    systemConfiguration: SystemConfiguration,\n    energyConsumption: EnergyConsumption\n  ): Promise<SeasonalEnergyAnalysis> {\n    const baseConsumption = energyConsumption.totalConsumption.value;\n\n    return {\n      seasonalBreakdown: [\n        {\n          season: 'Spring',\n          energyConsumption: baseConsumption * 0.22, // 22% of annual\n          averageLoad: energyConsumption.loadProfile.averageLoad * 0.8,\n          peakLoad: energyConsumption.loadProfile.peakLoad * 0.7,\n          operatingHours: 2000,\n          efficiency: 85,\n          costs: baseConsumption * 0.22 * 0.12 // $0.12/kWh\n        },\n        {\n          season: 'Summer',\n          energyConsumption: baseConsumption * 0.35, // 35% of annual\n          averageLoad: energyConsumption.loadProfile.averageLoad * 1.2,\n          peakLoad: energyConsumption.loadProfile.peakLoad * 1.0,\n          operatingHours: 2500,\n          efficiency: 80, // Lower efficiency due to higher loads\n          costs: baseConsumption * 0.35 * 0.15 // Higher summer rates\n        },\n        {\n          season: 'Fall',\n          energyConsumption: baseConsumption * 0.25, // 25% of annual\n          averageLoad: energyConsumption.loadProfile.averageLoad * 0.9,\n          peakLoad: energyConsumption.loadProfile.peakLoad * 0.8,\n          operatingHours: 2200,\n          efficiency: 83,\n          costs: baseConsumption * 0.25 * 0.12\n        },\n        {\n          season: 'Winter',\n          energyConsumption: baseConsumption * 0.18, // 18% of annual\n          averageLoad: energyConsumption.loadProfile.averageLoad * 0.7,\n          peakLoad: energyConsumption.loadProfile.peakLoad * 0.6,\n          operatingHours: 1800,\n          efficiency: 87, // Higher efficiency at lower loads\n          costs: baseConsumption * 0.18 * 0.11 // Lower winter rates\n        }\n      ],\n      peakSeasons: ['Summer', 'Fall'],\n      optimizationOpportunities: [\n        {\n          season: 'Summer',\n          opportunity: 'Peak load management',\n          potential: 'Reduce peak demand by 15% through load scheduling',\n          savings: 2500\n        },\n        {\n          season: 'Winter',\n          opportunity: 'Extended economizer operation',\n          potential: 'Increase free cooling hours by 20%',\n          savings: 800\n        }\n      ],\n      weatherSensitivity: {\n        temperatureCoefficient: 0.02, // 2% change per degree F\n        humidityCoefficient: 0.005, // 0.5% change per % RH\n        baselineTemperature: 65, // °F\n        heatingThreshold: 55, // °F\n        coolingThreshold: 75 // °F\n      }\n    };\n  }\n\n  /**\n   * Generate unique analysis ID\n   */\n  private static generateAnalysisId(systemId: string): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `energy_analysis_${systemId}_${timestamp}_${random}`;\n  }\n}\n\n// Supporting interfaces\ninterface OperatingSchedule {\n  hoursPerDay: number;\n  daysPerWeek: number;\n  weeksPerYear: number;\n  loadProfile: 'constant' | 'variable' | 'scheduled';\n}\n\ninterface EnergyRates {\n  energyRate: number; // $/kWh\n  demandRate: number; // $/kW\n  fixedRate: number; // $/month\n  timeOfUseRates: {\n    peak: number;\n    offPeak: number;\n    shoulder: number;\n  };\n}\n\ninterface TimeOfDayConsumption {\n  timeOfDay: string;\n  powerDemand: number; // kW\n  energyConsumption: number; // kWh\n  loadFactor: number;\n}\n\ninterface LoadProfile {\n  baseLoad: number; // kW\n  peakLoad: number; // kW\n  averageLoad: number; // kW\n  loadFactor: number;\n  diversityFactor: number;\n  demandProfile: Array<{\n    period: string;\n    demand: number;\n  }>;\n}\n\ninterface PeakDemand {\n  peakPower: number; // kW\n  peakTime: string;\n  peakDuration: number; // hours\n  peakFrequency: 'daily' | 'weekly' | 'seasonal';\n  coincidentFactor: number;\n  demandCharges: number; // $/month\n  peakShavingPotential: number; // kW\n}\n\ninterface EfficiencyTrend {\n  currentEfficiency: number;\n  trendDirection: 'improving' | 'stable' | 'degrading';\n  trendRate: number; // % per year\n  projectedEfficiency: number;\n  timeHorizon: number; // months\n  confidenceLevel: number;\n}\n\ninterface EfficiencyBenchmark {\n  benchmarkType: string;\n  benchmarkSource: string;\n  currentValue: number;\n  benchmarkValue: number;\n  industryAverage: number;\n  bestPractice: number;\n  percentile: number;\n  complianceStatus: 'compliant' | 'non_compliant';\n  improvementPotential: number;\n}\n\ninterface CostProjection {\n  year: number;\n  totalCost: number;\n  energyCost: number;\n  demandCost: number;\n  fixedCost: number;\n  escalationRate: number;\n  cumulativeCost: number;\n}\n\ninterface CostSavingOpportunity {\n  id: string;\n  name: string;\n  description: string;\n  potentialSavings: number; // $/year\n  implementationCost: number;\n  paybackPeriod: number; // months\n  savingsType: 'energy_reduction' | 'demand_reduction' | 'rate_optimization';\n  confidence: number;\n}\n\ninterface UtilityRateStructure {\n  rateSchedule: string;\n  energyCharges: any;\n  demandCharges: any;\n  fixedCharges: any;\n  timeOfUseRates: any;\n}\n"],"mappings":"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","ignoreList":[]}