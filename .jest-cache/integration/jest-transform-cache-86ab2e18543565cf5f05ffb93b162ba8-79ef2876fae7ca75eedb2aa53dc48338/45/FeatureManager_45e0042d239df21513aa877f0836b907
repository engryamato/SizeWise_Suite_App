d78320754cb66a02a7ac6170d539d48a
"use strict";
/**
 * Backend FeatureManager Adapter (Node/Electron)
 *
 * Minimal adapter compatible with Electron main process expectations and
 * TierEnforcer. This avoids importing browser-specific implementations.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureManager = void 0;
class FeatureManager {
    constructor(dbManager) {
        this.dbManager = dbManager;
        // Simple tier map for core features used by desktop
        this.tierMap = {
            air_duct_sizer: 'free',
            unlimited_projects: 'pro',
            high_res_pdf_export: 'pro',
            enhanced_csv_export: 'pro',
            cad_export: 'enterprise',
            api_access: 'enterprise',
        };
    }
    async isEnabled(featureName, userId) {
        // For now, infer user tier as 'pro' to allow desktop development
        // In a full implementation, query user from DB via repository pattern
        const userTier = 'pro';
        const required = this.tierMap[featureName] ?? 'free';
        const rank = { free: 0, pro: 1, enterprise: 2 };
        const enabled = rank[userTier] >= rank[required];
        return {
            enabled,
            tier: userTier,
            reason: enabled
                ? `Feature '${featureName}' enabled for ${userTier}`
                : `Requires ${required} tier`,
        };
    }
    // Added to align with usages from FileManager
    async getUserTier(userId) {
        // TODO: Integrate with user repository; default to 'pro' for dev
        return 'pro';
    }
}
exports.FeatureManager = FeatureManager;
exports.default = FeatureManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2pvaG5yZXlyYXpvbmFibGUvRG9jdW1lbnRzL1NpemVXaXNlX1N1aXRlX0FwcC9iYWNrZW5kL2ZlYXR1cmVzL0ZlYXR1cmVNYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRzs7O0FBVUgsTUFBYSxjQUFjO0lBQ3pCLFlBQTZCLFNBQTBCO1FBQTFCLGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBRXZELG9EQUFvRDtRQUM1QyxZQUFPLEdBQWtEO1lBQy9ELGNBQWMsRUFBRSxNQUFNO1lBQ3RCLGtCQUFrQixFQUFFLEtBQUs7WUFDekIsbUJBQW1CLEVBQUUsS0FBSztZQUMxQixtQkFBbUIsRUFBRSxLQUFLO1lBQzFCLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFVBQVUsRUFBRSxZQUFZO1NBQ3pCLENBQUM7SUFWd0QsQ0FBQztJQVkzRCxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQW1CLEVBQUUsTUFBZTtRQUNsRCxpRUFBaUU7UUFDakUsc0VBQXNFO1FBQ3RFLE1BQU0sUUFBUSxHQUFrQyxLQUFLLENBQUM7UUFDdEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUM7UUFFckQsTUFBTSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBVyxDQUFDO1FBQ3pELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFakQsT0FBTztZQUNMLE9BQU87WUFDUCxJQUFJLEVBQUUsUUFBUTtZQUNkLE1BQU0sRUFBRSxPQUFPO2dCQUNiLENBQUMsQ0FBQyxZQUFZLFdBQVcsaUJBQWlCLFFBQVEsRUFBRTtnQkFDcEQsQ0FBQyxDQUFDLFlBQVksUUFBUSxPQUFPO1NBQ2hDLENBQUM7SUFDSixDQUFDO0lBRUQsOENBQThDO0lBQzlDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBZTtRQUMvQixpRUFBaUU7UUFDakUsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFwQ0Qsd0NBb0NDO0FBRUQsa0JBQWUsY0FBYyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb2hucmV5cmF6b25hYmxlL0RvY3VtZW50cy9TaXplV2lzZV9TdWl0ZV9BcHAvYmFja2VuZC9mZWF0dXJlcy9GZWF0dXJlTWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhY2tlbmQgRmVhdHVyZU1hbmFnZXIgQWRhcHRlciAoTm9kZS9FbGVjdHJvbilcbiAqXG4gKiBNaW5pbWFsIGFkYXB0ZXIgY29tcGF0aWJsZSB3aXRoIEVsZWN0cm9uIG1haW4gcHJvY2VzcyBleHBlY3RhdGlvbnMgYW5kXG4gKiBUaWVyRW5mb3JjZXIuIFRoaXMgYXZvaWRzIGltcG9ydGluZyBicm93c2VyLXNwZWNpZmljIGltcGxlbWVudGF0aW9ucy5cbiAqL1xuXG5pbXBvcnQgdHlwZSB7IERhdGFiYXNlTWFuYWdlciB9IGZyb20gJy4uL2RhdGFiYXNlL0RhdGFiYXNlTWFuYWdlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZUNoZWNrUmVzdWx0IHtcbiAgZW5hYmxlZDogYm9vbGVhbjtcbiAgdGllcjogJ2ZyZWUnIHwgJ3BybycgfCAnZW50ZXJwcmlzZScgfCAnc3VwZXJfYWRtaW4nO1xuICByZWFzb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBGZWF0dXJlTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGJNYW5hZ2VyOiBEYXRhYmFzZU1hbmFnZXIpIHt9XG5cbiAgLy8gU2ltcGxlIHRpZXIgbWFwIGZvciBjb3JlIGZlYXR1cmVzIHVzZWQgYnkgZGVza3RvcFxuICBwcml2YXRlIHRpZXJNYXA6IFJlY29yZDxzdHJpbmcsICdmcmVlJyB8ICdwcm8nIHwgJ2VudGVycHJpc2UnPiA9IHtcbiAgICBhaXJfZHVjdF9zaXplcjogJ2ZyZWUnLFxuICAgIHVubGltaXRlZF9wcm9qZWN0czogJ3BybycsXG4gICAgaGlnaF9yZXNfcGRmX2V4cG9ydDogJ3BybycsXG4gICAgZW5oYW5jZWRfY3N2X2V4cG9ydDogJ3BybycsXG4gICAgY2FkX2V4cG9ydDogJ2VudGVycHJpc2UnLFxuICAgIGFwaV9hY2Nlc3M6ICdlbnRlcnByaXNlJyxcbiAgfTtcblxuICBhc3luYyBpc0VuYWJsZWQoZmVhdHVyZU5hbWU6IHN0cmluZywgdXNlcklkPzogc3RyaW5nKTogUHJvbWlzZTxGZWF0dXJlQ2hlY2tSZXN1bHQ+IHtcbiAgICAvLyBGb3Igbm93LCBpbmZlciB1c2VyIHRpZXIgYXMgJ3BybycgdG8gYWxsb3cgZGVza3RvcCBkZXZlbG9wbWVudFxuICAgIC8vIEluIGEgZnVsbCBpbXBsZW1lbnRhdGlvbiwgcXVlcnkgdXNlciBmcm9tIERCIHZpYSByZXBvc2l0b3J5IHBhdHRlcm5cbiAgICBjb25zdCB1c2VyVGllcjogJ2ZyZWUnIHwgJ3BybycgfCAnZW50ZXJwcmlzZScgPSAncHJvJztcbiAgICBjb25zdCByZXF1aXJlZCA9IHRoaXMudGllck1hcFtmZWF0dXJlTmFtZV0gPz8gJ2ZyZWUnO1xuXG4gICAgY29uc3QgcmFuayA9IHsgZnJlZTogMCwgcHJvOiAxLCBlbnRlcnByaXNlOiAyIH0gYXMgY29uc3Q7XG4gICAgY29uc3QgZW5hYmxlZCA9IHJhbmtbdXNlclRpZXJdID49IHJhbmtbcmVxdWlyZWRdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWQsXG4gICAgICB0aWVyOiB1c2VyVGllcixcbiAgICAgIHJlYXNvbjogZW5hYmxlZFxuICAgICAgICA/IGBGZWF0dXJlICcke2ZlYXR1cmVOYW1lfScgZW5hYmxlZCBmb3IgJHt1c2VyVGllcn1gXG4gICAgICAgIDogYFJlcXVpcmVzICR7cmVxdWlyZWR9IHRpZXJgLFxuICAgIH07XG4gIH1cblxuICAvLyBBZGRlZCB0byBhbGlnbiB3aXRoIHVzYWdlcyBmcm9tIEZpbGVNYW5hZ2VyXG4gIGFzeW5jIGdldFVzZXJUaWVyKHVzZXJJZD86IHN0cmluZyk6IFByb21pc2U8J2ZyZWUnIHwgJ3BybycgfCAnZW50ZXJwcmlzZSc+IHtcbiAgICAvLyBUT0RPOiBJbnRlZ3JhdGUgd2l0aCB1c2VyIHJlcG9zaXRvcnk7IGRlZmF1bHQgdG8gJ3BybycgZm9yIGRldlxuICAgIHJldHVybiAncHJvJztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGZWF0dXJlTWFuYWdlcjtcblxuIl0sInZlcnNpb24iOjN9