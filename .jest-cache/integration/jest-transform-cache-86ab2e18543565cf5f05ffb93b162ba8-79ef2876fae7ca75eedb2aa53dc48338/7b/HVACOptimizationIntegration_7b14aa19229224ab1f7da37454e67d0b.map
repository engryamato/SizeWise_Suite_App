{"version":3,"names":["cov_1l4bs9yxgj","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","AIOptimizationService_1","require","HVACOptimizationIntegration","constructor","aiService","optimizationHistory","metrics","total_optimizations","successful_applications","average_efficiency_gain","average_cost_savings","user_satisfaction_score","most_applied_suggestions","initializeAIService","getInstance","instance","AIOptimizationService","modelPath","enableGPU","confidenceThreshold","initialize","console","log","error","warn","generateOptimizationSuggestions","inputs","results","context","calculationType","generateAISuggestions","generateRuleBasedSuggestions","applySuggestion","suggestion","originalInputs","optimizedInputs","id","targetVelocity","calculateOptimalVelocity","frictionRate","Math","max","material","ductType","description","includes","validateSuggestion","designConstraints","budget","estimatedSavings","cost","isValid","reason","timeline","implementationComplexity","maxVelocity","recordOptimizationResult","result","userFeedback","push","updateMetrics","localStorage","setItem","JSON","stringify","slice","getOptimizationAnalytics","recentResults","trends","efficiency_trend","map","r","performanceImprovement","efficiency_gain","cost_savings_trend","cost_savings","suggestion_popularity","calculateSuggestionPopularity","recommendations","generateAnalyticsRecommendations","Error","optimizationInput","hvacSystem","projectId","efficiency","isOptimal","capacity","airflow","buildingData","area","buildingInfo","volume","occupancy","insulation","windows","orientation","floors","zoneCount","environmentalData","outdoorTemperature","Array","fill","humidity","solarRadiation","windSpeed","season","climate","operationalData","currentLoad","energyConsumption","operatingHours","maintenanceHistory","performanceMetrics","cop","eer","capacity_utilization","temperature_variance","constraints","comfort_requirements","temperature_range","humidity_range","air_quality_min","noise_max","noise_limit","regulatory_requirements","existing_equipment","aiResult","optimizeSystem","rec","impact_areas","title","split","impact","priority","confidence","energy","annual_savings","round","emissions","implementation_cost","applicableToCurrentCalculation","suggestions","velocity","toFixed","applied_suggestions","length","efficiencyGain","costSavings","satisfaction","popularity","forEach","appliedSuggestions","suggestionId","exports"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/frontend/lib/services/HVACOptimizationIntegration.ts"],"sourcesContent":["/**\n * HVAC Optimization Integration Service\n * \n * Bridges AI optimization suggestions with existing HVAC calculation workflows\n * without modifying core calculation logic. Provides seamless integration\n * between AI recommendations and user interactions.\n * \n * Features:\n * - Non-destructive integration with existing calculators\n * - Automatic optimization suggestion generation\n * - Suggestion application and validation\n * - Performance tracking and analytics\n * - Fallback to rule-based optimization when AI unavailable\n */\n\nimport { DuctSizingInputs, DuctSizingResults } from '../../../backend/services/calculations/AirDuctCalculator';\nimport { OptimizationSuggestion } from '../../hooks/useAIOptimization';\nimport { AIOptimizationService } from './AIOptimizationService';\n\nexport interface OptimizationContext {\n  projectId?: string;\n  calculationType: 'air_duct' | 'grease_duct' | 'boiler_vent' | 'engine_exhaust';\n  buildingInfo?: {\n    area?: number;\n    volume?: number;\n    occupancy?: number;\n    floors?: number;\n    climate?: string;\n    location?: string;\n  };\n  designConstraints?: {\n    budget?: number;\n    timeline?: number;\n    efficiency_target?: number;\n    noise_limit?: number;\n  };\n  userPreferences?: {\n    prioritize_cost?: boolean;\n    prioritize_efficiency?: boolean;\n    prioritize_environmental?: boolean;\n  };\n}\n\nexport interface OptimizationResult {\n  originalInputs: DuctSizingInputs;\n  originalResults: DuctSizingResults;\n  optimizedInputs?: DuctSizingInputs;\n  optimizedResults?: DuctSizingResults;\n  suggestions: OptimizationSuggestion[];\n  appliedSuggestions: string[];\n  performanceImprovement: {\n    efficiency_gain?: number;\n    cost_savings?: number;\n    energy_reduction?: number;\n    emissions_reduction?: number;\n  };\n  confidence: number;\n  timestamp: Date;\n}\n\nexport interface OptimizationMetrics {\n  total_optimizations: number;\n  successful_applications: number;\n  average_efficiency_gain: number;\n  average_cost_savings: number;\n  user_satisfaction_score: number;\n  most_applied_suggestions: string[];\n}\n\nexport class HVACOptimizationIntegration {\n  private static instance: HVACOptimizationIntegration;\n  private aiService: AIOptimizationService | null = null;\n  private optimizationHistory: OptimizationResult[] = [];\n  private metrics: OptimizationMetrics = {\n    total_optimizations: 0,\n    successful_applications: 0,\n    average_efficiency_gain: 0,\n    average_cost_savings: 0,\n    user_satisfaction_score: 0,\n    most_applied_suggestions: []\n  };\n\n  private constructor() {\n    this.initializeAIService();\n  }\n\n  public static getInstance(): HVACOptimizationIntegration {\n    if (!HVACOptimizationIntegration.instance) {\n      HVACOptimizationIntegration.instance = new HVACOptimizationIntegration();\n    }\n    return HVACOptimizationIntegration.instance;\n  }\n\n  private async initializeAIService(): Promise<void> {\n    try {\n      this.aiService = new AIOptimizationService({\n        modelPath: '/models/hvac_optimization.onnx',\n        enableGPU: false,\n        confidenceThreshold: 0.7\n      });\n      \n      await this.aiService.initialize();\n      console.log('HVAC Optimization Integration: AI service initialized');\n    } catch (error) {\n      console.warn('HVAC Optimization Integration: AI service unavailable, using rule-based optimization');\n      this.aiService = null;\n    }\n  }\n\n  /**\n   * Generate optimization suggestions for HVAC calculations\n   */\n  public async generateOptimizationSuggestions(\n    inputs: DuctSizingInputs,\n    results: DuctSizingResults,\n    context: OptimizationContext = { calculationType: 'air_duct' }\n  ): Promise<OptimizationSuggestion[]> {\n    try {\n      // Try AI-powered optimization first\n      if (this.aiService) {\n        return await this.generateAISuggestions(inputs, results, context);\n      }\n      \n      // Fallback to rule-based optimization\n      return this.generateRuleBasedSuggestions(inputs, results, context);\n      \n    } catch (error) {\n      console.warn('Optimization suggestion generation failed:', error);\n      return this.generateRuleBasedSuggestions(inputs, results, context);\n    }\n  }\n\n  /**\n   * Apply optimization suggestion to calculation inputs\n   */\n  public applySuggestion(\n    suggestion: OptimizationSuggestion,\n    originalInputs: DuctSizingInputs,\n    context: OptimizationContext\n  ): DuctSizingInputs {\n    const optimizedInputs = { ...originalInputs };\n\n    switch (suggestion.id) {\n      case 'velocity_optimization':\n        optimizedInputs.targetVelocity = this.calculateOptimalVelocity(originalInputs);\n        break;\n        \n      case 'friction_optimization':\n        optimizedInputs.frictionRate = Math.max(0.08, originalInputs.frictionRate * 0.8);\n        break;\n        \n      case 'material_optimization':\n        optimizedInputs.material = 'galvanized_steel';\n        break;\n        \n      case 'duct_type_optimization':\n        optimizedInputs.ductType = suggestion.description.includes('round') ? 'round' : 'rectangular';\n        break;\n        \n      default:\n        console.warn(`Unknown suggestion type: ${suggestion.id}`);\n        break;\n    }\n\n    return optimizedInputs;\n  }\n\n  /**\n   * Validate optimization suggestion applicability\n   */\n  public validateSuggestion(\n    suggestion: OptimizationSuggestion,\n    inputs: DuctSizingInputs,\n    results: DuctSizingResults,\n    context: OptimizationContext\n  ): { isValid: boolean; reason?: string } {\n    // Check budget constraints\n    if (context.designConstraints?.budget && \n        suggestion.estimatedSavings?.cost && \n        suggestion.estimatedSavings.cost > context.designConstraints.budget) {\n      return { \n        isValid: false, \n        reason: 'Exceeds budget constraints' \n      };\n    }\n\n    // Check timeline constraints\n    if (context.designConstraints?.timeline && \n        suggestion.implementationComplexity === 'complex' && \n        context.designConstraints.timeline < 30) {\n      return { \n        isValid: false, \n        reason: 'Implementation time exceeds project timeline' \n      };\n    }\n\n    // Check technical feasibility\n    if (suggestion.id === 'velocity_optimization' && \n        (inputs.maxVelocity && inputs.maxVelocity < 1000)) {\n      return { \n        isValid: false, \n        reason: 'Velocity constraints prevent optimization' \n      };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Track optimization performance and user feedback\n   */\n  public recordOptimizationResult(\n    result: OptimizationResult,\n    userFeedback?: {\n      satisfaction: number; // 1-5 scale\n      applied_suggestions: string[];\n      comments?: string;\n    }\n  ): void {\n    this.optimizationHistory.push(result);\n    this.updateMetrics(result, userFeedback);\n    \n    // Store in local storage for persistence\n    try {\n      localStorage.setItem(\n        'hvac_optimization_history', \n        JSON.stringify(this.optimizationHistory.slice(-50)) // Keep last 50 results\n      );\n      localStorage.setItem('hvac_optimization_metrics', JSON.stringify(this.metrics));\n    } catch (error) {\n      console.warn('Failed to store optimization history:', error);\n    }\n  }\n\n  /**\n   * Get optimization analytics and insights\n   */\n  public getOptimizationAnalytics(): {\n    metrics: OptimizationMetrics;\n    trends: {\n      efficiency_trend: number[];\n      cost_savings_trend: number[];\n      suggestion_popularity: Record<string, number>;\n    };\n    recommendations: string[];\n  } {\n    const recentResults = this.optimizationHistory.slice(-20);\n    \n    return {\n      metrics: this.metrics,\n      trends: {\n        efficiency_trend: recentResults.map(r => r.performanceImprovement.efficiency_gain || 0),\n        cost_savings_trend: recentResults.map(r => r.performanceImprovement.cost_savings || 0),\n        suggestion_popularity: this.calculateSuggestionPopularity()\n      },\n      recommendations: this.generateAnalyticsRecommendations()\n    };\n  }\n\n  private async generateAISuggestions(\n    inputs: DuctSizingInputs,\n    results: DuctSizingResults,\n    context: OptimizationContext\n  ): Promise<OptimizationSuggestion[]> {\n    if (!this.aiService) {\n      throw new Error('AI service not available');\n    }\n\n    // Convert to AI optimization input format\n    const optimizationInput = {\n      hvacSystem: {\n        id: context.projectId || 'current_system',\n        type: context.calculationType,\n        efficiency: results.isOptimal ? 0.85 : 0.75,\n        capacity: inputs.airflow\n      },\n      buildingData: {\n        area: context.buildingInfo?.area || 5000,\n        volume: context.buildingInfo?.volume || 50000,\n        occupancy: context.buildingInfo?.occupancy || 50,\n        insulation: 20,\n        windows: [],\n        orientation: 'south',\n        floors: context.buildingInfo?.floors || 2,\n        zoneCount: 4\n      },\n      environmentalData: {\n        outdoorTemperature: Array(24).fill(75),\n        humidity: Array(24).fill(45),\n        solarRadiation: Array(24).fill(500),\n        windSpeed: Array(24).fill(5),\n        season: 'summer' as const,\n        climate: context.buildingInfo?.climate || 'temperate'\n      },\n      operationalData: {\n        currentLoad: inputs.airflow,\n        energyConsumption: Array(24).fill(50),\n        operatingHours: 12,\n        maintenanceHistory: [],\n        performanceMetrics: {\n          cop: 3.5,\n          eer: 12,\n          capacity_utilization: 0.8,\n          temperature_variance: 2\n        }\n      },\n      constraints: {\n        budget: context.designConstraints?.budget || 50000,\n        timeline: context.designConstraints?.timeline || 90,\n        comfort_requirements: {\n          temperature_range: [68, 78] as [number, number],\n          humidity_range: [30, 60] as [number, number],\n          air_quality_min: 0.8,\n          noise_max: context.designConstraints?.noise_limit || 45\n        },\n        regulatory_requirements: ['ASHRAE 90.1', 'SMACNA'],\n        existing_equipment: ['ductwork', 'dampers']\n      }\n    };\n\n    const aiResult = await this.aiService.optimizeSystem(optimizationInput);\n    \n    // Convert AI recommendations to optimization suggestions\n    return aiResult.recommendations.map(rec => ({\n      id: rec.id,\n      type: rec.impact_areas.includes('energy_efficiency') ? 'efficiency' as const : \n            rec.impact_areas.includes('cost_reduction') ? 'cost' as const : \n            rec.impact_areas.includes('environmental') ? 'environmental' as const : 'performance' as const,\n      title: rec.description.split(' - ')[0] || rec.description,\n      description: rec.description,\n      impact: rec.priority === 'high' ? 'high' as const : \n              rec.priority === 'medium' ? 'medium' as const : 'low' as const,\n      confidence: rec.confidence,\n      estimatedSavings: {\n        energy: rec.annual_savings > 1000 ? Math.round((rec.annual_savings / 5000) * 100) : undefined,\n        cost: rec.annual_savings,\n        emissions: rec.annual_savings > 1000 ? Math.round(rec.annual_savings * 0.4) : undefined\n      },\n      implementationComplexity: rec.implementation_cost > 20000 ? 'complex' as const : \n                               rec.implementation_cost > 5000 ? 'moderate' as const : 'simple' as const,\n      applicableToCurrentCalculation: rec.type === 'equipment_upgrade' || rec.type === 'control_strategy'\n    }));\n  }\n\n  private generateRuleBasedSuggestions(\n    inputs: DuctSizingInputs,\n    results: DuctSizingResults,\n    context: OptimizationContext\n  ): OptimizationSuggestion[] {\n    const suggestions: OptimizationSuggestion[] = [];\n\n    // Velocity optimization\n    if (results.velocity && (results.velocity > 2000 || results.velocity < 800)) {\n      suggestions.push({\n        id: 'velocity_optimization',\n        type: 'efficiency',\n        title: 'Optimize Air Velocity',\n        description: `Current velocity (${Math.round(results.velocity)} FPM) is ${results.velocity > 2000 ? 'too high' : 'too low'}. Consider ${results.velocity > 2000 ? 'increasing duct size' : 'decreasing duct size'} for optimal performance.`,\n        impact: results.velocity > 2500 || results.velocity < 600 ? 'high' : 'medium',\n        confidence: 0.85,\n        estimatedSavings: {\n          energy: results.velocity > 2000 ? 15 : 8,\n          cost: results.velocity > 2000 ? 1200 : 600\n        },\n        implementationComplexity: 'moderate',\n        applicableToCurrentCalculation: true\n      });\n    }\n\n    // Friction rate optimization\n    if (inputs.frictionRate > 0.15) {\n      suggestions.push({\n        id: 'friction_optimization',\n        type: 'efficiency',\n        title: 'Reduce System Friction',\n        description: `High friction rate (${inputs.frictionRate.toFixed(3)} in. w.g./100 ft) indicates potential for energy savings through duct optimization.`,\n        impact: 'medium',\n        confidence: 0.78,\n        estimatedSavings: {\n          energy: 12,\n          cost: 800,\n          emissions: 320\n        },\n        implementationComplexity: 'moderate',\n        applicableToCurrentCalculation: true\n      });\n    }\n\n    // Duct type optimization\n    if (inputs.ductType === 'rectangular' && inputs.airflow < 2000) {\n      suggestions.push({\n        id: 'duct_type_optimization',\n        type: 'cost',\n        title: 'Consider Round Ductwork',\n        description: 'For lower airflow applications, round ductwork often provides better cost-performance ratio.',\n        impact: 'low',\n        confidence: 0.65,\n        estimatedSavings: {\n          cost: 600\n        },\n        implementationComplexity: 'simple',\n        applicableToCurrentCalculation: true\n      });\n    }\n\n    return suggestions;\n  }\n\n  private calculateOptimalVelocity(inputs: DuctSizingInputs): number {\n    // Rule-based optimal velocity calculation\n    if (inputs.airflow < 1000) return 1200;\n    if (inputs.airflow < 3000) return 1500;\n    if (inputs.airflow < 6000) return 1800;\n    return 2000;\n  }\n\n  private updateMetrics(\n    result: OptimizationResult,\n    userFeedback?: { satisfaction: number; applied_suggestions: string[]; comments?: string }\n  ): void {\n    this.metrics.total_optimizations++;\n    \n    if (userFeedback?.applied_suggestions.length) {\n      this.metrics.successful_applications++;\n      \n      // Update average gains\n      const efficiencyGain = result.performanceImprovement.efficiency_gain || 0;\n      const costSavings = result.performanceImprovement.cost_savings || 0;\n      \n      this.metrics.average_efficiency_gain = \n        (this.metrics.average_efficiency_gain * (this.metrics.successful_applications - 1) + efficiencyGain) / \n        this.metrics.successful_applications;\n        \n      this.metrics.average_cost_savings = \n        (this.metrics.average_cost_savings * (this.metrics.successful_applications - 1) + costSavings) / \n        this.metrics.successful_applications;\n    }\n    \n    if (userFeedback?.satisfaction) {\n      this.metrics.user_satisfaction_score = \n        (this.metrics.user_satisfaction_score * (this.metrics.total_optimizations - 1) + userFeedback.satisfaction) / \n        this.metrics.total_optimizations;\n    }\n  }\n\n  private calculateSuggestionPopularity(): Record<string, number> {\n    const popularity: Record<string, number> = {};\n    \n    this.optimizationHistory.forEach(result => {\n      result.appliedSuggestions.forEach(suggestionId => {\n        popularity[suggestionId] = (popularity[suggestionId] || 0) + 1;\n      });\n    });\n    \n    return popularity;\n  }\n\n  private generateAnalyticsRecommendations(): string[] {\n    const recommendations: string[] = [];\n    \n    if (this.metrics.average_efficiency_gain < 10) {\n      recommendations.push('Consider more aggressive optimization strategies to improve efficiency gains');\n    }\n    \n    if (this.metrics.user_satisfaction_score < 3.5) {\n      recommendations.push('Review suggestion quality and relevance to improve user satisfaction');\n    }\n    \n    if (this.metrics.successful_applications / this.metrics.total_optimizations < 0.3) {\n      recommendations.push('Focus on more actionable and practical optimization suggestions');\n    }\n    \n    return recommendations;\n  }\n}\n"],"mappings":"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","ignoreList":[]}