name: Performance Testing & Monitoring

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 6 * * 1" # Weekly on Monday at 6 AM
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test'
        required: true
        default: 'lighthouse'
        type: choice
        options:
        - lighthouse
        - load-test
        - bundle-analysis
        - all

env:
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"

jobs:
  lighthouse-ci:
    name: Lighthouse CI Performance Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          cd frontend && npm ci
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build application
        working-directory: ./frontend
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: npm run build

      - name: Start services for testing
        run: |
          # Start backend
          python run_backend.py &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Start frontend
          cd frontend && npm start &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          
          # Wait for services to be ready
          sleep 30

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/
            lighthouse-report.html
          retention-days: 30

      - name: Cleanup processes
        if: always()
        run: |
          kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build and analyze bundle
        working-directory: ./frontend
        env:
          ANALYZE: true
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          npm run build
          npx next-bundle-analyzer

      - name: Bundle size check
        working-directory: ./frontend
        run: |
          echo "## 📦 Bundle Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if bundle size is within limits
          BUNDLE_SIZE=$(du -sh .next/static | cut -f1)
          echo "**Total Bundle Size:** $BUNDLE_SIZE" >> $GITHUB_STEP_SUMMARY
          
          # Check for large chunks
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Large Chunks (>500KB):" >> $GITHUB_STEP_SUMMARY
          find .next/static -name "*.js" -size +500k -exec ls -lh {} \; | awk '{print "- " $9 ": " $5}' >> $GITHUB_STEP_SUMMARY || echo "No large chunks found" >> $GITHUB_STEP_SUMMARY

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            frontend/.next/analyze/
            frontend/bundle-analyzer-report.html
          retention-days: 30

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install load testing tools
        run: |
          python -m pip install --upgrade pip
          pip install locust requests

      - name: Start backend for load testing
        run: |
          python -m pip install -r requirements.txt
          python run_backend.py &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          sleep 15

      - name: Create load test script
        run: |
          cat > locustfile.py << 'EOF'
          from locust import HttpUser, task, between
          import json

          class SizeWiseUser(HttpUser):
              wait_time = between(1, 3)
              
              def on_start(self):
                  """Setup user session"""
                  pass
              
              @task(3)
              def health_check(self):
                  """Test health endpoint"""
                  self.client.get("/api/health")
              
              @task(2)
              def get_standards(self):
                  """Test standards endpoint"""
                  self.client.get("/api/standards")
              
              @task(1)
              def calculate_duct_size(self):
                  """Test duct sizing calculation"""
                  payload = {
                      "airflow": 1000,
                      "velocity": 800,
                      "shape": "rectangular"
                  }
                  self.client.post("/api/calculate/duct-size", 
                                 json=payload,
                                 headers={"Content-Type": "application/json"})
          EOF

      - name: Run load test
        run: |
          echo "🚀 Starting load test..."
          locust -f locustfile.py --host=http://localhost:5000 \
                 --users=10 --spawn-rate=2 --run-time=60s \
                 --html=load-test-report.html --csv=load-test \
                 --headless

      - name: Analyze load test results
        run: |
          echo "## 🔥 Load Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f load-test_stats.csv ]; then
            echo "### 📊 Performance Metrics:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Endpoint | Requests | Failures | Avg Response Time | Max Response Time |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|----------|----------|-------------------|-------------------|" >> $GITHUB_STEP_SUMMARY
            
            # Parse CSV and format for markdown (skip header)
            tail -n +2 load-test_stats.csv | while IFS=',' read -r method name requests failures avg_response max_response rest; do
              echo "| $name | $requests | $failures | ${avg_response}ms | ${max_response}ms |" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: |
            load-test-report.html
            load-test_*.csv
          retention-days: 30

      - name: Cleanup processes
        if: always()
        run: |
          kill $BACKEND_PID 2>/dev/null || true

  performance-summary:
    name: Performance Test Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-ci, bundle-analysis, load-testing]
    if: always()
    steps:
      - name: Create performance summary
        run: |
          echo "## 🎯 Performance Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Run:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Test Results:" >> $GITHUB_STEP_SUMMARY
          
          # Lighthouse CI results
          if [[ "${{ needs.lighthouse-ci.result }}" == "success" ]]; then
            echo "✅ **Lighthouse CI:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lighthouse CI:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Bundle analysis results
          if [[ "${{ needs.bundle-analysis.result }}" == "success" ]]; then
            echo "✅ **Bundle Analysis:** PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Bundle Analysis:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Load testing results
          if [[ "${{ needs.load-testing.result }}" == "success" ]]; then
            echo "✅ **Load Testing:** PASSED" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.load-testing.result }}" == "skipped" ]]; then
            echo "⏭️ **Load Testing:** SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Load Testing:** FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Performance Recommendations:" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor bundle size growth over time" >> $GITHUB_STEP_SUMMARY
          echo "- Optimize images and assets for better loading times" >> $GITHUB_STEP_SUMMARY
          echo "- Consider implementing service worker for caching" >> $GITHUB_STEP_SUMMARY
          echo "- Review and optimize database queries for better API response times" >> $GITHUB_STEP_SUMMARY
