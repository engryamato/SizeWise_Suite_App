{"version":3,"names":["cov_hr0h2ihfp","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SystemOptimizationTypes_1","require","GradientDescent","constructor","parameters","currentState","bestSolution","history","evaluationCount","maxIterations","learningRate","learningRateMin","learningRateMax","variant","momentumCoefficient","adamBeta1","adamBeta2","adamEpsilon","rmspropDecayRate","rmspropEpsilon","gradientMethod","finiteDifferenceStep","adaptiveLearningRate","lineSearch","lineSearchMethod","constraintHandling","penaltyCoefficient","convergenceTolerance","gradientTolerance","seedValue","random","createSeededRandom","Math","optimize","problem","objectiveFunction","constraintFunctions","startTime","performance","now","validateProblem","initializeAlgorithm","createInitialSolution","shouldTerminate","performIteration","updateHistory","adaptLearningRate","createOptimizationResult","error","console","hasDiscreteVariables","variables","some","v","discreteValues","length","warn","log","initialSolution","createRandomSolution","evaluateSolution","numVariables","solution","gradient","Array","fill","momentum","adamM","adamV","rmspropV","adagradG","iteration","gradientNorm","stepSize","functionValue","fitness","variable","randomIndex","floor","id","min","bounds","minimum","max","maximum","generateSolutionId","objectiveValues","constraintViolations","feasible","systemConfiguration","performanceMetrics","solutionToVariables","objectiveValue","objectives","i","violation","push","constraintId","violationType","currentValue","requiredValue","severity","penalty","every","totalPenalty","filter","reduce","sum","Number","MAX_VALUE","variableTemplates","map","template","computeGradient","updateSolution","projectSolution","currentVariables","h","originalValue","forwardValue","backwardValue","forwardVal","backwardVal","sqrt","g","stepDirection","computeStepDirection","performLineSearch","newVariables","newValue","Infinity","newSolution","beta1","beta2","epsilon","t","mHat","pow","vHat","decay","eps","adagradEps","armijoLineSearch","wolfeLineSearch","goldenSectionLineSearch","c1","alpha","maxBacktrack","gradientDotDirection","testVariables","createTestVariables","testValue","phi","resphi","a","tol","x1","x2","f1","evaluateAtStep","f2","abs","projectedVariables","recentHistory","slice","functionImprovement","bestFitness","averageFitness","worstFitness","diversity","timestamp","Date","executionTime","statistics","totalIterations","totalEvaluations","convergenceIteration","bestFitnessHistory","averageFitnessHistory","diversityHistory","constraintViolationHistory","algorithmSpecificStats","finalLearningRate","finalGradientNorm","finalStepSize","optimizationHistory","iterations","populationHistory","parameterHistory","convergenceMetrics","problemId","status","OptimizationStatus","CONVERGED","analysis","recommendations","warnings","errors","toString","substr","seed","state","exports"],"sources":["C:\\Users\\johnr\\Downloads\\SizeWise_Suite_App\\backend\\services\\calculations\\algorithms\\GradientDescent.ts"],"sourcesContent":["/**\r\n * Gradient Descent Algorithm Implementation for System Optimization\r\n * \r\n * Implements gradient descent optimization with:\r\n * - Multiple variants (standard, momentum, Adam, RMSprop)\r\n * - Numerical gradient computation with finite differences\r\n * - Adaptive learning rate and step size control\r\n * - Line search optimization\r\n * - Constraint handling with projected gradients\r\n * \r\n * @version 3.0.0\r\n * @author SizeWise Suite Development Team\r\n */\r\n\r\nimport {\r\n  OptimizationSolution,\r\n  OptimizationVariable,\r\n  OptimizationProblem,\r\n  OptimizationResult,\r\n  OptimizationStatus,\r\n  OptimizationStatistics,\r\n  OptimizationHistory,\r\n  IterationHistory,\r\n  SolutionPerformanceMetrics,\r\n  ObjectiveFunctionType,\r\n  ConstraintFunctionType\r\n} from '../types/SystemOptimizationTypes';\r\n\r\nexport interface GradientDescentParameters {\r\n  maxIterations: number;\r\n  learningRate: number;\r\n  learningRateMin: number;\r\n  learningRateMax: number;\r\n  variant: 'standard' | 'momentum' | 'adam' | 'rmsprop' | 'adagrad';\r\n  momentumCoefficient: number;\r\n  adamBeta1: number;\r\n  adamBeta2: number;\r\n  adamEpsilon: number;\r\n  rmspropDecayRate: number;\r\n  rmspropEpsilon: number;\r\n  gradientMethod: 'forward' | 'backward' | 'central';\r\n  finiteDifferenceStep: number;\r\n  adaptiveLearningRate: boolean;\r\n  lineSearch: boolean;\r\n  lineSearchMethod: 'armijo' | 'wolfe' | 'golden_section';\r\n  constraintHandling: 'penalty' | 'projection' | 'barrier';\r\n  penaltyCoefficient: number;\r\n  convergenceTolerance: number;\r\n  gradientTolerance: number;\r\n  seedValue?: number;\r\n}\r\n\r\nexport interface GradientState {\r\n  solution: OptimizationSolution;\r\n  gradient: number[];\r\n  momentum: number[];\r\n  adamM: number[];\r\n  adamV: number[];\r\n  rmspropV: number[];\r\n  adagradG: number[];\r\n  iteration: number;\r\n  learningRate: number;\r\n  gradientNorm: number;\r\n  stepSize: number;\r\n  functionValue: number;\r\n}\r\n\r\n/**\r\n * Gradient Descent optimizer for continuous optimization problems\r\n */\r\nexport class GradientDescent {\r\n  private parameters: GradientDescentParameters;\r\n  private currentState: GradientState | null = null;\r\n  private bestSolution: OptimizationSolution | null = null;\r\n  private history: IterationHistory[] = [];\r\n  private random: () => number;\r\n  private evaluationCount: number = 0;\r\n\r\n  constructor(parameters?: Partial<GradientDescentParameters>) {\r\n    this.parameters = {\r\n      maxIterations: 1000,\r\n      learningRate: 0.01,\r\n      learningRateMin: 1e-6,\r\n      learningRateMax: 1.0,\r\n      variant: 'adam',\r\n      momentumCoefficient: 0.9,\r\n      adamBeta1: 0.9,\r\n      adamBeta2: 0.999,\r\n      adamEpsilon: 1e-8,\r\n      rmspropDecayRate: 0.9,\r\n      rmspropEpsilon: 1e-8,\r\n      gradientMethod: 'central',\r\n      finiteDifferenceStep: 1e-6,\r\n      adaptiveLearningRate: true,\r\n      lineSearch: true,\r\n      lineSearchMethod: 'armijo',\r\n      constraintHandling: 'projection',\r\n      penaltyCoefficient: 1000,\r\n      convergenceTolerance: 1e-6,\r\n      gradientTolerance: 1e-6,\r\n      ...parameters\r\n    };\r\n\r\n    // Initialize random number generator\r\n    if (this.parameters.seedValue !== undefined) {\r\n      this.random = this.createSeededRandom(this.parameters.seedValue);\r\n    } else {\r\n      this.random = Math.random;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main optimization method\r\n   */\r\n  public async optimize(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<OptimizationResult> {\r\n    const startTime = performance.now();\r\n    \r\n    try {\r\n      // Validate problem for gradient descent\r\n      this.validateProblem(problem);\r\n      \r\n      // Initialize algorithm\r\n      this.initializeAlgorithm(problem);\r\n      \r\n      // Create initial solution\r\n      await this.createInitialSolution(problem, objectiveFunction, constraintFunctions);\r\n      \r\n      // Main optimization loop\r\n      while (!this.shouldTerminate()) {\r\n        await this.performIteration(problem, objectiveFunction, constraintFunctions);\r\n        this.updateHistory();\r\n        \r\n        if (this.parameters.adaptiveLearningRate) {\r\n          this.adaptLearningRate();\r\n        }\r\n      }\r\n      \r\n      // Create final result\r\n      return this.createOptimizationResult(problem, startTime);\r\n      \r\n    } catch (error) {\r\n      console.error('Gradient descent optimization failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate problem for gradient descent\r\n   */\r\n  private validateProblem(problem: OptimizationProblem): void {\r\n    // Check for continuous variables only\r\n    const hasDiscreteVariables = problem.variables.some(v => v.discreteValues && v.discreteValues.length > 0);\r\n    if (hasDiscreteVariables) {\r\n      console.warn('Gradient descent works best with continuous variables. Discrete variables will be treated as continuous.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize algorithm state\r\n   */\r\n  private initializeAlgorithm(problem: OptimizationProblem): void {\r\n    this.currentState = null;\r\n    this.bestSolution = null;\r\n    this.history = [];\r\n    this.evaluationCount = 0;\r\n    \r\n    console.log(`Initializing Gradient Descent (${this.parameters.variant}) with learning rate: ${this.parameters.learningRate}`);\r\n  }\r\n\r\n  /**\r\n   * Create initial solution\r\n   */\r\n  private async createInitialSolution(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    // Generate initial solution\r\n    const initialSolution = this.createRandomSolution(problem);\r\n    await this.evaluateSolution(initialSolution, problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Initialize gradient state\r\n    const numVariables = problem.variables.length;\r\n    this.currentState = {\r\n      solution: initialSolution,\r\n      gradient: new Array(numVariables).fill(0),\r\n      momentum: new Array(numVariables).fill(0),\r\n      adamM: new Array(numVariables).fill(0),\r\n      adamV: new Array(numVariables).fill(0),\r\n      rmspropV: new Array(numVariables).fill(0),\r\n      adagradG: new Array(numVariables).fill(0),\r\n      iteration: 0,\r\n      learningRate: this.parameters.learningRate,\r\n      gradientNorm: 0,\r\n      stepSize: 0,\r\n      functionValue: initialSolution.fitness\r\n    };\r\n    \r\n    this.bestSolution = { ...initialSolution };\r\n  }\r\n\r\n  /**\r\n   * Create a random solution\r\n   */\r\n  private createRandomSolution(problem: OptimizationProblem): OptimizationSolution {\r\n    const variables: { [variableId: string]: number | string } = {};\r\n    \r\n    for (const variable of problem.variables) {\r\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\r\n        // Discrete variable - select random value\r\n        const randomIndex = Math.floor(this.random() * variable.discreteValues.length);\r\n        variables[variable.id] = variable.discreteValues[randomIndex];\r\n      } else {\r\n        // Continuous variable\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : 0;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : 1;\r\n        variables[variable.id] = min + this.random() * (max - min);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      id: this.generateSolutionId(),\r\n      variables,\r\n      objectiveValues: {},\r\n      constraintViolations: [],\r\n      feasible: true,\r\n      fitness: 0,\r\n      systemConfiguration: problem.systemConfiguration,\r\n      performanceMetrics: {} as SolutionPerformanceMetrics\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Evaluate solution fitness and constraints\r\n   */\r\n  private async evaluateSolution(\r\n    solution: OptimizationSolution,\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    try {\r\n      // Convert solution to optimization variables\r\n      const variables = this.solutionToVariables(solution, problem.variables);\r\n      \r\n      // Evaluate objective function\r\n      const objectiveValue = objectiveFunction(variables);\r\n      solution.fitness = objectiveValue;\r\n      \r\n      // Store objective values\r\n      if (problem.objectives.objectives.length > 0) {\r\n        solution.objectiveValues[problem.objectives.objectives[0].id] = objectiveValue;\r\n      }\r\n      \r\n      // Evaluate constraints\r\n      solution.constraintViolations = [];\r\n      for (let i = 0; i < constraintFunctions.length; i++) {\r\n        const violation = constraintFunctions[i](variables);\r\n        solution.constraintViolations.push({\r\n          constraintId: `constraint_${i}`,\r\n          violationType: violation > 0 ? 'inequality' : 'boundary',\r\n          currentValue: violation,\r\n          requiredValue: 0,\r\n          severity: violation > 0 ? 'major' : 'minor',\r\n          penalty: violation > 0 ? violation * this.parameters.penaltyCoefficient : 0\r\n        });\r\n      }\r\n      \r\n      // Check feasibility\r\n      solution.feasible = solution.constraintViolations.every(v => v.currentValue <= 0);\r\n      \r\n      // Apply constraint handling\r\n      if (!solution.feasible && this.parameters.constraintHandling === 'penalty') {\r\n        const totalPenalty = solution.constraintViolations\r\n          .filter(v => v.currentValue > 0)\r\n          .reduce((sum, v) => sum + v.penalty, 0);\r\n        solution.fitness += totalPenalty;\r\n      }\r\n      \r\n      this.evaluationCount++;\r\n      \r\n    } catch (error) {\r\n      console.error('Error evaluating solution:', error);\r\n      solution.fitness = Number.MAX_VALUE;\r\n      solution.feasible = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert solution to optimization variables\r\n   */\r\n  private solutionToVariables(solution: OptimizationSolution, variableTemplates: OptimizationVariable[]): OptimizationVariable[] {\r\n    return variableTemplates.map(template => ({\r\n      ...template,\r\n      currentValue: solution.variables[template.id]\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Perform one iteration of gradient descent\r\n   */\r\n  private async performIteration(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    if (!this.currentState) return;\r\n    \r\n    // Compute gradient\r\n    await this.computeGradient(problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Update solution based on variant\r\n    await this.updateSolution(problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Apply constraints if using projection\r\n    if (this.parameters.constraintHandling === 'projection') {\r\n      this.projectSolution(problem);\r\n    }\r\n    \r\n    // Update best solution\r\n    if (this.currentState.solution.fitness < this.bestSolution!.fitness) {\r\n      this.bestSolution = { ...this.currentState.solution };\r\n    }\r\n    \r\n    this.currentState.iteration++;\r\n  }\r\n\r\n  /**\r\n   * Compute numerical gradient\r\n   */\r\n  private async computeGradient(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    if (!this.currentState) return;\r\n    \r\n    const currentVariables = this.solutionToVariables(this.currentState.solution, problem.variables);\r\n    const h = this.parameters.finiteDifferenceStep;\r\n    \r\n    for (let i = 0; i < problem.variables.length; i++) {\r\n      const variable = problem.variables[i];\r\n      \r\n      // Skip discrete variables\r\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\r\n        this.currentState.gradient[i] = 0;\r\n        continue;\r\n      }\r\n      \r\n      const originalValue = currentVariables[i].currentValue as number;\r\n      \r\n      let gradient = 0;\r\n      \r\n      switch (this.parameters.gradientMethod) {\r\n        case 'forward':\r\n          // f'(x) ≈ (f(x+h) - f(x)) / h\r\n          currentVariables[i].currentValue = originalValue + h;\r\n          const forwardValue = objectiveFunction(currentVariables);\r\n          gradient = (forwardValue - this.currentState.functionValue) / h;\r\n          break;\r\n          \r\n        case 'backward':\r\n          // f'(x) ≈ (f(x) - f(x-h)) / h\r\n          currentVariables[i].currentValue = originalValue - h;\r\n          const backwardValue = objectiveFunction(currentVariables);\r\n          gradient = (this.currentState.functionValue - backwardValue) / h;\r\n          break;\r\n          \r\n        case 'central':\r\n          // f'(x) ≈ (f(x+h) - f(x-h)) / (2h)\r\n          currentVariables[i].currentValue = originalValue + h;\r\n          const forwardVal = objectiveFunction(currentVariables);\r\n          currentVariables[i].currentValue = originalValue - h;\r\n          const backwardVal = objectiveFunction(currentVariables);\r\n          gradient = (forwardVal - backwardVal) / (2 * h);\r\n          break;\r\n      }\r\n      \r\n      // Restore original value\r\n      currentVariables[i].currentValue = originalValue;\r\n      \r\n      this.currentState.gradient[i] = gradient;\r\n      this.evaluationCount += this.parameters.gradientMethod === 'central' ? 2 : 1;\r\n    }\r\n    \r\n    // Compute gradient norm\r\n    this.currentState.gradientNorm = Math.sqrt(\r\n      this.currentState.gradient.reduce((sum, g) => sum + g * g, 0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update solution based on gradient descent variant\r\n   */\r\n  private async updateSolution(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[]\r\n  ): Promise<void> {\r\n    if (!this.currentState) return;\r\n    \r\n    const stepDirection = this.computeStepDirection();\r\n    \r\n    // Determine step size\r\n    let stepSize = this.currentState.learningRate;\r\n    if (this.parameters.lineSearch) {\r\n      stepSize = await this.performLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n    }\r\n    \r\n    // Update solution\r\n    const newVariables: { [variableId: string]: number | string } = {};\r\n    \r\n    for (let i = 0; i < problem.variables.length; i++) {\r\n      const variable = problem.variables[i];\r\n      const currentValue = this.currentState.solution.variables[variable.id];\r\n      \r\n      if (variable.discreteValues && variable.discreteValues.length > 0) {\r\n        // Keep discrete variables unchanged\r\n        newVariables[variable.id] = currentValue;\r\n      } else if (typeof currentValue === 'number') {\r\n        // Update continuous variables\r\n        const newValue = currentValue - stepSize * stepDirection[i];\r\n        \r\n        // Apply bounds\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\r\n        newVariables[variable.id] = Math.max(min, Math.min(max, newValue));\r\n      } else {\r\n        newVariables[variable.id] = currentValue;\r\n      }\r\n    }\r\n    \r\n    // Create new solution\r\n    const newSolution: OptimizationSolution = {\r\n      ...this.currentState.solution,\r\n      id: this.generateSolutionId(),\r\n      variables: newVariables\r\n    };\r\n    \r\n    // Evaluate new solution\r\n    await this.evaluateSolution(newSolution, problem, objectiveFunction, constraintFunctions);\r\n    \r\n    // Update state\r\n    this.currentState.solution = newSolution;\r\n    this.currentState.stepSize = stepSize;\r\n    this.currentState.functionValue = newSolution.fitness;\r\n  }\r\n\r\n  /**\r\n   * Compute step direction based on variant\r\n   */\r\n  private computeStepDirection(): number[] {\r\n    if (!this.currentState) return [];\r\n    \r\n    const gradient = this.currentState.gradient;\r\n    const stepDirection = new Array(gradient.length);\r\n    \r\n    switch (this.parameters.variant) {\r\n      case 'standard':\r\n        // Standard gradient descent: d = -∇f\r\n        for (let i = 0; i < gradient.length; i++) {\r\n          stepDirection[i] = gradient[i];\r\n        }\r\n        break;\r\n        \r\n      case 'momentum':\r\n        // Momentum: v = β*v + ∇f, d = v\r\n        for (let i = 0; i < gradient.length; i++) {\r\n          this.currentState.momentum[i] = this.parameters.momentumCoefficient * this.currentState.momentum[i] + gradient[i];\r\n          stepDirection[i] = this.currentState.momentum[i];\r\n        }\r\n        break;\r\n        \r\n      case 'adam':\r\n        // Adam optimizer\r\n        const beta1 = this.parameters.adamBeta1;\r\n        const beta2 = this.parameters.adamBeta2;\r\n        const epsilon = this.parameters.adamEpsilon;\r\n        const t = this.currentState.iteration + 1;\r\n        \r\n        for (let i = 0; i < gradient.length; i++) {\r\n          // Update biased first moment estimate\r\n          this.currentState.adamM[i] = beta1 * this.currentState.adamM[i] + (1 - beta1) * gradient[i];\r\n          \r\n          // Update biased second raw moment estimate\r\n          this.currentState.adamV[i] = beta2 * this.currentState.adamV[i] + (1 - beta2) * gradient[i] * gradient[i];\r\n          \r\n          // Compute bias-corrected first moment estimate\r\n          const mHat = this.currentState.adamM[i] / (1 - Math.pow(beta1, t));\r\n          \r\n          // Compute bias-corrected second raw moment estimate\r\n          const vHat = this.currentState.adamV[i] / (1 - Math.pow(beta2, t));\r\n          \r\n          // Update step direction\r\n          stepDirection[i] = mHat / (Math.sqrt(vHat) + epsilon);\r\n        }\r\n        break;\r\n        \r\n      case 'rmsprop':\r\n        // RMSprop\r\n        const decay = this.parameters.rmspropDecayRate;\r\n        const eps = this.parameters.rmspropEpsilon;\r\n        \r\n        for (let i = 0; i < gradient.length; i++) {\r\n          this.currentState.rmspropV[i] = decay * this.currentState.rmspropV[i] + (1 - decay) * gradient[i] * gradient[i];\r\n          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.rmspropV[i]) + eps);\r\n        }\r\n        break;\r\n        \r\n      case 'adagrad':\r\n        // Adagrad\r\n        const adagradEps = this.parameters.adamEpsilon;\r\n        \r\n        for (let i = 0; i < gradient.length; i++) {\r\n          this.currentState.adagradG[i] += gradient[i] * gradient[i];\r\n          stepDirection[i] = gradient[i] / (Math.sqrt(this.currentState.adagradG[i]) + adagradEps);\r\n        }\r\n        break;\r\n        \r\n      default:\r\n        // Default to standard gradient descent\r\n        for (let i = 0; i < gradient.length; i++) {\r\n          stepDirection[i] = gradient[i];\r\n        }\r\n    }\r\n    \r\n    return stepDirection;\r\n  }\r\n\r\n  /**\r\n   * Perform line search to find optimal step size\r\n   */\r\n  private async performLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    if (!this.currentState) return this.parameters.learningRate;\r\n    \r\n    switch (this.parameters.lineSearchMethod) {\r\n      case 'armijo':\r\n        return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n      case 'wolfe':\r\n        return this.wolfeLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n      case 'golden_section':\r\n        return this.goldenSectionLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n      default:\r\n        return this.parameters.learningRate;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Armijo line search\r\n   */\r\n  private async armijoLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    if (!this.currentState) return this.parameters.learningRate;\r\n    \r\n    const c1 = 1e-4; // Armijo constant\r\n    let alpha = this.parameters.learningRate;\r\n    const maxBacktrack = 20;\r\n    \r\n    const currentValue = this.currentState.functionValue;\r\n    const gradientDotDirection = this.currentState.gradient.reduce((sum, g, i) => sum + g * stepDirection[i], 0);\r\n    \r\n    for (let i = 0; i < maxBacktrack; i++) {\r\n      // Test step\r\n      const testVariables = this.createTestVariables(problem, stepDirection, alpha);\r\n      const testValue = objectiveFunction(testVariables);\r\n      this.evaluationCount++;\r\n      \r\n      // Armijo condition\r\n      if (testValue <= currentValue - c1 * alpha * gradientDotDirection) {\r\n        return alpha;\r\n      }\r\n      \r\n      alpha *= 0.5; // Backtrack\r\n    }\r\n    \r\n    return alpha;\r\n  }\r\n\r\n  /**\r\n   * Wolfe line search (simplified)\r\n   */\r\n  private async wolfeLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    // Simplified implementation - use Armijo for now\r\n    return this.armijoLineSearch(problem, objectiveFunction, constraintFunctions, stepDirection);\r\n  }\r\n\r\n  /**\r\n   * Golden section line search\r\n   */\r\n  private async goldenSectionLineSearch(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    constraintFunctions: ConstraintFunctionType[],\r\n    stepDirection: number[]\r\n  ): Promise<number> {\r\n    const phi = (1 + Math.sqrt(5)) / 2; // Golden ratio\r\n    const resphi = 2 - phi;\r\n    \r\n    let a = 0;\r\n    let b = this.parameters.learningRate * 2;\r\n    const tol = 1e-6;\r\n    \r\n    // Find initial bracket\r\n    let x1 = a + resphi * (b - a);\r\n    let x2 = a + (1 - resphi) * (b - a);\r\n    \r\n    let f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);\r\n    let f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);\r\n    \r\n    while (Math.abs(b - a) > tol) {\r\n      if (f1 < f2) {\r\n        b = x2;\r\n        x2 = x1;\r\n        f2 = f1;\r\n        x1 = a + resphi * (b - a);\r\n        f1 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x1);\r\n      } else {\r\n        a = x1;\r\n        x1 = x2;\r\n        f1 = f2;\r\n        x2 = a + (1 - resphi) * (b - a);\r\n        f2 = this.evaluateAtStep(problem, objectiveFunction, stepDirection, x2);\r\n      }\r\n    }\r\n    \r\n    return (a + b) / 2;\r\n  }\r\n\r\n  /**\r\n   * Create test variables for line search\r\n   */\r\n  private createTestVariables(problem: OptimizationProblem, stepDirection: number[], alpha: number): OptimizationVariable[] {\r\n    if (!this.currentState) return [];\r\n    \r\n    return problem.variables.map((variable, i) => {\r\n      const currentValue = this.currentState!.solution.variables[variable.id];\r\n      \r\n      if (typeof currentValue === 'number') {\r\n        const newValue = currentValue - alpha * stepDirection[i];\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\r\n        \r\n        return {\r\n          ...variable,\r\n          currentValue: Math.max(min, Math.min(max, newValue))\r\n        };\r\n      } else {\r\n        return {\r\n          ...variable,\r\n          currentValue\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Evaluate function at specific step size\r\n   */\r\n  private evaluateAtStep(\r\n    problem: OptimizationProblem,\r\n    objectiveFunction: ObjectiveFunctionType,\r\n    stepDirection: number[],\r\n    alpha: number\r\n  ): number {\r\n    const testVariables = this.createTestVariables(problem, stepDirection, alpha);\r\n    this.evaluationCount++;\r\n    return objectiveFunction(testVariables);\r\n  }\r\n\r\n  /**\r\n   * Project solution onto feasible region\r\n   */\r\n  private projectSolution(problem: OptimizationProblem): void {\r\n    if (!this.currentState) return;\r\n    \r\n    // Simple box constraint projection\r\n    const projectedVariables: { [variableId: string]: number | string } = {};\r\n    \r\n    for (const variable of problem.variables) {\r\n      const currentValue = this.currentState.solution.variables[variable.id];\r\n      \r\n      if (typeof currentValue === 'number') {\r\n        const min = typeof variable.bounds.minimum === 'number' ? variable.bounds.minimum : -Infinity;\r\n        const max = typeof variable.bounds.maximum === 'number' ? variable.bounds.maximum : Infinity;\r\n        projectedVariables[variable.id] = Math.max(min, Math.min(max, currentValue));\r\n      } else {\r\n        projectedVariables[variable.id] = currentValue;\r\n      }\r\n    }\r\n    \r\n    this.currentState.solution.variables = projectedVariables;\r\n  }\r\n\r\n  /**\r\n   * Adapt learning rate based on progress\r\n   */\r\n  private adaptLearningRate(): void {\r\n    if (!this.currentState) return;\r\n    \r\n    // Simple adaptive scheme based on gradient norm\r\n    if (this.currentState.gradientNorm > 1.0) {\r\n      // Large gradient - decrease learning rate\r\n      this.currentState.learningRate = Math.max(\r\n        this.parameters.learningRateMin,\r\n        this.currentState.learningRate * 0.9\r\n      );\r\n    } else if (this.currentState.gradientNorm < 0.1) {\r\n      // Small gradient - increase learning rate\r\n      this.currentState.learningRate = Math.min(\r\n        this.parameters.learningRateMax,\r\n        this.currentState.learningRate * 1.1\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check termination criteria\r\n   */\r\n  private shouldTerminate(): boolean {\r\n    if (!this.currentState) return true;\r\n    \r\n    // Maximum iterations\r\n    if (this.currentState.iteration >= this.parameters.maxIterations) {\r\n      return true;\r\n    }\r\n    \r\n    // Gradient tolerance\r\n    if (this.currentState.gradientNorm < this.parameters.gradientTolerance) {\r\n      return true;\r\n    }\r\n    \r\n    // Function value convergence\r\n    if (this.history.length >= 10) {\r\n      const recentHistory = this.history.slice(-10);\r\n      const functionImprovement = recentHistory[0].bestFitness - recentHistory[recentHistory.length - 1].bestFitness;\r\n      \r\n      if (Math.abs(functionImprovement) < this.parameters.convergenceTolerance) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Update optimization history\r\n   */\r\n  private updateHistory(): void {\r\n    if (!this.currentState) return;\r\n    \r\n    const history: IterationHistory = {\r\n      iteration: this.currentState.iteration,\r\n      bestFitness: this.bestSolution?.fitness || this.currentState.functionValue,\r\n      averageFitness: this.currentState.functionValue,\r\n      worstFitness: this.currentState.functionValue,\r\n      diversity: 0, // Not applicable for single solution\r\n      constraintViolations: this.currentState.solution.feasible ? 0 : 1,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    this.history.push(history);\r\n  }\r\n\r\n  /**\r\n   * Create optimization result\r\n   */\r\n  private createOptimizationResult(problem: OptimizationProblem, startTime: number): OptimizationResult {\r\n    const executionTime = performance.now() - startTime;\r\n    \r\n    const statistics: OptimizationStatistics = {\r\n      totalIterations: this.currentState?.iteration || 0,\r\n      totalEvaluations: this.evaluationCount,\r\n      convergenceIteration: this.currentState?.iteration || 0,\r\n      executionTime,\r\n      bestFitnessHistory: this.history.map(h => h.bestFitness),\r\n      averageFitnessHistory: this.history.map(h => h.averageFitness),\r\n      diversityHistory: this.history.map(h => h.diversity),\r\n      constraintViolationHistory: this.history.map(h => h.constraintViolations),\r\n      algorithmSpecificStats: {\r\n        variant: this.parameters.variant,\r\n        finalLearningRate: this.currentState?.learningRate || 0,\r\n        finalGradientNorm: this.currentState?.gradientNorm || 0,\r\n        finalStepSize: this.currentState?.stepSize || 0\r\n      }\r\n    };\r\n    \r\n    const optimizationHistory: OptimizationHistory = {\r\n      iterations: this.history,\r\n      populationHistory: [],\r\n      parameterHistory: [],\r\n      convergenceMetrics: []\r\n    };\r\n    \r\n    return {\r\n      problemId: problem.id,\r\n      status: OptimizationStatus.CONVERGED,\r\n      bestSolution: this.bestSolution!,\r\n      statistics,\r\n      history: optimizationHistory,\r\n      analysis: {},\r\n      recommendations: [],\r\n      warnings: [],\r\n      errors: []\r\n    };\r\n  }\r\n\r\n  // Utility methods\r\n  private generateSolutionId(): string {\r\n    return `gd_sol_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private createSeededRandom(seed: number): () => number {\r\n    let state = seed;\r\n    return () => {\r\n      state = (state * 9301 + 49297) % 233280;\r\n      return state / 233280;\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}