{"version":3,"names":["cov_wvt0hmstp","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","AirDuctCalculator_1","require","FittingLossCalculator_1","AirPropertiesCalculator_1","SystemPressureCalculator","calculateSystemPressure","inputs","segments","systemType","designConditions","calculationOptions","validateSystemInputs","airDensity","calculateAirDensity","segmentResults","totalFrictionLoss","totalMinorLoss","totalLength","velocities","segment","segmentResult","calculateSegmentPressure","push","frictionLoss","minorLoss","length","velocity","totalPressureLoss","averageVelocity","reduce","sum","v","maxVelocity","Math","max","minVelocity","min","validation","validateSystemResults","roundToPrecision","roundingPrecision","systemWarnings","warnings","systemRecommendations","recommendations","complianceStatus","compliance","calculationMethod","frictionMethod","calculationDate","Date","options","area","calculateDuctArea","airflow","velocityPressure","FittingLossCalculator","calculateVelocityPressure","reynoldsNumber","frictionFactor","kFactor","fittingDetails","ductInputs","ductType","ductShape","frictionRate","units","material","diameter","calculateEquivalentDiameter","width","height","calculateFrictionLoss","calculateReynoldsNumber","calculateFrictionFactor","fittingConfig","calculateFittingLoss","pressureLoss","totalLoss","toFixed","segmentId","id","segmentType","PI","pow","Error","conditions","temperature","barometricPressure","altitude","standardDensity","tempRatio","pressureRatio","altitudeRatio","exp","standardLoss","AirDuctCalculator","densityRatio","velocityFps","diameterFt","kinematicViscosity","reynolds","data","velocityLimits","SYSTEM_VELOCITY_LIMITS","pressureLimits","SYSTEM_PRESSURE_LIMITS","velocityCompliant","pressureCompliant","smacnaCompliant","recommended","value","precision","factor","round","getSystemLimits","supply","pressure","calculateEnhancedSystemPressure","results","totalFittingLoss","totalElevationLoss","notes","calculateEnhancedSegmentPressure","elevation","elevationEffect","calculateElevationPressure","pressureChange","totalAirflow","map","calculateAverageVelocity","envWarnings","validateEnvironmentalConditions","analysis","analyzeEnhancedSystemPerformance","fittingLoss","elevationLoss","systemMetrics","frictionPercentage","fittingPercentage","elevationPercentage","systemEfficiency","calculateSystemEfficiency","timestamp","toISOString","airConditions","humidity","airProps","AirPropertiesCalculator","calculateAirProperties","calculateEnhancedFrictionLoss","calculateEnhancedFittingLoss","materialData","getEnhancedMaterialRoughness","materialAge","surfaceCondition","calculateCorrectedPressureLoss","roughness","equivalentDiameter","materialRoughness","density","correctionFactors","vpParams","vpResult","fittingResult","correctedPressureLoss","elevationEffects","calculateElevationEffects","totalVelocity","count","limits","r","hasEnvironmentalCorrections","some","abs","combined","hasAgingEffects","viscosity","relativeRoughness","calculateEnhancedFrictionFactor","pressureLossPsf","i","fNew","log10","sqrt","exports","return","exhaust"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/SystemPressureCalculator.ts"],"sourcesContent":["/**\n * SystemPressureCalculator - Modular calculation service for complete HVAC system pressure analysis\n * \n * MISSION-CRITICAL: Pure TypeScript functions for system-level pressure drop calculations\n * Combines friction losses (straight runs) with minor losses (fittings) for complete system analysis\n * \n * @see docs/implementation/duct-physics/system-pressure-calculations.md\n * @see backend/services/calculations/AirDuctCalculator.ts\n * @see backend/services/calculations/FittingLossCalculator.ts\n */\n\nimport { AirDuctCalculator, DuctSizingInputs } from './AirDuctCalculator';\nimport { FittingLossCalculator, FittingConfiguration, FittingLossResult } from './FittingLossCalculator';\nimport { AirPropertiesCalculator, AirConditions, AirProperties, VelocityPressureParams } from './AirPropertiesCalculator';\n\n/**\n * Duct segment for system calculations\n */\nexport interface DuctSegment {\n  id: string;\n  type: 'straight' | 'fitting';\n  ductShape: 'round' | 'rectangular';\n  \n  // Geometry\n  length?: number; // feet (for straight segments)\n  diameter?: number; // inches (for round ducts)\n  width?: number; // inches (for rectangular ducts)\n  height?: number; // inches (for rectangular ducts)\n  \n  // Flow properties\n  airflow: number; // CFM\n  material: string; // e.g., 'galvanized_steel'\n  \n  // Fitting properties (for fitting segments)\n  fittingConfig?: FittingConfiguration;\n  \n  // Environmental conditions\n  elevation?: number; // feet (for elevation pressure calculations)\n  temperature?: number; // °F (for air density corrections)\n  humidity?: number; // % RH (for air density corrections)\n  pressure?: number; // in Hg (for air density corrections)\n\n  // Material aging and condition\n  materialAge?: number; // years (for roughness corrections)\n  surfaceCondition?: 'excellent' | 'good' | 'fair' | 'poor'; // for roughness corrections\n\n  notes?: string;\n}\n\n/**\n * System calculation inputs\n */\nexport interface SystemCalculationInputs {\n  segments: DuctSegment[];\n  systemType: 'supply' | 'return' | 'exhaust';\n  designConditions: {\n    temperature: number; // °F\n    barometricPressure: number; // in Hg\n    altitude: number; // feet above sea level\n  };\n  calculationOptions: {\n    includeElevationEffects: boolean;\n    includeTemperatureEffects: boolean;\n    frictionMethod: 'darcy_weisbach' | 'colebrook_white';\n    roundingPrecision: number; // decimal places\n  };\n}\n\n/**\n * Segment calculation result\n */\nexport interface SegmentResult {\n  segmentId: string;\n  segmentType: 'straight' | 'fitting';\n  \n  // Flow properties\n  velocity: number; // FPM\n  velocityPressure: number; // inches w.g.\n  reynoldsNumber?: number;\n  \n  // Pressure losses\n  frictionLoss: number; // inches w.g. (for straight segments)\n  minorLoss: number; // inches w.g. (for fitting segments)\n  totalLoss: number; // inches w.g.\n  \n  // Additional data\n  frictionFactor?: number;\n  kFactor?: number;\n  fittingDetails?: FittingLossResult;\n  \n  // Validation\n  warnings: string[];\n  recommendations: string[];\n}\n\n/**\n * System calculation result\n */\nexport interface SystemCalculationResult {\n  // Summary\n  totalPressureLoss: number; // inches w.g.\n  totalFrictionLoss: number; // inches w.g.\n  totalMinorLoss: number; // inches w.g.\n  \n  // System properties\n  totalLength: number; // feet\n  averageVelocity: number; // FPM\n  maxVelocity: number; // FPM\n  minVelocity: number; // FPM\n  \n  // Detailed results\n  segmentResults: SegmentResult[];\n  \n  // System validation\n  systemWarnings: string[];\n  systemRecommendations: string[];\n  complianceStatus: {\n    velocityCompliant: boolean;\n    pressureCompliant: boolean;\n    smacnaCompliant: boolean;\n  };\n  \n  // Calculation metadata\n  calculationMethod: string;\n  calculationDate: Date;\n  designConditions: SystemCalculationInputs['designConditions'];\n}\n\n/**\n * SystemPressureCalculator - Pure calculation functions for system pressure analysis\n * CRITICAL: No dependencies on UI, storage, or external services\n */\nexport class SystemPressureCalculator {\n  \n  // SMACNA system pressure limits (inches w.g.)\n  private static readonly SYSTEM_PRESSURE_LIMITS = {\n    supply: { max: 6.0, recommended: 4.0 },\n    return: { max: 4.0, recommended: 2.5 },\n    exhaust: { max: 8.0, recommended: 5.0 }\n  };\n\n  // SMACNA velocity limits by system type (FPM)\n  private static readonly SYSTEM_VELOCITY_LIMITS = {\n    supply: { min: 400, max: 2500, recommended: 1500 },\n    return: { min: 300, max: 2000, recommended: 1200 },\n    exhaust: { min: 500, max: 3000, recommended: 1800 }\n  };\n\n  /**\n   * Calculate complete system pressure drop\n   */\n  public static calculateSystemPressure(inputs: SystemCalculationInputs): SystemCalculationResult {\n    const { segments, systemType, designConditions, calculationOptions } = inputs;\n    \n    // Validate inputs\n    this.validateSystemInputs(inputs);\n    \n    // Calculate air density for design conditions\n    const airDensity = this.calculateAirDensity(designConditions);\n    \n    // Process each segment\n    const segmentResults: SegmentResult[] = [];\n    let totalFrictionLoss = 0;\n    let totalMinorLoss = 0;\n    let totalLength = 0;\n    const velocities: number[] = [];\n    \n    for (const segment of segments) {\n      const segmentResult = this.calculateSegmentPressure(segment, airDensity, calculationOptions);\n      segmentResults.push(segmentResult);\n      \n      totalFrictionLoss += segmentResult.frictionLoss;\n      totalMinorLoss += segmentResult.minorLoss;\n      \n      if (segment.length) {\n        totalLength += segment.length;\n      }\n      \n      velocities.push(segmentResult.velocity);\n    }\n    \n    const totalPressureLoss = totalFrictionLoss + totalMinorLoss;\n    \n    // Calculate system statistics\n    const averageVelocity = velocities.reduce((sum, v) => sum + v, 0) / velocities.length;\n    const maxVelocity = Math.max(...velocities);\n    const minVelocity = Math.min(...velocities);\n    \n    // System validation\n    const validation = this.validateSystemResults({\n      totalPressureLoss,\n      averageVelocity,\n      maxVelocity,\n      minVelocity,\n      systemType,\n      segmentResults\n    });\n    \n    return {\n      totalPressureLoss: this.roundToPrecision(totalPressureLoss, calculationOptions.roundingPrecision),\n      totalFrictionLoss: this.roundToPrecision(totalFrictionLoss, calculationOptions.roundingPrecision),\n      totalMinorLoss: this.roundToPrecision(totalMinorLoss, calculationOptions.roundingPrecision),\n      totalLength,\n      averageVelocity: this.roundToPrecision(averageVelocity, calculationOptions.roundingPrecision),\n      maxVelocity: this.roundToPrecision(maxVelocity, calculationOptions.roundingPrecision),\n      minVelocity: this.roundToPrecision(minVelocity, calculationOptions.roundingPrecision),\n      segmentResults,\n      systemWarnings: validation.warnings,\n      systemRecommendations: validation.recommendations,\n      complianceStatus: validation.compliance,\n      calculationMethod: `${calculationOptions.frictionMethod}_with_fitting_losses`,\n      calculationDate: new Date(),\n      designConditions\n    };\n  }\n\n  /**\n   * Calculate pressure drop for a single segment\n   */\n  private static calculateSegmentPressure(\n    segment: DuctSegment,\n    airDensity: number,\n    options: SystemCalculationInputs['calculationOptions']\n  ): SegmentResult {\n    \n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n    \n    // Calculate velocity and velocity pressure\n    const area = this.calculateDuctArea(segment);\n    const velocity = segment.airflow / area; // FPM\n    const velocityPressure = FittingLossCalculator.calculateVelocityPressure({ velocity, airDensity });\n    \n    let frictionLoss = 0;\n    let minorLoss = 0;\n    let reynoldsNumber: number | undefined;\n    let frictionFactor: number | undefined;\n    let kFactor: number | undefined;\n    let fittingDetails: FittingLossResult | undefined;\n    \n    if (segment.type === 'straight' && segment.length) {\n      // Calculate friction loss for straight segment\n      const ductInputs: DuctSizingInputs = {\n        airflow: segment.airflow,\n        ductType: segment.ductShape,\n        frictionRate: 0.08, // Will be recalculated\n        units: 'imperial',\n        material: segment.material\n      };\n      \n      // Use existing AirDuctCalculator for friction calculations\n      const diameter = segment.diameter || this.calculateEquivalentDiameter(segment.width!, segment.height!);\n      frictionLoss = this.calculateFrictionLoss(velocity, segment.length, diameter, segment.material, airDensity);\n      \n      // Calculate Reynolds number and friction factor for reference\n      reynoldsNumber = this.calculateReynoldsNumber(velocity, diameter, airDensity);\n      frictionFactor = this.calculateFrictionFactor(reynoldsNumber, segment.material, diameter);\n      \n    } else if (segment.type === 'fitting' && segment.fittingConfig) {\n      // Calculate minor loss for fitting\n      fittingDetails = FittingLossCalculator.calculateFittingLoss(\n        segment.fittingConfig,\n        velocity,\n        airDensity\n      );\n      \n      minorLoss = fittingDetails.pressureLoss;\n      kFactor = fittingDetails.kFactor;\n      warnings.push(...fittingDetails.warnings);\n      recommendations.push(...fittingDetails.recommendations);\n    }\n    \n    const totalLoss = frictionLoss + minorLoss;\n    \n    // Segment-level validation\n    if (velocity > 3000) {\n      warnings.push(`High velocity (${velocity.toFixed(0)} FPM) may cause noise issues`);\n      recommendations.push('Consider increasing duct size to reduce velocity');\n    }\n    \n    if (velocity < 300) {\n      warnings.push(`Low velocity (${velocity.toFixed(0)} FPM) may cause poor air distribution`);\n      recommendations.push('Consider decreasing duct size to increase velocity');\n    }\n    \n    return {\n      segmentId: segment.id,\n      segmentType: segment.type,\n      velocity: this.roundToPrecision(velocity, options.roundingPrecision),\n      velocityPressure: this.roundToPrecision(velocityPressure, options.roundingPrecision),\n      reynoldsNumber,\n      frictionLoss: this.roundToPrecision(frictionLoss, options.roundingPrecision),\n      minorLoss: this.roundToPrecision(minorLoss, options.roundingPrecision),\n      totalLoss: this.roundToPrecision(totalLoss, options.roundingPrecision),\n      frictionFactor,\n      kFactor,\n      fittingDetails,\n      warnings,\n      recommendations\n    };\n  }\n\n  /**\n   * Calculate duct cross-sectional area\n   */\n  private static calculateDuctArea(segment: DuctSegment): number {\n    if (segment.ductShape === 'round' && segment.diameter) {\n      return Math.PI * Math.pow(segment.diameter / 12, 2) / 4; // sq ft\n    } else if (segment.ductShape === 'rectangular' && segment.width && segment.height) {\n      return (segment.width * segment.height) / 144; // sq ft\n    }\n    \n    throw new Error(`Invalid duct geometry for segment ${segment.id}`);\n  }\n\n  /**\n   * Calculate equivalent diameter for rectangular ducts\n   */\n  private static calculateEquivalentDiameter(width: number, height: number): number {\n    // Equivalent diameter formula: De = 1.30 * (a*b)^0.625 / (a+b)^0.25\n    return 1.30 * Math.pow(width * height, 0.625) / Math.pow(width + height, 0.25);\n  }\n\n  /**\n   * Calculate air density based on design conditions\n   */\n  private static calculateAirDensity(conditions: SystemCalculationInputs['designConditions']): number {\n    const { temperature, barometricPressure, altitude } = conditions;\n    \n    // Standard air density at 70°F, 29.92 in Hg, sea level\n    const standardDensity = 0.075; // lb/ft³\n    \n    // Temperature correction (assuming ideal gas)\n    const tempRatio = (459.67 + 70) / (459.67 + temperature);\n    \n    // Pressure correction\n    const pressureRatio = barometricPressure / 29.92;\n    \n    // Altitude correction (approximate)\n    const altitudeRatio = Math.exp(-altitude / 26000);\n    \n    return standardDensity * tempRatio * pressureRatio * altitudeRatio;\n  }\n\n  /**\n   * Calculate friction loss using Darcy-Weisbach equation\n   */\n  private static calculateFrictionLoss(\n    velocity: number,\n    length: number,\n    diameter: number,\n    material: string,\n    airDensity: number\n  ): number {\n    // Use AirDuctCalculator's existing method but adjust for air density\n    const standardLoss = AirDuctCalculator['calculatePressureLoss'](velocity, length, diameter, material);\n    const densityRatio = airDensity / 0.075;\n    return standardLoss * densityRatio;\n  }\n\n  /**\n   * Calculate Reynolds number\n   */\n  private static calculateReynoldsNumber(velocity: number, diameter: number, airDensity: number): number {\n    const velocityFps = velocity / 60; // FPM to FPS\n    const diameterFt = diameter / 12; // inches to feet\n    const kinematicViscosity = 1.57e-4; // ft²/s at standard conditions\n    \n    return (velocityFps * diameterFt) / kinematicViscosity;\n  }\n\n  /**\n   * Calculate friction factor\n   */\n  private static calculateFrictionFactor(reynolds: number, material: string, diameter: number): number {\n    // Use AirDuctCalculator's existing method\n    return AirDuctCalculator['calculateFrictionFactor'](reynolds, material, diameter);\n  }\n\n  /**\n   * Validate system inputs\n   */\n  private static validateSystemInputs(inputs: SystemCalculationInputs): void {\n    if (!inputs.segments || inputs.segments.length === 0) {\n      throw new Error('System must contain at least one segment');\n    }\n    \n    for (const segment of inputs.segments) {\n      if (segment.airflow <= 0) {\n        throw new Error(`Invalid airflow for segment ${segment.id}`);\n      }\n      \n      if (segment.type === 'straight' && (!segment.length || segment.length <= 0)) {\n        throw new Error(`Straight segment ${segment.id} must have positive length`);\n      }\n      \n      if (segment.type === 'fitting' && !segment.fittingConfig) {\n        throw new Error(`Fitting segment ${segment.id} must have fitting configuration`);\n      }\n    }\n  }\n\n  /**\n   * Validate system results\n   */\n  private static validateSystemResults(data: {\n    totalPressureLoss: number;\n    averageVelocity: number;\n    maxVelocity: number;\n    minVelocity: number;\n    systemType: string;\n    segmentResults: SegmentResult[];\n  }): {\n    warnings: string[];\n    recommendations: string[];\n    compliance: { velocityCompliant: boolean; pressureCompliant: boolean; smacnaCompliant: boolean };\n  } {\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n    \n    const velocityLimits = this.SYSTEM_VELOCITY_LIMITS[data.systemType];\n    const pressureLimits = this.SYSTEM_PRESSURE_LIMITS[data.systemType];\n    \n    // Velocity compliance\n    const velocityCompliant = data.maxVelocity <= velocityLimits.max && data.minVelocity >= velocityLimits.min;\n    if (!velocityCompliant) {\n      warnings.push(`System velocities outside SMACNA limits (${velocityLimits.min}-${velocityLimits.max} FPM)`);\n      recommendations.push('Resize ducts to achieve compliant velocities');\n    }\n    \n    // Pressure compliance\n    const pressureCompliant = data.totalPressureLoss <= pressureLimits.max;\n    if (!pressureCompliant) {\n      warnings.push(`System pressure loss (${data.totalPressureLoss.toFixed(2)} in wg) exceeds SMACNA limit (${pressureLimits.max} in wg)`);\n      recommendations.push('Reduce system pressure loss by optimizing duct sizes and minimizing fittings');\n    }\n    \n    // Overall SMACNA compliance\n    const smacnaCompliant = velocityCompliant && pressureCompliant;\n    \n    // Additional system-level checks\n    if (data.totalPressureLoss > pressureLimits.recommended) {\n      recommendations.push(`Consider reducing pressure loss below ${pressureLimits.recommended} in wg for optimal efficiency`);\n    }\n    \n    if (data.averageVelocity > velocityLimits.recommended) {\n      recommendations.push(`Consider reducing average velocity below ${velocityLimits.recommended} FPM for noise control`);\n    }\n    \n    return {\n      warnings,\n      recommendations,\n      compliance: { velocityCompliant, pressureCompliant, smacnaCompliant }\n    };\n  }\n\n  /**\n   * Round number to specified precision\n   */\n  private static roundToPrecision(value: number, precision: number): number {\n    const factor = Math.pow(10, precision);\n    return Math.round(value * factor) / factor;\n  }\n\n  /**\n   * Get system pressure limits for a system type\n   */\n  public static getSystemLimits(systemType: string): {\n    velocity: { min: number; max: number; recommended: number };\n    pressure: { max: number; recommended: number };\n  } {\n    return {\n      velocity: this.SYSTEM_VELOCITY_LIMITS[systemType] || this.SYSTEM_VELOCITY_LIMITS.supply,\n      pressure: this.SYSTEM_PRESSURE_LIMITS[systemType] || this.SYSTEM_PRESSURE_LIMITS.supply\n    };\n  }\n\n  /**\n   * Calculate enhanced system pressure with environmental corrections\n   */\n  public static calculateEnhancedSystemPressure(inputs: SystemCalculationInputs): SystemCalculationResult {\n    const { segments, systemType, designConditions, calculationOptions } = inputs;\n\n    // Validate inputs\n    this.validateSystemInputs(inputs);\n\n    const results: SegmentResult[] = [];\n    let totalPressureLoss = 0;\n    let totalFrictionLoss = 0;\n    let totalFittingLoss = 0;\n    let totalElevationLoss = 0;\n    const warnings: string[] = [];\n    const notes: string[] = [];\n\n    // Process each segment with enhanced calculations\n    for (const segment of segments) {\n      const segmentResult = this.calculateEnhancedSegmentPressure(segment, designConditions);\n\n      results.push(segmentResult);\n      totalPressureLoss += segmentResult.pressureLoss;\n\n      if (segmentResult.type === 'friction') {\n        totalFrictionLoss += segmentResult.pressureLoss;\n      } else if (segmentResult.type === 'fitting') {\n        totalFittingLoss += segmentResult.pressureLoss;\n      }\n\n      // Add elevation effects if present\n      if (segment.elevation !== undefined) {\n        const elevationEffect = this.calculateElevationPressure(segment);\n        totalElevationLoss += elevationEffect.pressureChange;\n        if (elevationEffect.warnings.length > 0) {\n          warnings.push(...elevationEffect.warnings);\n        }\n      }\n\n      // Collect warnings and notes\n      if (segmentResult.warnings) {\n        warnings.push(...segmentResult.warnings);\n      }\n      if (segmentResult.notes) {\n        notes.push(...segmentResult.notes);\n      }\n    }\n\n    // Calculate system-level metrics\n    const totalAirflow = Math.max(...segments.map(s => s.airflow));\n    const averageVelocity = this.calculateAverageVelocity(segments);\n\n    // Add environmental condition warnings\n    const envWarnings = this.validateEnvironmentalConditions(designConditions);\n    warnings.push(...envWarnings);\n\n    // Performance analysis with enhanced data\n    const analysis = this.analyzeEnhancedSystemPerformance(\n      results,\n      totalPressureLoss,\n      totalAirflow,\n      systemType,\n      designConditions\n    );\n\n    return {\n      totalPressureLoss: this.roundToPrecision(totalPressureLoss + totalElevationLoss, 4),\n      frictionLoss: this.roundToPrecision(totalFrictionLoss, 4),\n      fittingLoss: this.roundToPrecision(totalFittingLoss, 4),\n      elevationLoss: this.roundToPrecision(totalElevationLoss, 4),\n      segments: results,\n      systemMetrics: {\n        totalAirflow,\n        averageVelocity: this.roundToPrecision(averageVelocity, 1),\n        frictionPercentage: this.roundToPrecision((totalFrictionLoss / totalPressureLoss) * 100, 1),\n        fittingPercentage: this.roundToPrecision((totalFittingLoss / totalPressureLoss) * 100, 1),\n        elevationPercentage: this.roundToPrecision((totalElevationLoss / totalPressureLoss) * 100, 1),\n        systemEfficiency: this.calculateSystemEfficiency(totalFrictionLoss, totalFittingLoss)\n      },\n      analysis,\n      warnings,\n      notes,\n      calculationMethod: 'Enhanced with environmental corrections',\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Calculate enhanced segment pressure with environmental corrections\n   */\n  private static calculateEnhancedSegmentPressure(\n    segment: DuctSegment,\n    designConditions: any\n  ): SegmentResult {\n    const warnings: string[] = [];\n    const notes: string[] = [];\n\n    // Determine air conditions for this segment\n    const airConditions: AirConditions = {\n      temperature: segment.temperature || designConditions.temperature || 70,\n      pressure: segment.pressure || designConditions.barometricPressure,\n      altitude: segment.elevation || designConditions.altitude || 0,\n      humidity: segment.humidity || designConditions.humidity || 50\n    };\n\n    // Get enhanced air properties\n    const airProps = AirPropertiesCalculator.calculateAirProperties(airConditions);\n    warnings.push(...airProps.warnings);\n    notes.push(...airProps.notes);\n\n    if (segment.type === 'straight' && segment.length) {\n      // Enhanced friction loss calculation\n      return this.calculateEnhancedFrictionLoss(segment, airProps, warnings, notes);\n    } else if (segment.type === 'fitting' && segment.fittingConfig) {\n      // Enhanced fitting loss calculation\n      return this.calculateEnhancedFittingLoss(segment, airProps, warnings, notes);\n    }\n\n    // Fallback to basic calculation\n    return {\n      segmentId: segment.id,\n      type: 'unknown',\n      pressureLoss: 0,\n      velocity: 0,\n      warnings: ['Unknown segment type'],\n      notes: []\n    };\n  }\n\n  /**\n   * Calculate enhanced friction loss with material aging and environmental corrections\n   */\n  private static calculateEnhancedFrictionLoss(\n    segment: DuctSegment,\n    airProps: AirProperties,\n    warnings: string[],\n    notes: string[]\n  ): SegmentResult {\n    // Get enhanced material roughness\n    const materialData = AirPropertiesCalculator.getEnhancedMaterialRoughness(\n      segment.material,\n      segment.materialAge,\n      segment.surfaceCondition\n    );\n\n    warnings.push(...materialData.warnings);\n    notes.push(...materialData.notes);\n\n    // Calculate velocity\n    const area = segment.ductShape === 'round'\n      ? Math.PI * Math.pow((segment.diameter || 12) / 12, 2) / 4\n      : ((segment.width || 12) * (segment.height || 12)) / 144;\n    const velocity = segment.airflow / area;\n\n    // Enhanced pressure loss calculation using corrected air properties\n    const diameter = segment.ductShape === 'round'\n      ? segment.diameter || 12\n      : AirDuctCalculator.calculateEquivalentDiameter(segment.width || 12, segment.height || 12);\n\n    // Use enhanced calculation with corrected air density and viscosity\n    const pressureLoss = this.calculateCorrectedPressureLoss(\n      velocity,\n      segment.length || 0,\n      diameter,\n      materialData.roughness,\n      airProps\n    );\n\n    return {\n      segmentId: segment.id,\n      type: 'friction',\n      pressureLoss: this.roundToPrecision(pressureLoss, 4),\n      velocity: this.roundToPrecision(velocity, 1),\n      equivalentDiameter: this.roundToPrecision(diameter, 2),\n      materialRoughness: materialData.roughness,\n      airDensity: airProps.density,\n      correctionFactors: airProps.correctionFactors,\n      warnings,\n      notes\n    };\n  }\n\n  /**\n   * Calculate enhanced fitting loss with environmental corrections\n   */\n  private static calculateEnhancedFittingLoss(\n    segment: DuctSegment,\n    airProps: AirProperties,\n    warnings: string[],\n    notes: string[]\n  ): SegmentResult {\n    // Calculate velocity\n    const area = segment.ductShape === 'round'\n      ? Math.PI * Math.pow((segment.diameter || 12) / 12, 2) / 4\n      : ((segment.width || 12) * (segment.height || 12)) / 144;\n    const velocity = segment.airflow / area;\n\n    // Calculate velocity pressure with environmental corrections\n    const vpParams: VelocityPressureParams = {\n      velocity,\n      airConditions: {\n        temperature: segment.temperature || 70,\n        pressure: segment.pressure,\n        altitude: segment.elevation || 0,\n        humidity: segment.humidity || 50\n      }\n    };\n\n    const vpResult = AirPropertiesCalculator.calculateVelocityPressure(vpParams);\n    warnings.push(...vpResult.warnings);\n\n    // Calculate fitting loss using enhanced velocity pressure\n    const fittingResult = FittingLossCalculator.calculateFittingLoss(\n      segment.fittingConfig!,\n      velocity,\n      airProps.density\n    );\n\n    // Apply velocity pressure correction\n    const correctedPressureLoss = fittingResult.pressureLoss *\n      (vpResult.velocityPressure / Math.pow(velocity / 4005, 2));\n\n    return {\n      segmentId: segment.id,\n      type: 'fitting',\n      pressureLoss: this.roundToPrecision(correctedPressureLoss, 4),\n      velocity: this.roundToPrecision(velocity, 1),\n      kFactor: fittingResult.kFactor,\n      velocityPressure: vpResult.velocityPressure,\n      airDensity: airProps.density,\n      correctionFactors: vpResult.correctionFactors,\n      warnings,\n      notes\n    };\n  }\n\n  /**\n   * Calculate elevation pressure effects\n   */\n  private static calculateElevationPressure(segment: DuctSegment): {\n    pressureChange: number;\n    warnings: string[];\n  } {\n    const warnings: string[] = [];\n\n    if (!segment.elevation) {\n      return { pressureChange: 0, warnings };\n    }\n\n    // Calculate elevation effects using enhanced air properties\n    const elevationEffects = AirPropertiesCalculator.calculateElevationEffects(segment.elevation);\n    warnings.push(...elevationEffects.warnings);\n\n    // Pressure change due to elevation (simplified)\n    // ΔP = ρ × g × Δh / gc (converted to inches w.g.)\n    const airDensity = 0.075; // lb/ft³ at standard conditions\n    const pressureChange = (airDensity * segment.elevation) / 5.2; // Convert to inches w.g.\n\n    return {\n      pressureChange: pressureChange * elevationEffects.densityRatio,\n      warnings\n    };\n  }\n\n  /**\n   * Calculate average velocity across all segments\n   */\n  private static calculateAverageVelocity(segments: DuctSegment[]): number {\n    let totalVelocity = 0;\n    let count = 0;\n\n    for (const segment of segments) {\n      const area = segment.ductShape === 'round'\n        ? Math.PI * Math.pow((segment.diameter || 12) / 12, 2) / 4\n        : ((segment.width || 12) * (segment.height || 12)) / 144;\n\n      const velocity = segment.airflow / area;\n      totalVelocity += velocity;\n      count++;\n    }\n\n    return count > 0 ? totalVelocity / count : 0;\n  }\n\n  /**\n   * Validate environmental conditions\n   */\n  private static validateEnvironmentalConditions(designConditions: any): string[] {\n    const warnings: string[] = [];\n\n    if (designConditions.temperature < 32 || designConditions.temperature > 200) {\n      warnings.push(`Temperature ${designConditions.temperature}°F is outside normal HVAC range`);\n    }\n\n    if (designConditions.altitude && designConditions.altitude > 5000) {\n      warnings.push(`High altitude (${designConditions.altitude} ft) requires density corrections`);\n    }\n\n    if (designConditions.humidity && designConditions.humidity > 80) {\n      warnings.push(`High humidity (${designConditions.humidity}% RH) may cause condensation`);\n    }\n\n    return warnings;\n  }\n\n  /**\n   * Analyze enhanced system performance\n   */\n  private static analyzeEnhancedSystemPerformance(\n    results: SegmentResult[],\n    totalPressureLoss: number,\n    totalAirflow: number,\n    systemType: string,\n    designConditions: any\n  ): SystemAnalysis {\n    const warnings: string[] = [];\n    const recommendations: string[] = [];\n\n    // Enhanced performance analysis\n    const limits = this.getSystemLimits(systemType);\n    const averageVelocity = results.reduce((sum, r) => sum + (r.velocity || 0), 0) / results.length;\n\n    // Velocity compliance check\n    const velocityCompliant = averageVelocity >= limits.velocity.min &&\n                             averageVelocity <= limits.velocity.max;\n\n    if (!velocityCompliant) {\n      warnings.push(`Average velocity ${averageVelocity.toFixed(0)} FPM is outside recommended range`);\n    }\n\n    // Pressure compliance check\n    const pressureCompliant = totalPressureLoss <= limits.pressure.max;\n\n    if (!pressureCompliant) {\n      warnings.push(`Total pressure loss ${totalPressureLoss.toFixed(3)} in wg exceeds maximum`);\n    }\n\n    // Environmental impact analysis\n    const hasEnvironmentalCorrections = results.some(r =>\n      r.correctionFactors && Math.abs(r.correctionFactors.combined - 1.0) > 0.05\n    );\n\n    if (hasEnvironmentalCorrections) {\n      recommendations.push('Environmental conditions significantly affect system performance');\n    }\n\n    // Material aging analysis\n    const hasAgingEffects = results.some(r => r.materialRoughness && r.materialRoughness > 0.0005);\n\n    if (hasAgingEffects) {\n      recommendations.push('Consider duct cleaning or replacement for aged materials');\n    }\n\n    return {\n      warnings,\n      recommendations,\n      compliance: {\n        velocityCompliant,\n        pressureCompliant,\n        smacnaCompliant: velocityCompliant && pressureCompliant\n      }\n    };\n  }\n\n  /**\n   * Calculate corrected pressure loss with enhanced air properties\n   */\n  private static calculateCorrectedPressureLoss(\n    velocity: number,\n    length: number,\n    diameter: number,\n    roughness: number,\n    airProps: AirProperties\n  ): number {\n    // Convert units\n    const velocityFps = velocity / 60; // FPM to FPS\n    const diameterFt = diameter / 12; // inches to feet\n\n    // Calculate Reynolds number with corrected viscosity\n    const reynolds = (velocityFps * diameterFt * airProps.density) / airProps.viscosity;\n\n    // Calculate friction factor using enhanced roughness\n    const relativeRoughness = roughness / diameterFt;\n    const frictionFactor = this.calculateEnhancedFrictionFactor(reynolds, relativeRoughness);\n\n    // Darcy-Weisbach equation with corrected air density\n    const pressureLossPsf = frictionFactor * (length / diameterFt) *\n                           (airProps.density * Math.pow(velocityFps, 2)) / (2 * 32.174);\n\n    // Convert to inches w.g.\n    return pressureLossPsf / 5.2;\n  }\n\n  /**\n   * Enhanced friction factor calculation\n   */\n  private static calculateEnhancedFrictionFactor(reynolds: number, relativeRoughness: number): number {\n    // For laminar flow\n    if (reynolds < 2300) {\n      return 64 / reynolds;\n    }\n\n    // For turbulent flow - Colebrook-White equation (iterative solution)\n    let f = 0.02; // Initial guess\n\n    for (let i = 0; i < 10; i++) {\n      const fNew = 1 / Math.pow(-2 * Math.log10(relativeRoughness / 3.7 + 2.51 / (reynolds * Math.sqrt(f))), 2);\n\n      if (Math.abs(fNew - f) < 0.0001) {\n        break;\n      }\n      f = fNew;\n    }\n\n    return f;\n  }\n}\n"],"mappings":"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","ignoreList":[]}