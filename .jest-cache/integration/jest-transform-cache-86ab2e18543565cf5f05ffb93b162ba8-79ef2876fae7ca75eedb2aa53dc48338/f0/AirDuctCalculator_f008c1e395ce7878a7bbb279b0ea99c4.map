{"file":"/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/AirDuctCalculator.ts","mappings":"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","names":[],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/AirDuctCalculator.ts"],"sourcesContent":["/**\n * AirDuctCalculator - Pure Calculation Functions for Air Duct Sizing\n * \n * MISSION-CRITICAL: Pure TypeScript functions for SMACNA-compliant air duct calculations\n * Extracted from UI components for reusability and tier enforcement integration\n * \n * @see docs/implementation/tier-system/tier-boundaries-specification.md\n * @see docs/developer-guide/tier-implementation-checklist.md section 2.4\n */\n\n/**\n * Input parameters for duct sizing calculations\n */\nexport interface DuctSizingInputs {\n  airflow: number; // CFM\n  ductType: 'round' | 'rectangular';\n  frictionRate: number; // inches w.g. per 100 feet\n  units: 'imperial' | 'metric';\n  material?: string;\n  targetVelocity?: number; // FPM\n  maxVelocity?: number; // FPM\n  minVelocity?: number; // FPM\n}\n\n/**\n * Results from duct sizing calculations\n */\nexport interface DuctSizingResults {\n  // Common properties\n  area: number; // sq ft\n  velocity: number; // FPM\n  pressureLoss: number; // inches w.g. per 100 feet\n  reynoldsNumber: number;\n  frictionFactor: number;\n  \n  // Round duct specific\n  diameter?: number; // inches\n  \n  // Rectangular duct specific\n  width?: number; // inches\n  height?: number; // inches\n  equivalentDiameter?: number; // inches\n  hydraulicDiameter?: number; // inches\n  aspectRatio?: number;\n  \n  // Validation and recommendations\n  isOptimal: boolean;\n  warnings: string[];\n  recommendations: string[];\n  standardsCompliance: {\n    smacna: boolean;\n    ashrae: boolean;\n    velocityCompliant: boolean;\n  };\n}\n\n/**\n * Material properties for pressure loss calculations\n */\nexport interface MaterialProperties {\n  roughnessFactor: number; // feet\n  name: string;\n  description: string;\n}\n\n/**\n * AirDuctCalculator - Pure calculation functions for air duct sizing\n * CRITICAL: No dependencies on UI, storage, or external services\n */\nexport class AirDuctCalculator {\n  // SMACNA standard round duct sizes (inches)\n  private static readonly ROUND_STANDARD_SIZES = [\n    3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24,\n    26, 28, 30, 32, 36, 40, 42, 48, 54, 60\n  ];\n\n  // SMACNA standard rectangular duct sizes (inches)\n  private static readonly RECTANGULAR_STANDARD_SIZES = [\n    4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 22, 24,\n    26, 28, 30, 32, 36, 40, 42, 48, 54, 60, 72\n  ];\n\n  // Material roughness factors (feet)\n  private static readonly MATERIAL_PROPERTIES: Record<string, MaterialProperties> = {\n    galvanized_steel: { roughnessFactor: 0.0003, name: 'Galvanized Steel', description: 'Standard HVAC ductwork' },\n    aluminum: { roughnessFactor: 0.0002, name: 'Aluminum', description: 'Lightweight ductwork' },\n    stainless_steel: { roughnessFactor: 0.0002, name: 'Stainless Steel', description: 'Corrosion resistant' },\n    pvc: { roughnessFactor: 0.0001, name: 'PVC', description: 'Plastic ductwork' },\n    fiberglass: { roughnessFactor: 0.0005, name: 'Fiberglass', description: 'Insulated ductwork' },\n    concrete: { roughnessFactor: 0.003, name: 'Concrete', description: 'Underground ducts' },\n    brick: { roughnessFactor: 0.01, name: 'Brick', description: 'Masonry ducts' }\n  };\n\n  // SMACNA velocity limits (FPM)\n  private static readonly VELOCITY_LIMITS = {\n    supply: { min: 400, max: 2500, optimal: 1500 },\n    return: { min: 300, max: 2000, optimal: 1200 },\n    exhaust: { min: 500, max: 3000, optimal: 1800 }\n  };\n\n  /**\n   * Calculate air duct sizing based on SMACNA standards\n   * CRITICAL: Pure function with no side effects\n   */\n  public static calculateDuctSizing(inputs: DuctSizingInputs): DuctSizingResults {\n    // Validate inputs\n    this.validateInputs(inputs);\n\n    // Convert to imperial units if needed\n    const imperialInputs = inputs.units === 'metric' \n      ? this.convertToImperial(inputs) \n      : inputs;\n\n    // Perform calculation based on duct type\n    if (imperialInputs.ductType === 'round') {\n      return this.calculateRoundDuct(imperialInputs);\n    } else {\n      return this.calculateRectangularDuct(imperialInputs);\n    }\n  }\n\n  /**\n   * Calculate round duct sizing\n   */\n  private static calculateRoundDuct(inputs: DuctSizingInputs): DuctSizingResults {\n    const { airflow, frictionRate, material = 'galvanized_steel' } = inputs;\n\n    // Find optimal diameter using SMACNA friction chart method\n    const diameter = this.findOptimalRoundDiameter(airflow, frictionRate);\n\n    // Calculate area and velocity\n    const area = Math.PI * Math.pow(diameter / 12, 2) / 4; // sq ft\n    const velocity = airflow / area; // FPM\n\n    // Calculate pressure loss\n    const pressureLoss = this.calculatePressureLoss(velocity, 100, diameter, material);\n\n    // Calculate Reynolds number and friction factor\n    const reynoldsNumber = this.calculateReynoldsNumber(velocity, diameter);\n    const frictionFactor = this.calculateFrictionFactor(reynoldsNumber, material, diameter);\n\n    // Validate and generate recommendations\n    const validation = this.validateResults({ velocity, diameter, area });\n    const recommendations = this.generateRecommendations(inputs, { diameter, velocity, area });\n\n    return {\n      diameter,\n      area,\n      velocity,\n      pressureLoss,\n      reynoldsNumber,\n      frictionFactor,\n      isOptimal: validation.isOptimal,\n      warnings: validation.warnings,\n      recommendations,\n      standardsCompliance: {\n        smacna: validation.smacnaCompliant,\n        ashrae: validation.ashraeCompliant,\n        velocityCompliant: validation.velocityCompliant\n      }\n    };\n  }\n\n  /**\n   * Calculate rectangular duct sizing\n   */\n  private static calculateRectangularDuct(inputs: DuctSizingInputs): DuctSizingResults {\n    const { airflow, frictionRate, material = 'galvanized_steel' } = inputs;\n\n    // Find optimal dimensions\n    const { width, height } = this.findOptimalRectangularDimensions(airflow, frictionRate);\n\n    // Calculate area and velocity\n    const area = (width * height) / 144; // sq ft\n    const velocity = airflow / area; // FPM\n\n    // Calculate equivalent and hydraulic diameters\n    const equivalentDiameter = this.calculateEquivalentDiameter(width, height);\n    const hydraulicDiameter = this.calculateHydraulicDiameter(width, height);\n    const aspectRatio = this.calculateAspectRatio(width, height);\n\n    // Calculate pressure loss using equivalent diameter\n    const pressureLoss = this.calculatePressureLoss(velocity, 100, equivalentDiameter, material);\n\n    // Calculate Reynolds number and friction factor\n    const reynoldsNumber = this.calculateReynoldsNumber(velocity, hydraulicDiameter);\n    const frictionFactor = this.calculateFrictionFactor(reynoldsNumber, material, hydraulicDiameter);\n\n    // Validate and generate recommendations\n    const validation = this.validateResults({ velocity, width, height, aspectRatio, area });\n    const recommendations = this.generateRecommendations(inputs, { width, height, velocity, area, aspectRatio });\n\n    return {\n      width,\n      height,\n      area,\n      velocity,\n      pressureLoss,\n      reynoldsNumber,\n      frictionFactor,\n      equivalentDiameter,\n      hydraulicDiameter,\n      aspectRatio,\n      isOptimal: validation.isOptimal,\n      warnings: validation.warnings,\n      recommendations,\n      standardsCompliance: {\n        smacna: validation.smacnaCompliant,\n        ashrae: validation.ashraeCompliant,\n        velocityCompliant: validation.velocityCompliant\n      }\n    };\n  }\n\n  /**\n   * Find optimal round duct diameter using SMACNA friction chart method\n   */\n  private static findOptimalRoundDiameter(airflow: number, targetFriction: number): number {\n    let bestDiameter = this.ROUND_STANDARD_SIZES[0];\n    let bestScore = Infinity;\n\n    for (const diameter of this.ROUND_STANDARD_SIZES) {\n      const area = Math.PI * Math.pow(diameter / 12, 2) / 4; // sq ft\n      const velocity = airflow / area; // FPM\n\n      // Check velocity limits\n      if (velocity < this.VELOCITY_LIMITS.supply.min || velocity > this.VELOCITY_LIMITS.supply.max) {\n        continue;\n      }\n\n      // Calculate actual friction rate\n      const actualFriction = this.calculatePressureLoss(velocity, 100, diameter, 'galvanized_steel');\n      \n      // Score based on how close to target friction and optimal velocity\n      const frictionScore = Math.abs(actualFriction - targetFriction) / targetFriction;\n      const velocityScore = Math.abs(velocity - this.VELOCITY_LIMITS.supply.optimal) / this.VELOCITY_LIMITS.supply.optimal;\n      const totalScore = frictionScore + velocityScore * 0.5; // Weight friction more heavily\n\n      if (totalScore < bestScore) {\n        bestScore = totalScore;\n        bestDiameter = diameter;\n      }\n    }\n\n    return bestDiameter;\n  }\n\n  /**\n   * Find optimal rectangular duct dimensions\n   */\n  private static findOptimalRectangularDimensions(airflow: number, targetFriction: number): { width: number; height: number } {\n    let bestWidth = this.RECTANGULAR_STANDARD_SIZES[0];\n    let bestHeight = this.RECTANGULAR_STANDARD_SIZES[0];\n    let bestScore = Infinity;\n\n    // Try different aspect ratios (SMACNA recommends 1:1 to 4:1)\n    const aspectRatios = [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0];\n\n    for (const aspectRatio of aspectRatios) {\n      // Calculate estimated dimensions\n      const estimatedArea = airflow / this.VELOCITY_LIMITS.supply.optimal; // Target optimal velocity\n      const height = Math.sqrt(estimatedArea / aspectRatio) * 12; // inches\n      const width = aspectRatio * height;\n\n      // Round to nearest standard sizes\n      const heightStd = this.findNearestStandardSize(height, this.RECTANGULAR_STANDARD_SIZES);\n      const widthStd = this.findNearestStandardSize(width, this.RECTANGULAR_STANDARD_SIZES);\n\n      // Calculate actual properties\n      const area = (widthStd * heightStd) / 144; // sq ft\n      const velocity = airflow / area; // FPM\n\n      // Check velocity limits\n      if (velocity < this.VELOCITY_LIMITS.supply.min || velocity > this.VELOCITY_LIMITS.supply.max) {\n        continue;\n      }\n\n      // Calculate equivalent diameter and friction\n      const equivalentDiameter = this.calculateEquivalentDiameter(widthStd, heightStd);\n      const actualFriction = this.calculatePressureLoss(velocity, 100, equivalentDiameter, 'galvanized_steel');\n\n      // Score based on friction accuracy, velocity optimality, and aspect ratio\n      const frictionScore = Math.abs(actualFriction - targetFriction) / targetFriction;\n      const velocityScore = Math.abs(velocity - this.VELOCITY_LIMITS.supply.optimal) / this.VELOCITY_LIMITS.supply.optimal;\n      const aspectScore = aspectRatio > 3.0 ? (aspectRatio - 3.0) * 0.2 : 0; // Penalty for high aspect ratios\n      const totalScore = frictionScore + velocityScore * 0.5 + aspectScore;\n\n      if (totalScore < bestScore) {\n        bestScore = totalScore;\n        bestWidth = widthStd;\n        bestHeight = heightStd;\n      }\n    }\n\n    return { width: bestWidth, height: bestHeight };\n  }\n\n  /**\n   * Calculate equivalent diameter for rectangular ducts (SMACNA formula)\n   */\n  public static calculateEquivalentDiameter(width: number, height: number): number {\n    return 1.3 * Math.pow(width * height, 0.625) / Math.pow(width + height, 0.25);\n  }\n\n  /**\n   * Calculate hydraulic diameter for rectangular ducts\n   */\n  public static calculateHydraulicDiameter(width: number, height: number): number {\n    return (4 * width * height) / (2 * (width + height));\n  }\n\n  /**\n   * Calculate aspect ratio for rectangular ducts\n   */\n  public static calculateAspectRatio(width: number, height: number): number {\n    return Math.max(width, height) / Math.min(width, height);\n  }\n\n  /**\n   * Calculate pressure loss using Darcy-Weisbach equation\n   */\n  public static calculatePressureLoss(velocity: number, length: number, diameter: number, material: string): number {\n    const materialProps = this.MATERIAL_PROPERTIES[material] || this.MATERIAL_PROPERTIES.galvanized_steel;\n    const roughness = materialProps.roughnessFactor;\n\n    // Convert units\n    const velocityFps = velocity / 60; // FPM to FPS\n    const diameterFt = diameter / 12; // inches to feet\n\n    // Air properties at standard conditions (70°F, 14.7 psia)\n    const airDensity = 0.075; // lb/ft³\n    const kinematicViscosity = 1.57e-4; // ft²/s\n\n    // Calculate Reynolds number\n    const reynolds = (velocityFps * diameterFt) / kinematicViscosity;\n\n    // Calculate friction factor\n    const frictionFactor = this.calculateFrictionFactor(reynolds, material, diameter);\n\n    // Darcy-Weisbach equation: ΔP = f * (L/D) * (ρ * V²) / (2 * gc)\n    // Convert to inches of water per 100 feet\n    const pressureLossPsf = frictionFactor * (length / diameterFt) * (airDensity * Math.pow(velocityFps, 2)) / (2 * 32.174);\n    const pressureLossInWg = pressureLossPsf / 5.2; // Convert psf to inches w.g.\n\n    return pressureLossInWg;\n  }\n\n  /**\n   * Calculate Reynolds number\n   */\n  public static calculateReynoldsNumber(velocity: number, diameter: number): number {\n    const velocityFps = velocity / 60; // FPM to FPS\n    const diameterFt = diameter / 12; // inches to feet\n    const kinematicViscosity = 1.57e-4; // ft²/s for air at standard conditions\n\n    return (velocityFps * diameterFt) / kinematicViscosity;\n  }\n\n  /**\n   * Calculate friction factor using Colebrook-White equation\n   */\n  public static calculateFrictionFactor(reynolds: number, material: string, diameter: number): number {\n    const materialProps = this.MATERIAL_PROPERTIES[material] || this.MATERIAL_PROPERTIES.galvanized_steel;\n    const roughness = materialProps.roughnessFactor;\n    const diameterFt = diameter / 12;\n    const relativeRoughness = roughness / diameterFt;\n\n    // For laminar flow (Re < 2300)\n    if (reynolds < 2300) {\n      return 64 / reynolds;\n    }\n\n    // For turbulent flow, use Colebrook-White equation (iterative solution)\n    let f = 0.02; // Initial guess\n    for (let i = 0; i < 10; i++) {\n      const fNew = 1 / Math.pow(-2 * Math.log10(relativeRoughness / 3.7 + 2.51 / (reynolds * Math.sqrt(f))), 2);\n      if (Math.abs(fNew - f) < 0.0001) break;\n      f = fNew;\n    }\n\n    return f;\n  }\n\n  /**\n   * Validate calculation results\n   */\n  private static validateResults(results: any): {\n    isOptimal: boolean;\n    warnings: string[];\n    smacnaCompliant: boolean;\n    ashraeCompliant: boolean;\n    velocityCompliant: boolean;\n  } {\n    const warnings: string[] = [];\n    let smacnaCompliant = true;\n    let ashraeCompliant = true;\n    let velocityCompliant = true;\n\n    // Velocity validation\n    const { velocity } = results;\n    if (velocity < this.VELOCITY_LIMITS.supply.min) {\n      warnings.push(`Velocity ${velocity.toFixed(0)} FPM is below minimum recommended (${this.VELOCITY_LIMITS.supply.min} FPM)`);\n      velocityCompliant = false;\n    } else if (velocity > this.VELOCITY_LIMITS.supply.max) {\n      warnings.push(`Velocity ${velocity.toFixed(0)} FPM exceeds maximum recommended (${this.VELOCITY_LIMITS.supply.max} FPM)`);\n      velocityCompliant = false;\n      smacnaCompliant = false;\n    }\n\n    // Aspect ratio validation (for rectangular ducts)\n    if (results.aspectRatio) {\n      if (results.aspectRatio > 4.0) {\n        warnings.push(`Aspect ratio ${results.aspectRatio.toFixed(1)}:1 exceeds SMACNA maximum of 4:1`);\n        smacnaCompliant = false;\n      } else if (results.aspectRatio > 3.0) {\n        warnings.push(`Aspect ratio ${results.aspectRatio.toFixed(1)}:1 is high - consider optimization`);\n      }\n    }\n\n    // Area validation\n    if (results.area < 0.1) {\n      warnings.push('Very small duct area. Consider minimum duct size requirements.');\n    }\n\n    const isOptimal = warnings.length === 0 && \n      velocity >= this.VELOCITY_LIMITS.supply.optimal * 0.8 && \n      velocity <= this.VELOCITY_LIMITS.supply.optimal * 1.2;\n\n    return {\n      isOptimal,\n      warnings,\n      smacnaCompliant,\n      ashraeCompliant,\n      velocityCompliant\n    };\n  }\n\n  /**\n   * Generate recommendations based on calculation results\n   */\n  private static generateRecommendations(inputs: DuctSizingInputs, results: any): string[] {\n    const recommendations: string[] = [];\n\n    // Velocity recommendations\n    if (results.velocity < this.VELOCITY_LIMITS.supply.optimal * 0.8) {\n      recommendations.push('Consider reducing duct size to increase velocity for better performance');\n    } else if (results.velocity > this.VELOCITY_LIMITS.supply.optimal * 1.2) {\n      recommendations.push('Consider increasing duct size to reduce velocity and noise');\n    }\n\n    // Aspect ratio recommendations (for rectangular ducts)\n    if (results.aspectRatio && results.aspectRatio > 3.0) {\n      recommendations.push('Consider using round duct or reducing aspect ratio for better performance');\n    }\n\n    // Material recommendations\n    if (inputs.material === 'galvanized_steel' && results.velocity > 2000) {\n      recommendations.push('Consider using smoother materials like aluminum for high-velocity applications');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Find nearest standard size\n   */\n  private static findNearestStandardSize(target: number, standardSizes: number[]): number {\n    return standardSizes.reduce((prev, curr) => \n      Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev\n    );\n  }\n\n  /**\n   * Convert metric inputs to imperial\n   */\n  private static convertToImperial(inputs: DuctSizingInputs): DuctSizingInputs {\n    return {\n      ...inputs,\n      airflow: inputs.airflow * 2.119, // m³/h to CFM\n      frictionRate: inputs.frictionRate * 0.249, // Pa/m to inches w.g. per 100 feet\n      units: 'imperial'\n    };\n  }\n\n  /**\n   * Validate input parameters\n   */\n  private static validateInputs(inputs: DuctSizingInputs): void {\n    if (inputs.airflow <= 0) {\n      throw new Error('Airflow must be greater than 0');\n    }\n    if (inputs.frictionRate <= 0) {\n      throw new Error('Friction rate must be greater than 0');\n    }\n    if (!['round', 'rectangular'].includes(inputs.ductType)) {\n      throw new Error('Duct type must be \"round\" or \"rectangular\"');\n    }\n    if (!['imperial', 'metric'].includes(inputs.units)) {\n      throw new Error('Units must be \"imperial\" or \"metric\"');\n    }\n  }\n\n  /**\n   * Get available materials\n   */\n  public static getMaterials(): Record<string, MaterialProperties> {\n    return { ...this.MATERIAL_PROPERTIES };\n  }\n\n  /**\n   * Get velocity limits\n   */\n  public static getVelocityLimits(): typeof AirDuctCalculator.VELOCITY_LIMITS {\n    return { ...this.VELOCITY_LIMITS };\n  }\n\n  /**\n   * Get standard sizes\n   */\n  public static getStandardSizes(): { round: number[]; rectangular: number[] } {\n    return {\n      round: [...this.ROUND_STANDARD_SIZES],\n      rectangular: [...this.RECTANGULAR_STANDARD_SIZES]\n    };\n  }\n}\n\nexport default AirDuctCalculator;\n"],"version":3}