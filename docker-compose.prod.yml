# SizeWise Suite Production Environment
# This docker-compose file is optimized for production deployment with
# security hardening, resource limits, and high availability configurations.

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sizewise-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/postgres/postgresql-prod.conf:/etc/postgresql/postgresql.conf
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - sizewise-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: sizewise-redis-prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - sizewise-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    restart: always
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sizewise}:${POSTGRES_PASSWORD:-sizewise_password}@postgres:5432/${POSTGRES_DB:-sizewise_suite}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - SENTRY_ENVIRONMENT=production
      - SENTRY_RELEASE=${SENTRY_RELEASE:-sizewise-backend@1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./data:/app/data:ro
      - backend_logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sizewise-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Server
  auth-server:
    build:
      context: .
      dockerfile: docker/auth-server/Dockerfile
      target: production
    restart: always
    environment:
      - FLASK_ENV=production
      - PORT=5001
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sizewise}:${POSTGRES_PASSWORD:-sizewise_password}@postgres:5432/${POSTGRES_AUTH_DB:-sizewise_auth}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      - SECRET_KEY=${AUTH_SECRET_KEY:-change-this-auth-secret-key-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-this-jwt-secret-key-in-production}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - SENTRY_ENVIRONMENT=production
      - SENTRY_RELEASE=${SENTRY_RELEASE:-sizewise-auth@1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - auth_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sizewise-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
      target: production
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.your-domain.com/api}
      - NEXT_PUBLIC_AUTH_URL=${NEXT_PUBLIC_AUTH_URL:-https://auth.your-domain.com/api}
      - NEXT_PUBLIC_CDN_URL=${NEXT_PUBLIC_CDN_URL:-}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - SENTRY_ENVIRONMENT=production
      - SENTRY_RELEASE=${SENTRY_RELEASE:-sizewise-frontend@1.0.0}
    depends_on:
      - backend
      - auth-server
    networks:
      - sizewise-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # NGINX Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - auth-server
    networks:
      - sizewise-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  # Database volumes
  postgres_data:
    driver: local
  redis_data:
    driver: local

  # Application logs
  backend_logs:
    driver: local
  auth_logs:
    driver: local
  nginx_logs:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  sizewise-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
