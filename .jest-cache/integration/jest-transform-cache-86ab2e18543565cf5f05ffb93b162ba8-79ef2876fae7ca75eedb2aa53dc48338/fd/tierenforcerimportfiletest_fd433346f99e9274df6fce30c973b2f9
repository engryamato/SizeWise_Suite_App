5c625d0e6bea8958d8f6cc5f23fa964d
"use strict";
/**
 * TierEnforcer import/file access tests (integration style)
 *
 * Validates new additive methods validateImportAccess and validateFileAccess
 * using lightweight FeatureManager + userRepository stubs.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TierEnforcer_1 = __importDefault(require("@backend/services/enforcement/TierEnforcer"));
const FeatureManager_1 = require("@backend/features/FeatureManager");
// Minimal DatabaseManager stub
const dbStub = {};
function makeFeatureManagerWithTier(tier) {
    const fm = new FeatureManager_1.FeatureManager(dbStub);
    fm.userRepository = {
        getUser: jest.fn(async (_userId) => ({ id: _userId, tier }))
    };
    return fm;
}
describe('TierEnforcer - validateImportAccess', () => {
    test('allows import within size limit for free tier; denies when exceeding 10MB with requiredTier pro', async () => {
        const featureManager = makeFeatureManagerWithTier('free');
        const te = new TierEnforcer_1.default(featureManager, dbStub);
        // Under 10MB
        const small = await te.validateImportAccess('u1', '.json', 5 * 1024 * 1024);
        expect(small.allowed).toBe(true);
        expect(small.currentTier).toBe('free');
        // Over 10MB -> require pro
        const big = await te.validateImportAccess('u1', '.json', 20 * 1024 * 1024);
        expect(big.allowed).toBe(false);
        expect(big.requiredTier).toBe('pro');
    });
    test('requires enterprise for imports exceeding 100MB for pro user', async () => {
        const featureManager = makeFeatureManagerWithTier('pro');
        const te = new TierEnforcer_1.default(featureManager, dbStub);
        const huge = await te.validateImportAccess('u2', '.json', 200 * 1024 * 1024);
        expect(huge.allowed).toBe(false);
        expect(huge.requiredTier).toBe('enterprise');
    });
    test('allows large imports for enterprise up to 1GB threshold', async () => {
        const featureManager = makeFeatureManagerWithTier('enterprise');
        const te = new TierEnforcer_1.default(featureManager, dbStub);
        const ok = await te.validateImportAccess('u3', '.json', 900 * 1024 * 1024);
        expect(ok.allowed).toBe(true);
        expect(ok.currentTier).toBe('enterprise');
    });
});
describe('TierEnforcer - validateFileAccess', () => {
    test('returns allowed true for both read and write (current implementation)', async () => {
        const featureManager = makeFeatureManagerWithTier('pro');
        const te = new TierEnforcer_1.default(featureManager, dbStub);
        const readRes = await te.validateFileAccess('any', 'read');
        const writeRes = await te.validateFileAccess('any', 'write');
        expect(readRes.allowed).toBe(true);
        expect(writeRes.allowed).toBe(true);
        expect(readRes.currentTier).toBe('pro');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2pvaG5yZXlyYXpvbmFibGUvRG9jdW1lbnRzL1NpemVXaXNlX1N1aXRlX0FwcC90ZXN0cy9pbnRlZ3JhdGlvbi9lbmZvcmNlbWVudC90aWVyLWVuZm9yY2VyLWltcG9ydC1maWxlLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7OztBQUVILDhGQUFzRTtBQUN0RSxxRUFBa0U7QUFFbEUsK0JBQStCO0FBQy9CLE1BQU0sTUFBTSxHQUFRLEVBQUUsQ0FBQztBQUV2QixTQUFTLDBCQUEwQixDQUFDLElBQStCO0lBQ2pFLE1BQU0sRUFBRSxHQUFHLElBQUksK0JBQWMsQ0FBQyxNQUFNLENBQVEsQ0FBQztJQUM3QyxFQUFFLENBQUMsY0FBYyxHQUFHO1FBQ2xCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7S0FDckUsQ0FBQztJQUNGLE9BQU8sRUFBb0IsQ0FBQztBQUM5QixDQUFDO0FBRUQsUUFBUSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtJQUNuRCxJQUFJLENBQUMsaUdBQWlHLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDakgsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUQsTUFBTSxFQUFFLEdBQUcsSUFBSSxzQkFBWSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVwRCxhQUFhO1FBQ2IsTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXZDLDJCQUEyQjtRQUMzQixNQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDM0UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsOERBQThELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUUsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsTUFBTSxFQUFFLEdBQUcsSUFBSSxzQkFBWSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVwRCxNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDN0UsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseURBQXlELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDekUsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsTUFBTSxFQUFFLEdBQUcsSUFBSSxzQkFBWSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVwRCxNQUFNLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDM0UsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7SUFDakQsSUFBSSxDQUFDLHVFQUF1RSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZGLE1BQU0sY0FBYyxHQUFHLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pELE1BQU0sRUFBRSxHQUFHLElBQUksc0JBQVksQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFcEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNELE1BQU0sUUFBUSxHQUFHLE1BQU0sRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU3RCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb2hucmV5cmF6b25hYmxlL0RvY3VtZW50cy9TaXplV2lzZV9TdWl0ZV9BcHAvdGVzdHMvaW50ZWdyYXRpb24vZW5mb3JjZW1lbnQvdGllci1lbmZvcmNlci1pbXBvcnQtZmlsZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGllckVuZm9yY2VyIGltcG9ydC9maWxlIGFjY2VzcyB0ZXN0cyAoaW50ZWdyYXRpb24gc3R5bGUpXG4gKlxuICogVmFsaWRhdGVzIG5ldyBhZGRpdGl2ZSBtZXRob2RzIHZhbGlkYXRlSW1wb3J0QWNjZXNzIGFuZCB2YWxpZGF0ZUZpbGVBY2Nlc3NcbiAqIHVzaW5nIGxpZ2h0d2VpZ2h0IEZlYXR1cmVNYW5hZ2VyICsgdXNlclJlcG9zaXRvcnkgc3R1YnMuXG4gKi9cblxuaW1wb3J0IFRpZXJFbmZvcmNlciBmcm9tICdAYmFja2VuZC9zZXJ2aWNlcy9lbmZvcmNlbWVudC9UaWVyRW5mb3JjZXInO1xuaW1wb3J0IHsgRmVhdHVyZU1hbmFnZXIgfSBmcm9tICdAYmFja2VuZC9mZWF0dXJlcy9GZWF0dXJlTWFuYWdlcic7XG5cbi8vIE1pbmltYWwgRGF0YWJhc2VNYW5hZ2VyIHN0dWJcbmNvbnN0IGRiU3R1YjogYW55ID0ge307XG5cbmZ1bmN0aW9uIG1ha2VGZWF0dXJlTWFuYWdlcldpdGhUaWVyKHRpZXI6ICdmcmVlJ3wncHJvJ3wnZW50ZXJwcmlzZScpIHtcbiAgY29uc3QgZm0gPSBuZXcgRmVhdHVyZU1hbmFnZXIoZGJTdHViKSBhcyBhbnk7XG4gIGZtLnVzZXJSZXBvc2l0b3J5ID0ge1xuICAgIGdldFVzZXI6IGplc3QuZm4oYXN5bmMgKF91c2VySWQ6IHN0cmluZykgPT4gKHsgaWQ6IF91c2VySWQsIHRpZXIgfSkpXG4gIH07XG4gIHJldHVybiBmbSBhcyBGZWF0dXJlTWFuYWdlcjtcbn1cblxuZGVzY3JpYmUoJ1RpZXJFbmZvcmNlciAtIHZhbGlkYXRlSW1wb3J0QWNjZXNzJywgKCkgPT4ge1xuICB0ZXN0KCdhbGxvd3MgaW1wb3J0IHdpdGhpbiBzaXplIGxpbWl0IGZvciBmcmVlIHRpZXI7IGRlbmllcyB3aGVuIGV4Y2VlZGluZyAxME1CIHdpdGggcmVxdWlyZWRUaWVyIHBybycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBmZWF0dXJlTWFuYWdlciA9IG1ha2VGZWF0dXJlTWFuYWdlcldpdGhUaWVyKCdmcmVlJyk7XG4gICAgY29uc3QgdGUgPSBuZXcgVGllckVuZm9yY2VyKGZlYXR1cmVNYW5hZ2VyLCBkYlN0dWIpO1xuXG4gICAgLy8gVW5kZXIgMTBNQlxuICAgIGNvbnN0IHNtYWxsID0gYXdhaXQgdGUudmFsaWRhdGVJbXBvcnRBY2Nlc3MoJ3UxJywgJy5qc29uJywgNSAqIDEwMjQgKiAxMDI0KTtcbiAgICBleHBlY3Qoc21hbGwuYWxsb3dlZCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3Qoc21hbGwuY3VycmVudFRpZXIpLnRvQmUoJ2ZyZWUnKTtcblxuICAgIC8vIE92ZXIgMTBNQiAtPiByZXF1aXJlIHByb1xuICAgIGNvbnN0IGJpZyA9IGF3YWl0IHRlLnZhbGlkYXRlSW1wb3J0QWNjZXNzKCd1MScsICcuanNvbicsIDIwICogMTAyNCAqIDEwMjQpO1xuICAgIGV4cGVjdChiaWcuYWxsb3dlZCkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KGJpZy5yZXF1aXJlZFRpZXIpLnRvQmUoJ3BybycpO1xuICB9KTtcblxuICB0ZXN0KCdyZXF1aXJlcyBlbnRlcnByaXNlIGZvciBpbXBvcnRzIGV4Y2VlZGluZyAxMDBNQiBmb3IgcHJvIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZmVhdHVyZU1hbmFnZXIgPSBtYWtlRmVhdHVyZU1hbmFnZXJXaXRoVGllcigncHJvJyk7XG4gICAgY29uc3QgdGUgPSBuZXcgVGllckVuZm9yY2VyKGZlYXR1cmVNYW5hZ2VyLCBkYlN0dWIpO1xuXG4gICAgY29uc3QgaHVnZSA9IGF3YWl0IHRlLnZhbGlkYXRlSW1wb3J0QWNjZXNzKCd1MicsICcuanNvbicsIDIwMCAqIDEwMjQgKiAxMDI0KTtcbiAgICBleHBlY3QoaHVnZS5hbGxvd2VkKS50b0JlKGZhbHNlKTtcbiAgICBleHBlY3QoaHVnZS5yZXF1aXJlZFRpZXIpLnRvQmUoJ2VudGVycHJpc2UnKTtcbiAgfSk7XG5cbiAgdGVzdCgnYWxsb3dzIGxhcmdlIGltcG9ydHMgZm9yIGVudGVycHJpc2UgdXAgdG8gMUdCIHRocmVzaG9sZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBmZWF0dXJlTWFuYWdlciA9IG1ha2VGZWF0dXJlTWFuYWdlcldpdGhUaWVyKCdlbnRlcnByaXNlJyk7XG4gICAgY29uc3QgdGUgPSBuZXcgVGllckVuZm9yY2VyKGZlYXR1cmVNYW5hZ2VyLCBkYlN0dWIpO1xuXG4gICAgY29uc3Qgb2sgPSBhd2FpdCB0ZS52YWxpZGF0ZUltcG9ydEFjY2VzcygndTMnLCAnLmpzb24nLCA5MDAgKiAxMDI0ICogMTAyNCk7XG4gICAgZXhwZWN0KG9rLmFsbG93ZWQpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KG9rLmN1cnJlbnRUaWVyKS50b0JlKCdlbnRlcnByaXNlJyk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdUaWVyRW5mb3JjZXIgLSB2YWxpZGF0ZUZpbGVBY2Nlc3MnLCAoKSA9PiB7XG4gIHRlc3QoJ3JldHVybnMgYWxsb3dlZCB0cnVlIGZvciBib3RoIHJlYWQgYW5kIHdyaXRlIChjdXJyZW50IGltcGxlbWVudGF0aW9uKScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBmZWF0dXJlTWFuYWdlciA9IG1ha2VGZWF0dXJlTWFuYWdlcldpdGhUaWVyKCdwcm8nKTtcbiAgICBjb25zdCB0ZSA9IG5ldyBUaWVyRW5mb3JjZXIoZmVhdHVyZU1hbmFnZXIsIGRiU3R1Yik7XG5cbiAgICBjb25zdCByZWFkUmVzID0gYXdhaXQgdGUudmFsaWRhdGVGaWxlQWNjZXNzKCdhbnknLCAncmVhZCcpO1xuICAgIGNvbnN0IHdyaXRlUmVzID0gYXdhaXQgdGUudmFsaWRhdGVGaWxlQWNjZXNzKCdhbnknLCAnd3JpdGUnKTtcblxuICAgIGV4cGVjdChyZWFkUmVzLmFsbG93ZWQpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHdyaXRlUmVzLmFsbG93ZWQpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KHJlYWRSZXMuY3VycmVudFRpZXIpLnRvQmUoJ3BybycpO1xuICB9KTtcbn0pO1xuXG4iXSwidmVyc2lvbiI6M30=