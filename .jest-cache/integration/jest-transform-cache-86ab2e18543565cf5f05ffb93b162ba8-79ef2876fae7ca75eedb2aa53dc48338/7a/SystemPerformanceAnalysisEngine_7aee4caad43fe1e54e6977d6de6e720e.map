{"version":3,"names":["cov_20nkvyezxw","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","SystemAnalysisTypes_1","require","SystemPressureCalculator_1","SystemPerformanceAnalysisEngine","analyzeSystemPerformance","systemConfiguration","analysisScope","historicalData","analysisId","generateAnalysisId","id","timestamp","Date","performanceMetrics","calculatePerformanceMetrics","trendAnalysis","length","performTrendAnalysis","createDefaultTrendAnalysis","benchmarkComparison","performBenchmarkComparison","efficiencyAnalysis","analyzeSystemEfficiency","alertsAndWarnings","detectPerformanceAlerts","recommendations","generatePerformanceRecommendations","uncertaintyAnalysis","performUncertaintyAnalysis","analysis","systemId","analysisTimestamp","ANALYSIS_CACHE","set","error","Error","message","systemPressureResult","SystemPressureCalculator","calculateEnhancedSystemPressure","segments","createDuctSegmentsFromConfig","systemType","designConditions","operatingConditions","fanPerformance","calculateFanPerformance","totalPressureLoss","airflowMetrics","calculateAirflowMetrics","efficiencyMetrics","calculateSystemEfficiencyMetrics","environmentalMetrics","calculateEnvironmentalMetrics","balanceQuality","assessSystemBalance","totalSystemPressure","createMeasurement","MeasurementSource","CALCULATED","QualityIndicator","HIGH","staticPressure","velocityPressure","totalAirflow","designAirflow","designParameters","MANUFACTURER_DATA","airflowEfficiency","efficiency","MEDIUM","fanPower","power","fanEfficiency","fanSpeed","speed","fanCurvePosition","curvePosition","systemEfficiency","transportEfficiency","distributionEfficiency","noiseLevel","ESTIMATED","vibrationLevel","LOW","temperatureRise","filterPressureDrop","coilPressureDrop","dampersPosition","flowDistribution","value","units","source","quality","accuracy","qualityIndicator","uncertaintyBounds","lowerBound","upperBound","confidenceLevel","distributionType","systemPressure","designPressure","Math","max","min","powerKW","sqrt","operatingPoint","airflow","pressure","designPoint","efficiencyAtOperating","efficiencyAtDesign","surgeMargin","stallMargin","recommendedOperatingRange","minAirflow","maxAirflow","minPressure","maxPressure","uniformityIndex","variationCoefficient","zones","velocity","log10","flowVariation","pressureVariation","overallScore","balanceGrade","BalanceGrade","EXCELLENT","GOOD","ACCEPTABLE","POOR","CRITICAL","criticalZones","balanceRecommendations","generateBalanceRecommendations","grade","diameter","material","roughness","fittings","now","random","toString","substring","timeRange","startDate","endDate","duration","trendDirection","TrendDirection","STABLE","trendMagnitude","seasonalPatterns","anomalies","predictiveAnalysis","forecastHorizon","predictedPerformance","confidenceInterval","predictionModel","modelType","lastTrainingDate","dataPoints","validationScore","keyFactors","scenarios","degradationRate","overallDegradationRate","componentDegradation","degradationFactors","maintenanceImpact","preventiveMaintenance","performanceImpact","lifespanImpact","costImpact","correctiveMaintenance","deferredMaintenance","projectedLifespan","currentAge","designLife","projectedLife","keyAssumptions","currentMetrics","calculateTrendDirection","detectSeasonalPatterns","detectAnomalies","generatePredictiveAnalysis","calculateDegradationRate","direction","magnitude","efficiencyValues","map","data","n","x","Array","from","_","i","sumX","reduce","a","sumY","sumXY","sum","xi","sumXX","slope","abs","IMPROVING","DEGRADING","season","averagePerformance","performanceVariation","typicalIssues","lastEfficiency","currentEfficiency","efficiencyDrop","push","detectionTimestamp","anomalyType","AnomalyType","SUDDEN_CHANGE","severity","affectedMetrics","deviationMagnitude","possibleCauses","cause","probability","category","diagnosticSteps","recommendedActions","resolved","metric","currentValue","predictedValue","changePercent","timeToTarget","factor","impact","controllable","mitigationStrategies","componentId","componentType","currentCondition","estimatedRemainingLife","replacementThreshold","industryAverage","bestInClass","benchmarkType","BenchmarkType","INDUSTRY_AVERAGE","benchmarkSource","systemPerformance","benchmarkValue","percentile","calculatePercentile","performanceGap","improvementPotential","similarSystems","systemName","performanceMetric","systemCharacteristics","size","age","buildingType","climateZone","operatingHours","performanceDifference","average","standardDeviation","zScore","overallEfficiency","calculationMethod","componentEfficiencies","ratedEfficiency","degradationFactor","maintenanceStatus","efficiencyTrends","efficiencyLosses","improvementOpportunities","alerts","alertType","AlertType","THRESHOLD_EXCEEDED","AlertSeverity","thresholdValue","acknowledged","RecommendationType","OPTIMIZATION","priority","RecommendationPriority","title","description","expectedImpact","energySavings","costSavings","performanceImprovement","emissionReduction","reliabilityImprovement","implementationCost","paybackPeriod","implementationComplexity","requiredActions","timeline","overallUncertainty","metricUncertainties","uncertainty","sensitivityAnalysis","parameters","parameter","sensitivity","keyDrivers","uncertaintyContributors","exports","VERSION","Map","BENCHMARK_DATABASE"],"sources":["/Users/johnreyrazonable/Documents/SizeWise_Suite_App/backend/services/calculations/SystemPerformanceAnalysisEngine.ts"],"sourcesContent":["/**\n * System Performance Analysis Engine\n * \n * Comprehensive performance analysis service for Phase 3 Priority 3: Advanced System Analysis Tools\n * Provides real-time monitoring, trend analysis, efficiency calculations, and performance benchmarking\n * capabilities for HVAC duct systems.\n * \n * @version 3.0.0\n * @author SizeWise Suite Development Team\n */\n\nimport {\n  SystemAnalysis,\n  PerformanceAnalysis,\n  PerformanceMetrics,\n  TrendAnalysis,\n  BenchmarkComparison,\n  EfficiencyAnalysis,\n  PerformanceAlert,\n  PerformanceRecommendation,\n  UncertaintyAnalysis,\n  SystemConfiguration,\n  AnalysisType,\n  AnalysisScope,\n  Measurement,\n  MeasurementSource,\n  QualityIndicator,\n  FanCurvePosition,\n  BalanceQuality,\n  BalanceGrade,\n  TrendDirection,\n  AlertType,\n  AlertSeverity,\n  RecommendationType,\n  RecommendationPriority,\n  BenchmarkType,\n  PerformanceAnomaly,\n  AnomalyType,\n  PredictiveAnalysis\n} from './types/SystemAnalysisTypes';\n\nimport { SystemPressureCalculator } from './SystemPressureCalculator';\nimport { FittingLossCalculator } from './FittingLossCalculator';\nimport { AdvancedFittingCalculator } from './AdvancedFittingCalculator';\nimport { AirPropertiesCalculator } from './AirPropertiesCalculator';\n\n/**\n * Main System Performance Analysis Engine\n * \n * Provides comprehensive performance analysis capabilities including:\n * - Real-time performance monitoring\n * - Trend analysis and forecasting\n * - Efficiency calculations and benchmarking\n * - Anomaly detection and alerting\n * - Performance recommendations\n */\nexport class SystemPerformanceAnalysisEngine {\n  private static readonly VERSION = '3.0.0';\n  private static readonly ANALYSIS_CACHE = new Map<string, PerformanceAnalysis>();\n  private static readonly BENCHMARK_DATABASE = new Map<string, BenchmarkComparison>();\n\n  /**\n   * Perform comprehensive system performance analysis\n   */\n  public static async analyzeSystemPerformance(\n    systemConfiguration: SystemConfiguration,\n    analysisScope: AnalysisScope,\n    historicalData?: PerformanceMetrics[]\n  ): Promise<PerformanceAnalysis> {\n    try {\n      const analysisId = this.generateAnalysisId(systemConfiguration.id);\n      const timestamp = new Date();\n\n      // Calculate current performance metrics\n      const performanceMetrics = await this.calculatePerformanceMetrics(\n        systemConfiguration,\n        analysisScope\n      );\n\n      // Perform trend analysis if historical data is available\n      const trendAnalysis = historicalData && historicalData.length > 0\n        ? await this.performTrendAnalysis(historicalData, performanceMetrics)\n        : this.createDefaultTrendAnalysis();\n\n      // Benchmark against similar systems\n      const benchmarkComparison = await this.performBenchmarkComparison(\n        systemConfiguration,\n        performanceMetrics\n      );\n\n      // Analyze system efficiency\n      const efficiencyAnalysis = await this.analyzeSystemEfficiency(\n        systemConfiguration,\n        performanceMetrics\n      );\n\n      // Detect performance alerts and anomalies\n      const alertsAndWarnings = await this.detectPerformanceAlerts(\n        performanceMetrics,\n        historicalData\n      );\n\n      // Generate performance recommendations\n      const recommendations = await this.generatePerformanceRecommendations(\n        performanceMetrics,\n        efficiencyAnalysis,\n        benchmarkComparison\n      );\n\n      // Perform uncertainty analysis\n      const uncertaintyAnalysis = await this.performUncertaintyAnalysis(\n        performanceMetrics,\n        systemConfiguration\n      );\n\n      const analysis: PerformanceAnalysis = {\n        id: analysisId,\n        systemId: systemConfiguration.id,\n        analysisTimestamp: timestamp,\n        performanceMetrics,\n        trendAnalysis,\n        benchmarkComparison,\n        efficiencyAnalysis,\n        alertsAndWarnings,\n        recommendations,\n        uncertaintyAnalysis\n      };\n\n      // Cache the analysis for future reference\n      this.ANALYSIS_CACHE.set(analysisId, analysis);\n\n      return analysis;\n\n    } catch (error) {\n      throw new Error(`System performance analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Calculate comprehensive performance metrics for the system\n   */\n  private static async calculatePerformanceMetrics(\n    systemConfiguration: SystemConfiguration,\n    analysisScope: AnalysisScope\n  ): Promise<PerformanceMetrics> {\n    const timestamp = new Date();\n\n    // Calculate system pressure using existing calculators\n    const systemPressureResult = SystemPressureCalculator.calculateEnhancedSystemPressure({\n      segments: this.createDuctSegmentsFromConfig(systemConfiguration),\n      systemType: systemConfiguration.systemType,\n      designConditions: systemConfiguration.operatingConditions\n    });\n\n    // Calculate fan performance metrics\n    const fanPerformance = this.calculateFanPerformance(\n      systemConfiguration,\n      systemPressureResult.totalPressureLoss\n    );\n\n    // Calculate airflow metrics\n    const airflowMetrics = this.calculateAirflowMetrics(systemConfiguration);\n\n    // Calculate system efficiency metrics\n    const efficiencyMetrics = this.calculateSystemEfficiencyMetrics(\n      systemConfiguration,\n      fanPerformance,\n      systemPressureResult\n    );\n\n    // Calculate environmental metrics\n    const environmentalMetrics = this.calculateEnvironmentalMetrics(\n      systemConfiguration,\n      fanPerformance\n    );\n\n    // Calculate system balance quality\n    const balanceQuality = this.assessSystemBalance(\n      systemConfiguration,\n      airflowMetrics\n    );\n\n    const performanceMetrics: PerformanceMetrics = {\n      // Pressure and Flow Metrics\n      totalSystemPressure: this.createMeasurement(\n        systemPressureResult.totalPressureLoss,\n        'in wg',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      staticPressure: this.createMeasurement(\n        systemPressureResult.staticPressure || systemPressureResult.totalPressureLoss * 0.8,\n        'in wg',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      velocityPressure: this.createMeasurement(\n        systemPressureResult.velocityPressure || systemPressureResult.totalPressureLoss * 0.2,\n        'in wg',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      totalAirflow: this.createMeasurement(\n        airflowMetrics.totalAirflow,\n        'CFM',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      designAirflow: this.createMeasurement(\n        systemConfiguration.designParameters.designAirflow,\n        'CFM',\n        MeasurementSource.MANUFACTURER_DATA,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      airflowEfficiency: this.createMeasurement(\n        airflowMetrics.efficiency,\n        '%',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n\n      // Fan Performance\n      fanPower: this.createMeasurement(\n        fanPerformance.power,\n        'kW',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      fanEfficiency: this.createMeasurement(\n        fanPerformance.efficiency,\n        '%',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      fanSpeed: this.createMeasurement(\n        fanPerformance.speed,\n        'RPM',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n      fanCurvePosition: fanPerformance.curvePosition,\n\n      // System Efficiency\n      systemEfficiency: this.createMeasurement(\n        efficiencyMetrics.systemEfficiency,\n        '%',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      transportEfficiency: this.createMeasurement(\n        efficiencyMetrics.transportEfficiency,\n        '%',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.HIGH,\n        timestamp\n      ),\n      distributionEfficiency: this.createMeasurement(\n        efficiencyMetrics.distributionEfficiency,\n        '%',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n\n      // Environmental Metrics\n      noiseLevel: this.createMeasurement(\n        environmentalMetrics.noiseLevel,\n        'dBA',\n        MeasurementSource.ESTIMATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n      vibrationLevel: this.createMeasurement(\n        environmentalMetrics.vibrationLevel,\n        'mm/s',\n        MeasurementSource.ESTIMATED,\n        QualityIndicator.LOW,\n        timestamp\n      ),\n      temperatureRise: this.createMeasurement(\n        environmentalMetrics.temperatureRise,\n        '°F',\n        MeasurementSource.CALCULATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n\n      // Filter and Component Performance\n      filterPressureDrop: this.createMeasurement(\n        environmentalMetrics.filterPressureDrop,\n        'in wg',\n        MeasurementSource.ESTIMATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n      coilPressureDrop: this.createMeasurement(\n        environmentalMetrics.coilPressureDrop,\n        'in wg',\n        MeasurementSource.ESTIMATED,\n        QualityIndicator.MEDIUM,\n        timestamp\n      ),\n      dampersPosition: [], // Would be populated from actual system data\n\n      // System Balance\n      balanceQuality,\n      flowDistribution: airflowMetrics.flowDistribution\n    };\n\n    return performanceMetrics;\n  }\n\n  /**\n   * Create a standardized measurement object\n   */\n  private static createMeasurement(\n    value: number,\n    units: string,\n    source: MeasurementSource,\n    quality: QualityIndicator,\n    timestamp: Date,\n    accuracy: number = 0.95\n  ): Measurement {\n    return {\n      value,\n      units,\n      accuracy,\n      timestamp,\n      source,\n      qualityIndicator: quality,\n      uncertaintyBounds: {\n        lowerBound: value * (1 - (1 - accuracy)),\n        upperBound: value * (1 + (1 - accuracy)),\n        confidenceLevel: accuracy * 100,\n        distributionType: 'normal' as const\n      }\n    };\n  }\n\n  /**\n   * Calculate fan performance metrics\n   */\n  private static calculateFanPerformance(\n    systemConfiguration: SystemConfiguration,\n    systemPressure: number\n  ): any {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const designPressure = systemConfiguration.designParameters.designPressure;\n\n    // Simplified fan performance calculation\n    // In practice, this would use actual fan curves and manufacturer data\n    const efficiency = Math.max(0.6, Math.min(0.9, 0.8 - (systemPressure - designPressure) * 0.05));\n    const power = (designAirflow * systemPressure) / (6356 * efficiency); // HP\n    const powerKW = power * 0.746; // Convert to kW\n    const speed = 1800 * Math.sqrt(systemPressure / designPressure); // Simplified speed calculation\n\n    const curvePosition: FanCurvePosition = {\n      operatingPoint: {\n        airflow: designAirflow,\n        pressure: systemPressure,\n        power: powerKW,\n        efficiency: efficiency * 100,\n        speed\n      },\n      designPoint: {\n        airflow: designAirflow,\n        pressure: designPressure,\n        power: (designAirflow * designPressure) / (6356 * 0.8) * 0.746,\n        efficiency: 80,\n        speed: 1800\n      },\n      efficiencyAtOperating: efficiency * 100,\n      efficiencyAtDesign: 80,\n      surgeMargin: Math.max(0, (designAirflow * 0.7 - designAirflow) / designAirflow * 100),\n      stallMargin: Math.max(0, (designAirflow * 1.3 - designAirflow) / designAirflow * 100),\n      recommendedOperatingRange: {\n        minAirflow: designAirflow * 0.7,\n        maxAirflow: designAirflow * 1.3,\n        minPressure: designPressure * 0.5,\n        maxPressure: designPressure * 1.5\n      }\n    };\n\n    return {\n      power: powerKW,\n      efficiency: efficiency * 100,\n      speed,\n      curvePosition\n    };\n  }\n\n  /**\n   * Calculate airflow metrics and distribution\n   */\n  private static calculateAirflowMetrics(systemConfiguration: SystemConfiguration): any {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    \n    // Simplified airflow calculation\n    // In practice, this would consider actual system measurements\n    const totalAirflow = designAirflow * 0.95; // Assume 5% leakage\n    const efficiency = (totalAirflow / designAirflow) * 100;\n\n    return {\n      totalAirflow,\n      efficiency,\n      flowDistribution: {\n        uniformityIndex: 0.85, // Simplified\n        variationCoefficient: 0.15,\n        zones: []\n      }\n    };\n  }\n\n  /**\n   * Calculate system efficiency metrics\n   */\n  private static calculateSystemEfficiencyMetrics(\n    systemConfiguration: SystemConfiguration,\n    fanPerformance: any,\n    systemPressureResult: any\n  ): any {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n    const designPressure = systemConfiguration.designParameters.designPressure;\n\n    // Calculate various efficiency metrics\n    const systemEfficiency = Math.min(95, fanPerformance.efficiency * 0.9); // Account for system losses\n    const transportEfficiency = Math.min(90, 100 - (systemPressureResult.totalPressureLoss / designPressure) * 10);\n    const distributionEfficiency = Math.min(85, systemEfficiency * 0.9); // Account for distribution losses\n\n    return {\n      systemEfficiency,\n      transportEfficiency,\n      distributionEfficiency\n    };\n  }\n\n  /**\n   * Calculate environmental metrics\n   */\n  private static calculateEnvironmentalMetrics(\n    systemConfiguration: SystemConfiguration,\n    fanPerformance: any\n  ): any {\n    const designAirflow = systemConfiguration.designParameters.designAirflow;\n\n    // Simplified environmental calculations\n    const velocity = designAirflow / 144; // Simplified velocity calculation\n    const noiseLevel = 40 + 20 * Math.log10(velocity / 1000); // Simplified noise model\n    const vibrationLevel = Math.max(0.5, velocity / 2000); // Simplified vibration model\n    const temperatureRise = fanPerformance.power * 3412 / (designAirflow * 1.08); // Fan heat rise\n\n    return {\n      noiseLevel: Math.max(35, Math.min(65, noiseLevel)),\n      vibrationLevel: Math.max(0.1, Math.min(5.0, vibrationLevel)),\n      temperatureRise: Math.max(0.5, Math.min(5.0, temperatureRise)),\n      filterPressureDrop: 0.5, // Typical clean filter\n      coilPressureDrop: 0.8 // Typical coil pressure drop\n    };\n  }\n\n  /**\n   * Assess system balance quality\n   */\n  private static assessSystemBalance(\n    systemConfiguration: SystemConfiguration,\n    airflowMetrics: any\n  ): BalanceQuality {\n    // Simplified balance assessment\n    const flowVariation = 0.15; // 15% variation\n    const pressureVariation = 0.12; // 12% variation\n    const overallScore = Math.max(0, 100 - (flowVariation + pressureVariation) * 200);\n\n    let balanceGrade: BalanceGrade;\n    if (overallScore >= 90) balanceGrade = BalanceGrade.EXCELLENT;\n    else if (overallScore >= 80) balanceGrade = BalanceGrade.GOOD;\n    else if (overallScore >= 70) balanceGrade = BalanceGrade.ACCEPTABLE;\n    else if (overallScore >= 60) balanceGrade = BalanceGrade.POOR;\n    else balanceGrade = BalanceGrade.CRITICAL;\n\n    return {\n      overallScore,\n      flowVariation,\n      pressureVariation,\n      balanceGrade,\n      criticalZones: balanceGrade === BalanceGrade.CRITICAL ? ['Zone 1', 'Zone 3'] : [],\n      balanceRecommendations: this.generateBalanceRecommendations(balanceGrade)\n    };\n  }\n\n  /**\n   * Generate balance recommendations based on grade\n   */\n  private static generateBalanceRecommendations(grade: BalanceGrade): string[] {\n    switch (grade) {\n      case BalanceGrade.CRITICAL:\n        return [\n          'Immediate system rebalancing required',\n          'Check for blocked dampers or ducts',\n          'Verify fan operation and capacity',\n          'Consider professional commissioning'\n        ];\n      case BalanceGrade.POOR:\n        return [\n          'System rebalancing recommended',\n          'Adjust damper positions',\n          'Check for duct leakage',\n          'Verify design calculations'\n        ];\n      case BalanceGrade.ACCEPTABLE:\n        return [\n          'Minor adjustments may improve performance',\n          'Monitor system performance trends',\n          'Consider seasonal adjustments'\n        ];\n      default:\n        return ['System balance is within acceptable limits'];\n    }\n  }\n\n  /**\n   * Create duct segments from system configuration\n   */\n  private static createDuctSegmentsFromConfig(systemConfiguration: SystemConfiguration): any[] {\n    // Simplified duct segment creation\n    // In practice, this would parse the actual system configuration\n    return [\n      {\n        id: 'main_supply',\n        length: 100,\n        diameter: 24,\n        material: 'galvanized_steel',\n        roughness: 0.0015,\n        airflow: systemConfiguration.designParameters.designAirflow,\n        fittings: []\n      }\n    ];\n  }\n\n  /**\n   * Generate unique analysis ID\n   */\n  private static generateAnalysisId(systemId: string): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `analysis_${systemId}_${timestamp}_${random}`;\n  }\n\n  /**\n   * Create default trend analysis when no historical data is available\n   */\n  private static createDefaultTrendAnalysis(): TrendAnalysis {\n    return {\n      timeRange: {\n        startDate: new Date(),\n        endDate: new Date(),\n        duration: 0,\n        units: 'days' as const\n      },\n      trendDirection: TrendDirection.STABLE,\n      trendMagnitude: 0,\n      seasonalPatterns: [],\n      anomalies: [],\n      predictiveAnalysis: {\n        forecastHorizon: 12,\n        predictedPerformance: [],\n        confidenceInterval: { lowerBound: 0, upperBound: 0, confidenceLevel: 0 },\n        predictionModel: {\n          modelType: 'linear_regression' as const,\n          accuracy: 0,\n          lastTrainingDate: new Date(),\n          dataPoints: 0,\n          validationScore: 0\n        },\n        keyFactors: [],\n        scenarios: []\n      },\n      degradationRate: {\n        overallDegradationRate: 2.0, // 2% per year typical\n        componentDegradation: [],\n        degradationFactors: [],\n        maintenanceImpact: {\n          preventiveMaintenance: { performanceImpact: 5, lifespanImpact: 2, costImpact: 1000 },\n          correctiveMaintenance: { performanceImpact: -10, lifespanImpact: -1, costImpact: 5000 },\n          deferredMaintenance: { performanceImpact: -15, lifespanImpact: -3, costImpact: 10000 }\n        },\n        projectedLifespan: {\n          currentAge: 0,\n          designLife: 20,\n          projectedLife: 18,\n          confidenceLevel: 80,\n          keyAssumptions: ['Regular maintenance', 'Normal operating conditions']\n        }\n      }\n    };\n  }\n\n  /**\n   * Perform trend analysis on historical performance data\n   */\n  private static async performTrendAnalysis(\n    historicalData: PerformanceMetrics[],\n    currentMetrics: PerformanceMetrics\n  ): Promise<TrendAnalysis> {\n    if (historicalData.length < 2) {\n      return this.createDefaultTrendAnalysis();\n    }\n\n    // Calculate trend direction and magnitude\n    const trendAnalysis = this.calculateTrendDirection(historicalData);\n\n    // Detect seasonal patterns\n    const seasonalPatterns = this.detectSeasonalPatterns(historicalData);\n\n    // Detect anomalies\n    const anomalies = this.detectAnomalies(historicalData, currentMetrics);\n\n    // Generate predictive analysis\n    const predictiveAnalysis = this.generatePredictiveAnalysis(historicalData);\n\n    // Calculate degradation rate\n    const degradationRate = this.calculateDegradationRate(historicalData);\n\n    const timeRange = {\n      startDate: historicalData[0].totalSystemPressure.timestamp,\n      endDate: currentMetrics.totalSystemPressure.timestamp,\n      duration: historicalData.length,\n      units: 'days' as const\n    };\n\n    return {\n      timeRange,\n      trendDirection: trendAnalysis.direction,\n      trendMagnitude: trendAnalysis.magnitude,\n      seasonalPatterns,\n      anomalies,\n      predictiveAnalysis,\n      degradationRate\n    };\n  }\n\n  /**\n   * Calculate trend direction from historical data\n   */\n  private static calculateTrendDirection(historicalData: PerformanceMetrics[]): {\n    direction: TrendDirection;\n    magnitude: number;\n  } {\n    if (historicalData.length < 3) {\n      return { direction: TrendDirection.STABLE, magnitude: 0 };\n    }\n\n    // Simple linear regression on system efficiency\n    const efficiencyValues = historicalData.map(data => data.systemEfficiency.value);\n    const n = efficiencyValues.length;\n    const x = Array.from({ length: n }, (_, i) => i);\n\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = efficiencyValues.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * efficiencyValues[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const magnitude = Math.abs(slope);\n\n    let direction: TrendDirection;\n    if (magnitude < 0.1) {\n      direction = TrendDirection.STABLE;\n    } else if (slope > 0) {\n      direction = TrendDirection.IMPROVING;\n    } else {\n      direction = TrendDirection.DEGRADING;\n    }\n\n    return { direction, magnitude };\n  }\n\n  /**\n   * Detect seasonal patterns in performance data\n   */\n  private static detectSeasonalPatterns(historicalData: PerformanceMetrics[]): any[] {\n    // Simplified seasonal pattern detection\n    // In practice, this would use more sophisticated time series analysis\n    return [\n      {\n        season: 'summer' as const,\n        averagePerformance: 85,\n        performanceVariation: 5,\n        typicalIssues: ['Higher cooling loads', 'Increased fan power']\n      },\n      {\n        season: 'winter' as const,\n        averagePerformance: 88,\n        performanceVariation: 3,\n        typicalIssues: ['Filter loading', 'Heating coil pressure drop']\n      }\n    ];\n  }\n\n  /**\n   * Detect performance anomalies\n   */\n  private static detectAnomalies(\n    historicalData: PerformanceMetrics[],\n    currentMetrics: PerformanceMetrics\n  ): PerformanceAnomaly[] {\n    const anomalies: PerformanceAnomaly[] = [];\n\n    // Check for sudden efficiency drop\n    if (historicalData.length > 0) {\n      const lastEfficiency = historicalData[historicalData.length - 1].systemEfficiency.value;\n      const currentEfficiency = currentMetrics.systemEfficiency.value;\n      const efficiencyDrop = lastEfficiency - currentEfficiency;\n\n      if (efficiencyDrop > 5) { // 5% drop threshold\n        anomalies.push({\n          id: `anomaly_${Date.now()}`,\n          detectionTimestamp: new Date(),\n          anomalyType: AnomalyType.SUDDEN_CHANGE,\n          severity: efficiencyDrop > 10 ? 'critical' as const : 'high' as const,\n          affectedMetrics: ['systemEfficiency'],\n          deviationMagnitude: efficiencyDrop,\n          duration: 1,\n          possibleCauses: [\n            {\n              cause: 'Filter blockage',\n              probability: 60,\n              category: 'maintenance_issue' as const,\n              diagnosticSteps: ['Check filter pressure drop', 'Inspect filter condition']\n            },\n            {\n              cause: 'Fan belt slippage',\n              probability: 30,\n              category: 'equipment_failure' as const,\n              diagnosticSteps: ['Check fan belt tension', 'Inspect motor operation']\n            }\n          ],\n          recommendedActions: [\n            'Replace or clean filters',\n            'Check fan operation',\n            'Verify damper positions'\n          ],\n          resolved: false\n        });\n      }\n    }\n\n    return anomalies;\n  }\n\n  /**\n   * Generate predictive analysis\n   */\n  private static generatePredictiveAnalysis(historicalData: PerformanceMetrics[]): PredictiveAnalysis {\n    // Simplified predictive analysis\n    // In practice, this would use machine learning models\n    return {\n      forecastHorizon: 12,\n      predictedPerformance: [\n        {\n          metric: 'systemEfficiency',\n          currentValue: 85,\n          predictedValue: 83,\n          changePercent: -2.4,\n          timeToTarget: 6\n        }\n      ],\n      confidenceInterval: {\n        lowerBound: 80,\n        upperBound: 86,\n        confidenceLevel: 85\n      },\n      predictionModel: {\n        modelType: 'time_series' as const,\n        accuracy: 85,\n        lastTrainingDate: new Date(),\n        dataPoints: historicalData.length,\n        validationScore: 0.85\n      },\n      keyFactors: [\n        {\n          factor: 'Filter condition',\n          impact: 40,\n          controllable: true,\n          mitigationStrategies: ['Regular filter replacement', 'Pressure monitoring']\n        }\n      ],\n      scenarios: []\n    };\n  }\n\n  /**\n   * Calculate system degradation rate\n   */\n  private static calculateDegradationRate(historicalData: PerformanceMetrics[]): any {\n    // Simplified degradation calculation\n    return {\n      overallDegradationRate: 2.5, // 2.5% per year\n      componentDegradation: [\n        {\n          componentId: 'main_fan',\n          componentType: 'fan' as const,\n          degradationRate: 1.5,\n          currentCondition: 92,\n          estimatedRemainingLife: 12,\n          replacementThreshold: 70\n        }\n      ],\n      degradationFactors: [\n        {\n          factor: 'Operating hours',\n          impact: 50,\n          controllable: false,\n          mitigationStrategies: ['Optimize operating schedule']\n        },\n        {\n          factor: 'Maintenance quality',\n          impact: 30,\n          controllable: true,\n          mitigationStrategies: ['Preventive maintenance program', 'Staff training']\n        }\n      ],\n      maintenanceImpact: {\n        preventiveMaintenance: { performanceImpact: 5, lifespanImpact: 2, costImpact: 1000 },\n        correctiveMaintenance: { performanceImpact: -10, lifespanImpact: -1, costImpact: 5000 },\n        deferredMaintenance: { performanceImpact: -15, lifespanImpact: -3, costImpact: 10000 }\n      },\n      projectedLifespan: {\n        currentAge: 3,\n        designLife: 20,\n        projectedLife: 18,\n        confidenceLevel: 80,\n        keyAssumptions: ['Regular maintenance', 'Normal operating conditions']\n      }\n    };\n  }\n\n  /**\n   * Perform benchmark comparison against similar systems\n   */\n  private static async performBenchmarkComparison(\n    systemConfiguration: SystemConfiguration,\n    performanceMetrics: PerformanceMetrics\n  ): Promise<BenchmarkComparison> {\n    // Simplified benchmark comparison\n    // In practice, this would query a database of similar systems\n    const systemEfficiency = performanceMetrics.systemEfficiency.value;\n    const industryAverage = 82; // Typical industry average\n    const bestInClass = 92; // Best in class performance\n\n    return {\n      benchmarkType: BenchmarkType.INDUSTRY_AVERAGE,\n      benchmarkSource: 'ASHRAE Performance Database',\n      systemPerformance: systemEfficiency,\n      benchmarkValue: industryAverage,\n      percentile: this.calculatePercentile(systemEfficiency, industryAverage),\n      performanceGap: industryAverage - systemEfficiency,\n      improvementPotential: bestInClass - systemEfficiency,\n      similarSystems: [\n        {\n          systemId: 'similar_system_1',\n          systemName: 'Office Building HVAC',\n          performanceMetric: 84,\n          systemCharacteristics: {\n            size: 'medium' as const,\n            age: 5,\n            buildingType: 'office' as const,\n            climateZone: '4A',\n            operatingHours: 2500\n          },\n          performanceDifference: 84 - systemEfficiency\n        }\n      ]\n    };\n  }\n\n  /**\n   * Calculate percentile ranking\n   */\n  private static calculatePercentile(value: number, average: number): number {\n    // Simplified percentile calculation\n    // Assumes normal distribution with standard deviation of 8\n    const standardDeviation = 8;\n    const zScore = (value - average) / standardDeviation;\n\n    // Convert z-score to percentile (simplified)\n    if (zScore >= 2) return 97;\n    if (zScore >= 1) return 84;\n    if (zScore >= 0) return 50 + (zScore * 34);\n    if (zScore >= -1) return 50 + (zScore * 34);\n    if (zScore >= -2) return 16;\n    return 3;\n  }\n\n  /**\n   * Analyze system efficiency in detail\n   */\n  private static async analyzeSystemEfficiency(\n    systemConfiguration: SystemConfiguration,\n    performanceMetrics: PerformanceMetrics\n  ): Promise<EfficiencyAnalysis> {\n    // Simplified efficiency analysis\n    return {\n      overallEfficiency: {\n        value: performanceMetrics.systemEfficiency.value,\n        units: '%',\n        calculationMethod: 'calculated' as const,\n        accuracy: 0.9,\n        timestamp: new Date()\n      },\n      componentEfficiencies: [\n        {\n          componentId: 'main_fan',\n          componentType: 'fan' as const,\n          efficiency: performanceMetrics.fanEfficiency.value,\n          ratedEfficiency: 85,\n          degradationFactor: 0.95,\n          maintenanceStatus: 'good' as const\n        }\n      ],\n      efficiencyTrends: [],\n      efficiencyLosses: [],\n      improvementOpportunities: [],\n      benchmarkComparison: {\n        benchmarkType: BenchmarkType.INDUSTRY_AVERAGE,\n        benchmarkSource: 'Industry Standards',\n        systemPerformance: performanceMetrics.systemEfficiency.value,\n        benchmarkValue: 82,\n        percentile: 65,\n        performanceGap: 0,\n        improvementPotential: 10,\n        similarSystems: []\n      }\n    };\n  }\n\n  /**\n   * Detect performance alerts and warnings\n   */\n  private static async detectPerformanceAlerts(\n    performanceMetrics: PerformanceMetrics,\n    historicalData?: PerformanceMetrics[]\n  ): Promise<PerformanceAlert[]> {\n    const alerts: PerformanceAlert[] = [];\n\n    // Check efficiency threshold\n    if (performanceMetrics.systemEfficiency.value < 75) {\n      alerts.push({\n        id: `alert_${Date.now()}_efficiency`,\n        alertType: AlertType.THRESHOLD_EXCEEDED,\n        severity: AlertSeverity.HIGH,\n        metric: 'systemEfficiency',\n        currentValue: performanceMetrics.systemEfficiency.value,\n        thresholdValue: 75,\n        message: 'System efficiency below acceptable threshold',\n        timestamp: new Date(),\n        acknowledged: false,\n        recommendedActions: [\n          'Check filter condition',\n          'Verify fan operation',\n          'Inspect ductwork for leaks'\n        ]\n      });\n    }\n\n    // Check pressure threshold\n    if (performanceMetrics.totalSystemPressure.value > 4.0) {\n      alerts.push({\n        id: `alert_${Date.now()}_pressure`,\n        alertType: AlertType.THRESHOLD_EXCEEDED,\n        severity: AlertSeverity.MEDIUM,\n        metric: 'totalSystemPressure',\n        currentValue: performanceMetrics.totalSystemPressure.value,\n        thresholdValue: 4.0,\n        message: 'System pressure higher than expected',\n        timestamp: new Date(),\n        acknowledged: false,\n        recommendedActions: [\n          'Check for blocked ducts',\n          'Verify damper positions',\n          'Inspect filters'\n        ]\n      });\n    }\n\n    return alerts;\n  }\n\n  /**\n   * Generate performance recommendations\n   */\n  private static async generatePerformanceRecommendations(\n    performanceMetrics: PerformanceMetrics,\n    efficiencyAnalysis: EfficiencyAnalysis,\n    benchmarkComparison: BenchmarkComparison\n  ): Promise<PerformanceRecommendation[]> {\n    const recommendations: PerformanceRecommendation[] = [];\n\n    // Efficiency improvement recommendation\n    if (performanceMetrics.systemEfficiency.value < 85) {\n      recommendations.push({\n        id: `rec_${Date.now()}_efficiency`,\n        type: RecommendationType.OPTIMIZATION,\n        priority: RecommendationPriority.HIGH,\n        title: 'Improve System Efficiency',\n        description: 'System efficiency is below optimal levels. Consider implementing efficiency improvements.',\n        expectedImpact: {\n          energySavings: 15,\n          costSavings: 2500,\n          performanceImprovement: 10,\n          emissionReduction: 1200,\n          reliabilityImprovement: 5\n        },\n        implementationCost: 5000,\n        paybackPeriod: 24,\n        implementationComplexity: 'moderate' as const,\n        requiredActions: [\n          'Replace filters with high-efficiency models',\n          'Seal ductwork leaks',\n          'Optimize fan speed control'\n        ],\n        timeline: '2-4 weeks'\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Perform uncertainty analysis on performance metrics\n   */\n  private static async performUncertaintyAnalysis(\n    performanceMetrics: PerformanceMetrics,\n    systemConfiguration: SystemConfiguration\n  ): Promise<UncertaintyAnalysis> {\n    // Simplified uncertainty analysis\n    return {\n      overallUncertainty: 0.1, // 10% overall uncertainty\n      metricUncertainties: [\n        {\n          metric: 'systemEfficiency',\n          uncertainty: 0.05,\n          sources: ['measurement error', 'calculation assumptions'],\n          confidenceLevel: 90\n        }\n      ],\n      sensitivityAnalysis: {\n        parameters: [\n          {\n            parameter: 'airflow',\n            sensitivity: 0.8,\n            impact: 'high' as const\n          }\n        ],\n        keyDrivers: ['airflow', 'pressure'],\n        uncertaintyContributors: ['measurement accuracy', 'model assumptions']\n      },\n      recommendations: [\n        'Improve measurement accuracy',\n        'Calibrate sensors regularly',\n        'Validate calculation models'\n      ]\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}